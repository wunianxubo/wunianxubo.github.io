<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wunian&#39;s Blog</title>
  <subtitle>清风徐来，水波不兴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-09T03:35:18.595Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xu Bo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式系统互斥性与幂等性问题的分析和解决</title>
    <link href="http://yoursite.com/2018/04/09/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%BA%92%E6%96%A5%E6%80%A7%E4%B8%8E%E5%B9%82%E7%AD%89%E6%80%A7%E9%97%AE%E9%A2%98%E7%9A%84%E5%88%86%E6%9E%90%E5%92%8C%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2018/04/09/分布式系统互斥性与幂等性问题的分析和解决/</id>
    <published>2018-04-09T01:26:00.000Z</published>
    <updated>2018-04-09T03:35:18.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>分布式系统由独立的服务器通过网络松散耦合组成。在这个系统中，每个服务器都是一个独立的主机，服务器之间通过内部网络连接。分布式系统有以下几个特点：  </p>
<ul>
<li>可扩展性：可通过横向水平扩展来提高系统的性能和吞吐量。  </li>
<li>高可靠性：高容错，即使系统中一台或几台故障，系统通过失效转移仍然可以提供服务。  </li>
<li>高并发性：各机器并行独立处理和计算。  </li>
<li>廉价高效：多台小型机而非单台高性能机。  </li>
</ul>
<p>在分布式系统中，环境复杂、网络不稳定性会造成诸如时钟不一致的问题，存在于集中式系统中机器宕机、消息丢失等问题也会在分布式环境中变得更加复杂。有两个问题是分布式环境中需要重点关注和解决的典型问题：  </p>
<ul>
<li>互斥性问题</li>
<li>幂等性问题<a id="more"></a>
<h2 id="一、互斥性问题"><a href="#一、互斥性问题" class="headerlink" title="一、互斥性问题"></a>一、互斥性问题</h2>看个例子：<br>某服务器提供一组任务，A请求随机从任务组中获取一个任务；B请求随机从任务组中获取一个任务。在理想情况下，A从任务组中挑选一个任务，任务组删除该任务，B从剩下的任务组中再挑一个，之后任务组再删除。<br>但在真实情况下，如不做任何处理，可能出现A和B挑中了同一个任务的情况。  </li>
</ul>
<p>上面这个例子，存在操作互斥性的问题，其实就是对共享资源的抢占问题。如果不同的请求对同一个或者同一组资源读取并修改时，无法保证其按序执行，无法保证一个操作的原子性，那么就很有可能会出现预期外的情况。所以操作的互斥性问题可以理解为一个需要保证时序性、原子性的问题。  </p>
<p>在传统的基于数据库的架构中，对于数据的抢占问题往往是通过数据库事务（ACID）来保证的。在分布式环境中，<strong>分布式锁</strong>是一种比较常见和高效的解决方案。在传统的多线程、多进程情况下，已有比较好的解决方案，我们先来看看传统情况下是怎么解决的。  </p>
<h3 id="多线程环境下的解决方案"><a href="#多线程环境下的解决方案" class="headerlink" title="多线程环境下的解决方案"></a>多线程环境下的解决方案</h3><p><strong>基本上所有的并发模式在解决线程冲突的问题上，都是采用序列化访问共享资源的方式。</strong><br>在多线程环境下，最普遍的方式就是用互斥锁把该资源或对资源的操作保护起来。Java中提供两种互斥锁Lock和synchronized。不同线程之间对同一资源进行抢占，该资源通常表现为某个类的普通成员变量，使用Lock和synchronized将共享的变量及其操作锁住，就可以解决资源抢占的问题。  </p>
<h3 id="多进程的解决方案"><a href="#多进程的解决方案" class="headerlink" title="多进程的解决方案"></a>多进程的解决方案</h3><p>在多道程序系统中存在许多进程，它们共享各种资源，然而有很多资源一次只能供一个进程使用，这便是临界资源。多进程中的临界资源大致可以分为两类，一类是物理上的真实资源，如打印机；一类是硬盘或内存中的共享数据，如共享内存等。进程内互斥访问临界资源的代码称为<strong>临界区</strong>。<br>对于临界资源的互斥访问，JVM层面的锁已经失去作用了。在多进程情况下，主要还是利用操作系统层面的进程间通信原理来解决临界资源的抢占问题。比较常见的一种方法是使用信号量（Semaphores）<br>信号量分为有名信号量和无名信号量。无名信号量通常保存在共享内存中，而有名信号量是于一个特定的文件夹名称相关联。对信号量的操作主要是P操作（wait）和V操作（signal）。  </p>
<ul>
<li>P操作：先检查信号量的大小，若值大于零，则将信号量减1，同时进程获得共享资源的访问权限，继续执行；若小于或者等于零，则该进程被阻塞后，进入等待队列。  </li>
<li>V操作：该操作将信号量的值加1，如果有进程阻塞着等待该信号量，那么其中一个进程被唤醒。  </li>
</ul>
<p>对共享资源的操作前后（进入和退出临界区）进行加锁和解锁，保证不同线程或进程可以互斥有序的操作资源。  </p>
<h3 id="分布式环境下的解决方案——分布式锁"><a href="#分布式环境下的解决方案——分布式锁" class="headerlink" title="分布式环境下的解决方案——分布式锁"></a>分布式环境下的解决方案——分布式锁</h3><p>不管是多线程还是多进程环境下的锁都有很多共通之处，他们满足一些最基本的条件：  </p>
<ol>
<li>需要有存储锁的空间，并且锁的空间是可以访问到的。  </li>
<li>锁需要被唯一标识（全局唯一）。  </li>
<li>锁至少要有两种状态，如ReetrantLock中的status，0表示没有线程竞争，大于0表示有线程竞争；或者是有锁、没锁这样分类。  </li>
</ol>
<p>有了这三个条件，就可以基本上实现一个简单的分布式锁了。以数据库为例，实现一个简单的分布式锁：数据库表，字段为锁的ID（唯一标识），还有锁的状态（0表示没锁，1表示被锁）。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">lock</span> = mysql.<span class="keyword">get</span>(id);</div><div class="line"><span class="keyword">while</span>(<span class="keyword">lock</span>.status == <span class="number">1</span>)  <span class="comment">//已被锁，继续等待获取</span></div><div class="line">    sleep(<span class="number">100</span>);</div><div class="line">mysql.update(<span class="keyword">lock</span>.status = <span class="number">1</span>);  <span class="comment">//获取到锁，更新锁状态为被锁 </span></div><div class="line">doSomthing();  <span class="comment">//执行逻辑</span></div><div class="line">mysql.update(<span class="keyword">lock</span>.status = <span class="number">0</span>);  <span class="comment">//释放锁，更新锁状态</span></div></pre></td></tr></table></figure></p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>上面简单的实现了一个分布式锁，但是存在一些问题：  </p>
<ul>
<li>问题1：锁状态判断的原子性无法保证<br>从读取锁的状态，到判断该状态是否为被锁，这两个操作如果不能保证是原子性的，就可能导致不止一个请求获取到了锁，这显然是不行的。  </li>
<li>问题2：网络断开或主机宕机，锁状态无法清除<br>假设主机在获取到锁的情况下，突然出现了网络断开或者主机宕机，如果不做任何处理该锁将仍然处于被锁定的状态。那么之后的所有请求都无法再成功抢占到这个锁。因此，我们需要在持有锁的主机遇到网络断开或者主机宕机时，及时的释放掉这把锁。  </li>
<li>问题3：无法保证释放的是自己上锁的那把锁<br>如果持有锁的主机A在临界区遇到网络抖动而导致网络断开，分布式锁及时的被释放了。之后，另一个主机B占用了这把锁，但是此时主机A网络恢复，退出临界区并解锁。由于都是一把锁，所以数据库中锁的状态会变为无占用状态；如果此时第三个主机C尝试抢占这把锁，也将会成功获得。因此，我们需要在解锁时，确定自己解的这个锁是否还是当前主机还依旧占用的这把锁（因为可能在这之前这把锁已经被释放过了）。  </li>
</ul>
<h4 id="进阶条件"><a href="#进阶条件" class="headerlink" title="进阶条件"></a>进阶条件</h4><p>分布式锁的实现，如果可以解决上面三个问题，可以算是一个相对完整的分布式锁了。在实际情况中，可能有更高级的要求。  </p>
<ol>
<li>可重入：线程中的可重入，指的是外层函数获得锁之后，内层也可以获得锁，Lock和synchronized都是可重入锁；在分布式环境中，一般还是指的线程的可重入。  </li>
<li>惊群效应（Herd Effect）：在分布式锁中，惊群效应指的是，在有多个请求等待获取锁的时候，一旦占有锁的线程释放之后，如果所有等待方都被同时唤醒，尝试抢占锁。但是这样的情况会造成比较大的开销，应避免惊群效应的产生。  </li>
<li>公平锁于非公平锁：不同需求下可能需要不同分布式锁。非公平锁开销较小，但如果业务需求竞争者按顺序获得锁，那么就需要实现公平锁。  </li>
<li>阻塞锁和自旋锁：阻塞锁需要上下文的切换，或并发量高且临界区的操作耗时比较短，那么性能开销会比较大。如果临界区操作耗时比较长，一直保持自旋，也会对CPU造成更大的负荷。  </li>
</ol>
<h4 id="典型实现"><a href="#典型实现" class="headerlink" title="典型实现"></a>典型实现</h4><h5 id="Zookeeper的实现"><a href="#Zookeeper的实现" class="headerlink" title="Zookeeper的实现"></a>Zookeeper的实现</h5><p>Zookeeper中有一种节点叫做顺序节点，假如我们在/lock/目录下创建三个节点，zk集群会按照发起创建的顺序来创建节点，节点分别为/lock/00000001、/lock/00000002、/lock/00000003。<br>zk中还有一种名为临时节点的节点，临时节点由某个客户端创建，当客户端于zk集群断开连接，则该节点自动被删除。  </p>
<p>根据zk中节点是否存在，可以作为分布式锁的锁状态，以此来实现一个分布式锁，下面是分布式锁的基本逻辑：  </p>
<ol>
<li>客户端调用create()方法创建名为”/dlm-locks/lockname/lock-“的临时顺序节点。  </li>
<li>客户端调用getChildren(“lockname”)方法来获取所有已经创建的子节点。</li>
<li>客户端获取到所有子节点path之后，如果发现自己在步骤1中创建的节点是所有节点中序号最小的，那么久认为这个客户端获得了锁。  </li>
<li>如果创建的节点不是所有节点中最小的，那么则监视比自己创建节点的序列号小的最大的节点，进入等待。直到下次监视的子节点变更的时候，再进行子节点的获取，判断是否获取锁。  </li>
</ol>
<p>释放锁的过程相对比较简单，就是删除自己创建的那个子节点即可。  </p>
<h5 id="Redis的实现"><a href="#Redis的实现" class="headerlink" title="Redis的实现"></a>Redis的实现</h5><p>Redis的分布式缓存特性使其成为了分布式锁的一种基础实现。通过Redis中是否存在某个锁ID，则可以判断是否已经上锁。为了保证判断锁是否存在的原子性，保证只有一个县城获取同一把锁，Redis有SETNX(set if not exist)和GETSET（先写新值，返回旧值，原子性操作，用于分辨是不是首次操作）。  </p>
<p>为了防止主机宕机和网络断开之后的死锁，Redis没有zk那种天然的实现方式，只能依赖设置超时时间来规避。  </p>
<p>下面是一种比较普遍但不太完善的Redis分布式锁的实现步骤：  </p>
<ol>
<li>线程A发送SETNX lock.orderid尝试获得锁，如果锁不存在，则set并获得锁。  </li>
<li>如果锁存在，则再判断锁的值（时间戳）是否大于当前时间，如果没有超时，则等待下再重试。  </li>
<li>如果已经超时，再用GETSET lock.orderid来尝试获取锁，如果这时候拿到的时间戳仍然超时，那么说明已经获得锁了。  </li>
<li>如果在此之前，另一个线程C快一步执行了上面的操作，那么A拿到的时间戳是个未超时的值，这是A没有如期获得锁，需要再次等待或重试。</li>
</ol>
<h5 id="Tair的实现"><a href="#Tair的实现" class="headerlink" title="Tair的实现"></a>Tair的实现</h5><p>实现与Redis类似，Tair客户端封装了一个expireLock的方法：通过锁状态和过期时间戳来共同判断锁是否存在，只有锁已经存在且没有过期的状态才判定为有锁状态。在有锁的情况下，不能加锁，能通过大于或等于过期时间的时间戳进行解锁。  </p>
<p>采用这种方式，可以不用再Value中存储时间戳，并且保证了判断是否有锁的原子性。并且，由于超时时间由Tair判断，所以避免了不同主机时钟不一致的情况。  </p>
<h5 id="分布式锁的弊端"><a href="#分布式锁的弊端" class="headerlink" title="分布式锁的弊端"></a>分布式锁的弊端</h5><ul>
<li>强依赖于外部组件：分布式锁的实现都依赖于外部数据存储如zk、Redis等，因此一旦这些外部组件出现故障，那么分布式锁就不可用了。  </li>
<li>无法完全满足需求：不同分布式锁的实现，都有相应的特点，对于一些需求并不能很好的满足，如实现公平锁、给等待锁加超时时间等等。  </li>
</ul>
<p>基于以上的问题，结合多种的实现方式，美团开发了Cerberus，提供更灵活可靠的分布式锁。Cerberus有以下特点：  </p>
<ol>
<li>一套接口多种引擎。使用了多种引擎实现方式（Tair、ZK、未来支持Redis），可自主选择所需的一种或多种引擎。</li>
<li>使用灵活，学习成本低。提供一套API，方便使用。  </li>
<li>支持一键降级。可以实时切换引擎的接口，用于应对所依赖主引擎的故障发生。</li>
</ol>
<h2 id="二、幂等性问题"><a href="#二、幂等性问题" class="headerlink" title="二、幂等性问题"></a>二、幂等性问题</h2><p>幂等，就是对接口的多次调用所产生的结果和调用一次是一致的。这里的接口，可以是对外发布的HTTP接口或者Thrift接口，也可以是接收消息的内部接口，或者是一个内部方法或操作。<br>比如以下例子：  </p>
<ul>
<li>在App下单的时候，点击确认之后没反应，就又点击几次。在这种情况下，如果无法保证该接口的幂等性，那么将会出现重复下单问题。  </li>
</ul>
<p>在分布式环境中，网络环境更加复杂，因前端操作抖动、网络故障、消息重复、响应速度慢等原因，对接口重复调用概率会比集中式环境下更大，尤其是重复消息在分布式环境中很难避免。  </p>
<p>分布式环境中，有些接口是天然保证幂等性的，如查询操作。有些对数据的修改是一个常量，并且无其他记录和操作，那么夜可以说是具有幂等性的。其他情况下，会涉及对数据的修改、状态的变更就有必要防止重复性操作的发生，我们需要通过实现接口的幂等性来防止重复操作所带来的影响。 </p>
<h3 id="GTIS"><a href="#GTIS" class="headerlink" title="GTIS"></a>GTIS</h3><p>是分布式环境下幂等性的一个解决方案，能确保在分布式环境下操作的唯一性。  </p>
<h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><p>GTIS实现思路是将每一个不同的业务操作赋予其唯一性。这个唯一性通过对不同操作所对应的唯一的内容特性生成一个唯一的全局ID来实现的。基本原则是：相同的操作生成相同的全局ID；不同的操作生成不同的全局ID。  </p>
<p>生成的全局ID需要存储在外部存储引擎中，数据库、Redis或者是Tair均可以实现。考虑到Tair天生分布式和持久化的优势，目前GTIS存储在Tair中。其对应的key和value如下：  </p>
<ul>
<li>key：将对于不同的业务，采用APP_KEY + 业务操作内容特性生成一个唯一标识trans_contents。然后对唯一标识进行加密生成全局ID作为Key。  </li>
<li>value：current_timestamp + trans_contents，current_timestamp用于标识当前的操作线程。  </li>
</ul>
<p>判断是否重复，主要采用Tair的SETNX方法，如果原来没有值则set且返回成功，如果已经有值则返回失败。  </p>
<h4 id="内部流程"><a href="#内部流程" class="headerlink" title="内部流程"></a>内部流程</h4><p>GTIS内部的实现流程为：  </p>
<ol>
<li>业务方在业务操作之前，生成一个能够唯一标识该操作的transContents，传入GTIS；</li>
<li>GTIS根据传入的transContents，用MD5生成全局ID；</li>
<li>GTIS将全局ID作为key，current_timestamp + trans_contents作为value放入Tair进行setNx，将结果返回给业务方；</li>
<li>业务方根据返回结果确定能否开始进行业务操作；</li>
<li>若能，开始进行操作；若不能，则结束当前操作；</li>
<li>业务方将操作结果和请求结果传入GTIS，系统进行一次请求结果的检验；</li>
<li>若盖茨操作成功，GTIS根据Key取出value值，跟传入的返回结果进行对比，如果两者相同，则将全局ID的过期时间改为较长时间；</li>
<li>GTIS返回最终结果。  </li>
</ol>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/gtis_principle.jpg" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;分布式系统由独立的服务器通过网络松散耦合组成。在这个系统中，每个服务器都是一个独立的主机，服务器之间通过内部网络连接。分布式系统有以下几个特点：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可扩展性：可通过横向水平扩展来提高系统的性能和吞吐量。  &lt;/li&gt;
&lt;li&gt;高可靠性：高容错，即使系统中一台或几台故障，系统通过失效转移仍然可以提供服务。  &lt;/li&gt;
&lt;li&gt;高并发性：各机器并行独立处理和计算。  &lt;/li&gt;
&lt;li&gt;廉价高效：多台小型机而非单台高性能机。  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在分布式系统中，环境复杂、网络不稳定性会造成诸如时钟不一致的问题，存在于集中式系统中机器宕机、消息丢失等问题也会在分布式环境中变得更加复杂。有两个问题是分布式环境中需要重点关注和解决的典型问题：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互斥性问题&lt;/li&gt;
&lt;li&gt;幂等性问题
    
    </summary>
    
      <category term="分布式系统" scheme="http://yoursite.com/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="大型网站技术架构" scheme="http://yoursite.com/tags/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/"/>
    
      <category term="分布式系统" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>大型网站的架构模式</title>
    <link href="http://yoursite.com/2018/01/04/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E7%9A%84%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/01/04/大型网站的架构模式/</id>
    <published>2018-01-04T03:24:00.000Z</published>
    <updated>2018-04-09T03:37:19.880Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;为了解决大型网站面临的高并发访问、海量数据的处理、高可靠运行等问题，提出了许多解决方案，来使网站达到高性能、高可用、易伸缩、可扩展、安全。这些大公司的解决方案，被更多网站重复使用，形成了大型网站的架构模式。主要通过以下几种方式来实现：<br><a id="more"></a></p>
<h3 id="1、分层"><a href="#1、分层" class="headerlink" title="1、分层"></a>1、分层</h3><p>&nbsp;<strong>分层是最常见的一种架构模式，将系统在横向维度上切分成几个部分，每个部分负责一部分相对比较单一的职责，然后通过上层对下层的依赖和调用组成一个完整的系统。</strong> 网络的七层通信协议也是一种分层结构。<br>&nbsp;通过分层，可以将一个庞大的系统切分成多个不同的部分，便于分工合作开发和维护；各层之间具有一定的独立性，只要维持调用接口不变，各层可以根据具体的问题独立演化发展而不需要其他层必须作出相应的调整。  </p>
<h3 id="2、分割"><a href="#2、分割" class="headerlink" title="2、分割"></a>2、分割</h3><p>&nbsp;<strong>分层是横向的切分，而分割是在纵向进行切分。网站越大，其功能越复杂，服务和数据处理的种类也越多，通过分割，将这些不同的服务和功能切分开来，不仅有利于软件的开发和维护，也便于不同模块的分布式部署，来提高网站的并发处理能力和功能扩展能力。</strong><br>&nbsp;比如购物业务，可分割成机票酒店业务、3C业务、小商品业务等更小的粒度。在这个粒度上，还可以继续分割成首页、搜索列表、商品详情等模块，这些模式不管是物理上还是逻辑上都可以是独立的。  </p>
<h3 id="3、分布式"><a href="#3、分布式" class="headerlink" title="3、分布式"></a>3、分布式</h3><p>&nbsp;<strong>分层和分割可以更好的便于分布式部署，将不同模块部署在不同的服务器上，通过远程调用协同工作。</strong> 分布式意味着可以使用更多的计算机完成同样的功能，计算机越多，CPU、内存、存储资源也越多，能够处理的并发访问和数据量就越大，可以为更多的用户服务。  </p>
<h3 id="4、集群"><a href="#4、集群" class="headerlink" title="4、集群"></a>4、集群</h3><p>&nbsp;使用分布式将分层和分割后的模块进行独立部署，但是<strong>对于用户访问集中的模块（比如首页），还需要将独立部署的服务器集群化，即多台服务器部署相同应用构成一个集群，通过负载均衡设备共同对外提供服务</strong> 。当某台服务器发生故障时，负载均衡设备或者系统的失效转移机制会将请求转发到集群中其他服务器上，使服务器故障不影响用户使用。  </p>
<h3 id="5、缓存"><a href="#5、缓存" class="headerlink" title="5、缓存"></a>5、缓存</h3><p>&nbsp;<strong>缓存就是将数据存放在距离计算最近的位置以加快处理速度</strong>，是改善软件性能的第一手段。<br><strong>CDN：</strong> 即内容分发网络，部署在距离终端用户最近的网络服务商，用户的网络请求总是先到达他的网络服务商哪里，在这里缓存网站的一些静态资源，可以就近以最快速度返回给用户，如将用户访问量很大的热点内容缓存在CDN。<br><strong>反向代理：</strong> 反向代理部署在网站的前端，当用户请求到达网站的数据中心时，最先访问的就是反向代理服务器，这里缓存网站的静态资源，无需将请求转发给应用服务器就可以返回给用户。<br><strong>本地缓存：</strong> 在应用服务器本地缓存着热点数据，应用程序可以在本机内存中直接访问数据，而不需要访问数据库。<br><strong>分布式缓存：</strong> 单机无法承受大量的缓存，需要将数据缓存在一个专门的分布式缓存集群中，应用程序通过网络通信访问缓存数据。<br>使用缓存的两个前提：一个是数据访问热点不均衡，某些数据会被更频繁的访问，将这部分数据进行缓存；还有一个是数据在某个时间段内是有效的，不会很快过期，否则会产生脏读，影响结果的正确性。  </p>
<h3 id="6、异步"><a href="#6、异步" class="headerlink" title="6、异步"></a>6、异步</h3><p>&nbsp;<strong>异步架构是典型的生产者-消费者模式，处在业务操作前面的线程将输出写入到队列，后面的线程从队列中读取数据进行处理，两者不存在直接调用，彼此功能可以随意变化而互不影响。</strong> 异步还有其他几点优势：<br><strong>1.提供系统可用性：</strong> 消费者服务器发生故障，数据会在消息队列器中存储的堆积，生产者服务器可以继续处理业务请求，等消费者服务器恢复后可以继续从队列中取数据进行处理。<br><strong>2.加快网站的响应速度：</strong> 处在业务前端的生产者服务器在处理完业务请求后，将数据写入消息队列，不需要等待消费者服务器处理就可以返回，响应延迟小。<br><strong>3.消除并发访问高峰：</strong> 使用消息队列将突然增加的访问请求数据放入消息队列，等待消费者服务器依次处理，就不会对整个网站负载造成太大压力。  </p>
<h3 id="7、冗余"><a href="#7、冗余" class="headerlink" title="7、冗余"></a>7、冗余</h3><p>&nbsp;网站需要24小时的运行，但是服务器可能随时都会出现故障，<strong>要想保证在服务器宕机的情况下网站依然可以继续服务，不丢失数据，就需要一定程度的服务器冗余运行，数据冗余备份，这样在某台服务器宕机时，可以将其上的服务和数据访问转移到其他机器上。</strong> 数据库除了要定期备份，存档保存，实现冷备份外，为了保证在线业务高可用，还需要对数据库进行主从分离，实时同步实现热备份。为抵御自然灾害，还需要对整个数据中心进行备份，全球范围内部署灾备数据中心，网站程序和数据实时同步到多个灾备数据中心。  </p>
<h3 id="8、自动化"><a href="#8、自动化" class="headerlink" title="8、自动化"></a>8、自动化</h3><p>&nbsp;通过减少认为的干预，使发布过程自动化可以有效减少故障。自动化的代码管理，自动化的测试，自动化的安全检测，及最后自动化的部署。此外，还需要，对生产环境进行自动化监控，出现异常、超出预设阈值，会自动化报警，故障发生时自动化的失效转移，故障消除时自动化的失效恢复等等等。  </p>
<h3 id="9、安全"><a href="#9、安全" class="headerlink" title="9、安全"></a>9、安全</h3><p>&nbsp;通过密码和手机验证码进行身份认证；登录交易等操作对网络通信进行加密；为防止机器人程序滥用网络资源攻击网站，使用验证码进行识别；对于常用的攻击网络的XSS攻击，SQL注入进行编码转换等处理；对垃圾信息、敏感信息进行过滤；对交易转账等重要操作根据交易模式和交易信息进行风险控制。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;为了解决大型网站面临的高并发访问、海量数据的处理、高可靠运行等问题，提出了许多解决方案，来使网站达到高性能、高可用、易伸缩、可扩展、安全。这些大公司的解决方案，被更多网站重复使用，形成了大型网站的架构模式。主要通过以下几种方式来实现：&lt;br&gt;
    
    </summary>
    
      <category term="大型网站技术架构核心原理" scheme="http://yoursite.com/categories/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="大型网站技术架构" scheme="http://yoursite.com/tags/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Java内存溢出与内存泄漏</title>
    <link href="http://yoursite.com/2017/12/08/%EF%BC%88%E8%BD%AC%EF%BC%89Java%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%92%8C%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/"/>
    <id>http://yoursite.com/2017/12/08/（转）Java内存溢出和内存泄漏/</id>
    <published>2017-12-08T02:23:00.000Z</published>
    <updated>2018-04-09T03:37:52.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、为什么要了解内存泄露和内存溢出？"><a href="#一、为什么要了解内存泄露和内存溢出？" class="headerlink" title="一、为什么要了解内存泄露和内存溢出？"></a>一、为什么要了解内存泄露和内存溢出？</h2><p>1、内存泄露一般是代码设计存在缺陷导致的，通过了解内存泄露的场景，可以避免不必要的内存溢出和提高自己的代码编写水平；<br>2、通过了解内存溢出的几种常见情况，可以在出现内存溢出的时候快速的定位问题的位置，缩短解决故障的时间。<br><a id="more"></a></p>
<h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><p><strong>内存泄露</strong>：无用对象持续占有内存或无用对象的内存得不到及时释放，从而造成的内存空间的浪费称为内存泄漏。<br><strong>内存溢出</strong>：指程序运行过程中无法申请到足够的内存而导致的一种错误。内存溢出通常发生于OLD段（老年代）或Perm段（永久代）垃圾回收后，仍然无内存空间容纳新的Java对象的情况。<br>从定义上可以看出内存泄露是内存溢出的一种诱因，不是唯一因素。  </p>
<h2 id="三、Java中主要的内存泄漏场景"><a href="#三、Java中主要的内存泄漏场景" class="headerlink" title="三、Java中主要的内存泄漏场景"></a>三、Java中主要的内存泄漏场景</h2><ul>
<li><p>静态集合类，容器中的对象在程序结束之前都不会释放。这些静态变量的生命周期和应用程序一致，他们所引用的对象Object也不能被释放，因为他们也将一直被Vector引用。</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> Vector v = <span class="keyword">new</span> Vector();</div><div class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">1</span>; i&lt;<span class="number">100</span>; i++)&#123;</div><div class="line">    <span class="keyword">Object</span> o = <span class="keyword">new</span> <span class="keyword">Object</span>();</div><div class="line">    v.<span class="built_in">add</span>(o);</div><div class="line">    o = <span class="keyword">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>修改hashset中对象的参数值，且参数是计算哈希值的字段。<br>  当一个对象被存储进HashSet集合中以后，就不能修改这个对象中的那些参与计算哈希值的字段，否则对象修改后的哈希值与最初存储进HashSet集合中时的哈希值就不同了，在这种情况下，即使在contains方法使用该对象的当前引用作为参数去HashSet集合中检索对象，也将返回找不到对象的结果，这也会导致无法从HashSet集合中删除当前对象，造成内存泄露。</p>
</li>
<li>数据库连接、网络连接、IO连接，不再使用时需要close方法释放</li>
<li>监听器，用到的监听器在释放的时候没有去删除，从而增加了内存泄漏的可能性</li>
<li>变量不合理的作用域，成员变量在使用后依然存在（结局：将变量设为局部变量）</li>
<li>单例造成内存泄漏，单例对象在初始化后将在JVM的整个生命周期内存在，如果外部对象（生命周期比较短）持有该引用，那么该外部对象就不能被回收，从而导致内存泄漏</li>
</ul>
<h2 id="四、内存溢出的几种情况："><a href="#四、内存溢出的几种情况：" class="headerlink" title="四、内存溢出的几种情况："></a>四、内存溢出的几种情况：</h2><h3 id="1、堆内存溢出（outOfMemoryError：java-heap-space）"><a href="#1、堆内存溢出（outOfMemoryError：java-heap-space）" class="headerlink" title="1、堆内存溢出（outOfMemoryError：java heap space）"></a>1、堆内存溢出（outOfMemoryError：java heap space）</h3><p>&nbsp;&nbsp;分为两种情况：一种是堆内存确实不够，还有一种是由于内存的泄漏而造成的内存溢出。<br>&nbsp;&nbsp;在jvm规范中，堆中的内存是用来生成对象实例和数组的。我们只要不断的创建对象，并且保证GC Roots到对象之间有可达路径来避免垃圾回收机制清除这些对象，当对象数量达到最大堆容量限制后产生内存溢出异常。    如果细分，堆内存还可以分为年轻代和年老代，年轻代包括一个eden区和两个survivor区。<br><img src="http://osrmzp0jr.bkt.clouddn.com/20141107224401036.png" alt="image"><br>当生成新对象时，内存的申请过程如下：<br>a、jvm先尝试在eden区分配新建对象所需的内存；<br>b、如果内存大小足够，申请结束，否则下一步；<br>c、jvm启动Minor GC，试图将eden区中不活跃的对象释放掉，释放后若Eden空间仍然不足以放入新对象，则试图将部分Eden中活跃对象放入Survivor区；如果整个新生代都放不下对象时，可以直接在老年代分配内存；<br>d、Survivor区被用来作为Eden及old的中间交换区域，当OLD区空间足够时，Survivor区的对象会被移到Old区，否则会被保留在Survivor区；<br>e、当OLD区空间不够时，JVM会在OLD区进行full GC；<br>f、full GC后，若Survivor及OLD区仍然无法存放从Eden复制过来的部分对象，导致JVM无法在Eden区为新对象创建内存区域，则出现”out of memory错误”。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> class MemoryLeak &#123;</div><div class="line">   </div><div class="line">    <span class="keyword">private</span> <span class="keyword">String</span>[] s = <span class="keyword">new</span> <span class="keyword">String</span>[<span class="number">1000</span>];</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">        Map&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt; m =<span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>,<span class="keyword">Object</span>&gt;();</div><div class="line">        <span class="built_in">int</span> i =<span class="number">0</span>;</div><div class="line">        <span class="built_in">int</span> j=<span class="number">10000</span>;</div><div class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">            <span class="keyword">for</span>(;i&lt;j;i++)&#123;</div><div class="line">                MemoryLeak memoryLeak = <span class="keyword">new</span> MemoryLeak();</div><div class="line">                m.put(<span class="keyword">String</span>.valueOf(i), memoryLeak);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><p>&nbsp;&nbsp;出现这种异常，一般手段是先通过内存映像分析工具(如Eclipse Memory Analyzer)对dump出来的堆转存快照进行分析，重点是确认内存中的对象是否是必要的，先分清是因为内存泄漏(Memory Leak)还是内存溢出(Memory Overflow)。<br>&nbsp;&nbsp;如果是内存泄漏，可进一步通过工具（如Jrockit等工具）查看泄漏对象到GC Roots的引用链。于是就能找到泄漏对象时通过怎样的路径与GC Roots相关联并导致垃圾收集器无法自动回收。<br>如果不存在泄漏，那就应该检查虚拟机的参数(-Xmx与-Xms)的设置是否适当。</p>
<h3 id="2、方法区内存溢出（outOfMemoryError：permgem-space）"><a href="#2、方法区内存溢出（outOfMemoryError：permgem-space）" class="headerlink" title="2、方法区内存溢出（outOfMemoryError：permgem space）"></a>2、方法区内存溢出（outOfMemoryError：permgem space）</h3><p>在jvm规范中，方法区主要存放的是类相关信息（如类名、访问修饰符、常量池、字段描述、方法描述等），静态变量，常量，即时编译器编译后的代码等。<br>所以<strong>如果程序加载的类过多，或者使用反射、gclib等这种动态代理生成类的技术，就可能导致该区发生内存溢出。</strong>  在经常动态生成大量Class的应用中，要注意这点。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jvm参数：-XX:<span class="attribute">PermSize</span>=2m -XX:<span class="attribute">MaxPermSize</span>=2m</div><div class="line">将方法区的大小设置很低即可，在启动加载类库时就会出现内存不足的情况</div></pre></td></tr></table></figure></p>
<h3 id="3、线程栈溢出（java-lang-StackOverflowError）"><a href="#3、线程栈溢出（java-lang-StackOverflowError）" class="headerlink" title="3、线程栈溢出（java.lang.StackOverflowError）"></a>3、线程栈溢出（java.lang.StackOverflowError）</h3><p>线程栈时线程独有的一块内存结构，所以线程栈发生问题必定是某个线程运行时产生的错误。<br><strong>一般线程栈溢出是由于递归太深或方法调用层级过多导致的。</strong><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StackOverflowTest</span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;</div><div class="line">    <span class="keyword">int</span> i =<span class="number">0</span>;</div><div class="line">    digui(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">digui</span>(<span class="params"><span class="keyword">int</span> i</span>)</span>&#123;</div><div class="line">    System.<span class="keyword">out</span>.println(i++);</div><div class="line">    String[] s = <span class="keyword">new</span> String[<span class="number">50</span>];</div><div class="line">    digui(i);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="五、为了避免内存泄露，在编写代码的过程中可以参考下面的建议："><a href="#五、为了避免内存泄露，在编写代码的过程中可以参考下面的建议：" class="headerlink" title="五、为了避免内存泄露，在编写代码的过程中可以参考下面的建议："></a>五、为了避免内存泄露，在编写代码的过程中可以参考下面的建议：</h2><p>1、尽早释放无用对象的引用<br>2、使用字符串处理，避免使用String，应大量使用StringBuffer，每一个String对象都得独立占用内存一块区域<br>3、尽量少用静态变量，因为静态变量存放在永久代（方法区），永久代基本不参与垃圾回收<br>4、避免在循环中创建对象<br>5、开启大型文件或从数据库一次拿了太多的数据很容易造成内存溢出，所以在这些地方要大概计算一下数据量的最大值是多少，并且设定所需最小及最大的内存空间值。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、为什么要了解内存泄露和内存溢出？&quot;&gt;&lt;a href=&quot;#一、为什么要了解内存泄露和内存溢出？&quot; class=&quot;headerlink&quot; title=&quot;一、为什么要了解内存泄露和内存溢出？&quot;&gt;&lt;/a&gt;一、为什么要了解内存泄露和内存溢出？&lt;/h2&gt;&lt;p&gt;1、内存泄露一般是代码设计存在缺陷导致的，通过了解内存泄露的场景，可以避免不必要的内存溢出和提高自己的代码编写水平；&lt;br&gt;2、通过了解内存溢出的几种常见情况，可以在出现内存溢出的时候快速的定位问题的位置，缩短解决故障的时间。&lt;br&gt;
    
    </summary>
    
      <category term="深入理解Java虚拟机" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java虚拟机" scheme="http://yoursite.com/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>如何保证线程的顺序执行？</title>
    <link href="http://yoursite.com/2017/12/05/%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E7%BA%BF%E7%A8%8B%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C%EF%BC%9F/"/>
    <id>http://yoursite.com/2017/12/05/如何保证线程的顺序执行？/</id>
    <published>2017-12-05T08:43:00.000Z</published>
    <updated>2018-04-09T01:06:17.620Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;有T1，T2，T3三个线程，如何保证T1执行完再执行T2，T2执行完再执行T3？这个问题是面试的常考问题，涉及到了一些java并发知识的实际应用。主要有下面三种方法，依次讲解下：  </p>
<h2 id="1、使用join关键字实现"><a href="#1、使用join关键字实现" class="headerlink" title="1、使用join关键字实现"></a>1、使用join关键字实现</h2><p>join关键字用于让当前线程等待join线程执行完毕后再执行，否则会处于等待阻塞状态。有两种方法：<br>方法一：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="keyword">Task</span> <span class="keyword">implements</span> Runnable&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> taskId;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">Task</span>(<span class="keyword">int</span> taskId)&#123;</div><div class="line">        <span class="keyword">this</span>.taskId = taskId; </div><div class="line">    &#125;    </div><div class="line">    </div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> run()&#123;</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="string">"线程"</span>+taskId+<span class="string">"运行！"</span>)；</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> method1() <span class="keyword">throws</span> InterruptedException&#123;</div><div class="line">    Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> <span class="keyword">Task</span>(<span class="number">1</span>));</div><div class="line">    Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> <span class="keyword">Task</span>(<span class="number">2</span>));</div><div class="line">    Thread t3 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> <span class="keyword">Task</span>(<span class="number">3</span>));</div><div class="line">    </div><div class="line">    t1.start();</div><div class="line">    t1.<span class="keyword">join</span>();<span class="comment">//阻塞主线程，直到线程1执行完</span></div><div class="line">    t2.start();</div><div class="line">    t2.<span class="keyword">join</span>();<span class="comment">//阻塞主线程，直到线程2执行完</span></div><div class="line">    t3.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方法二：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">        @<span class="function">Override</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>)&#123;</div><div class="line">            System.<span class="keyword">out</span>.println(<span class="string">"线程1运行！"</span>)；</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">        @<span class="function">Override</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>)&#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                t1.<span class="keyword">join</span>();</div><div class="line">                System.<span class="keyword">out</span>.println(<span class="string">"线程2运行！"</span>);</div><div class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    Thread t3 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">        @<span class="function">Override</span></div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="params"></span>)&#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                t2.<span class="keyword">join</span>();</div><div class="line">                System.<span class="keyword">out</span>.println(<span class="string">"线程3运行！"</span>);</div><div class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    t1.start();</div><div class="line">    t2.start();</div><div class="line">    t3.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2、使用队列"><a href="#2、使用队列" class="headerlink" title="2、使用队列"></a>2、使用队列</h2><p>把线程依次加入到队列里，按顺序执行即可。newSingleThreadExecutor是一个只有一个消费线程的线程池，这个消费线程会按队列FIFO的顺序去任务队列里取任务，只要保证三个线程按顺序放入就可以了。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="keyword">Task</span> <span class="keyword">implements</span> Runnable&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> taskId;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">Task</span>(<span class="keyword">int</span> taskId)&#123;</div><div class="line">        <span class="keyword">this</span>.taskId = taskId;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> run()&#123;</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="string">"线程"</span>+taskId+<span class="string">"执行！"</span>)；</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> method3()&#123;</div><div class="line">    ExecutorService threadPool = Executors.newSingleThreadExecutor();</div><div class="line">    threadPool.execute(<span class="keyword">new</span> <span class="keyword">Task</span>(<span class="number">1</span>));</div><div class="line">    threadPool.execute(<span class="keyword">new</span> <span class="keyword">Task</span>(<span class="number">2</span>));</div><div class="line">    threadPool.execute(<span class="keyword">new</span> <span class="keyword">Task</span>(<span class="number">3</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="3、使用CountDownLatch关键字实现"><a href="#3、使用CountDownLatch关键字实现" class="headerlink" title="3、使用CountDownLatch关键字实现"></a>3、使用CountDownLatch关键字实现</h2><p>执行它的latch.await()方法，如果计数器不为0，那么当前线程就会被阻塞；每完成一个任务，就执行latch.countDown()，计数器减一，当计数器为0时，阻塞的线程恢复执行状态。<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">method4</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">final</span> CountDownLatch latch1 = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">    <span class="keyword">final</span> CountDownLatch latch1 = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</div><div class="line">    </div><div class="line">    Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            System.out.println(<span class="string">"线程1执行！"</span>);</div><div class="line">            lacth1.countDown();<span class="comment">//执行完任务后，计数器减一</span></div><div class="line">        &#125;</div><div class="line">    &#125;));</div><div class="line">    </div><div class="line">    Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                latch1.await();<span class="comment">//直到t1中countDown后计数器为0时，t2才继续执行</span></div><div class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"线程2执行！"</span>);</div><div class="line">            lacth2.countDown();</div><div class="line">        &#125;</div><div class="line">    &#125;));</div><div class="line">    </div><div class="line">    Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                latch2.await();<span class="comment">//直到t2中countDown后计数器为0时，t3才继续执行</span></div><div class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">            System.out.println(<span class="string">"线程3执行！"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;有T1，T2，T3三个线程，如何保证T1执行完再执行T2，T2执行完再执行T3？这个问题是面试的常考问题，涉及到了一些java并发知识的实际应用。主要有下面三种方法，依次讲解下：  &lt;/p&gt;
&lt;h2 id=&quot;1、使用join关键字实现&quot;&gt;&lt;a hre
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java并发" scheme="http://yoursite.com/tags/java%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="http://yoursite.com/2017/12/01/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/12/01/抽象工厂模式/</id>
    <published>2017-12-01T12:40:00.000Z</published>
    <updated>2018-04-09T01:06:17.620Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;前面讲的工厂方法模式，存在一个问题：类的创建依赖于工厂类，也就是说，如果需要扩展程序，必须对工厂类进行修改。这时候我们使用抽象工厂类，就可以解决这个问题。创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了。<br><img src="http://osrmzp0jr.bkt.clouddn.com/factory3.png" alt="image"><br>Sender接口：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public<span class="built_in"> interface </span>Sender&#123;</div><div class="line">    public void Send();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>两个实现类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is mailSender!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> <span class="keyword">implements</span> <span class="title">Sender</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is smsSender!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>两个工厂类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMailFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendSmsFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>提供一个接口：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public<span class="built_in"> interface </span>Provider&#123;</div><div class="line">    public Sender produce();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试类：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Provider provider = <span class="keyword">new</span> SendMailFactory();</div><div class="line">        MailSender mailSender = provider.produce();</div><div class="line">        mailSender.Send();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>&nbsp;&nbsp;这时如果想要增加一个功能：发及时信息，那么只需要做一个实现类，实现Sender接口，同时做一个工厂类，实现Provider接口，就不用过去改动现有的代码。这么做的话，扩展性会更好！  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;前面讲的工厂方法模式，存在一个问题：类的创建依赖于工厂类，也就是说，如果需要扩展程序，必须对工厂类进行修改。这时候我们使用抽象工厂类，就可以解决这个问题。创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了。&lt;br&gt;&lt;img src=
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>工厂方法模式</title>
    <link href="http://yoursite.com/2017/12/01/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/12/01/工厂方法模式/</id>
    <published>2017-12-01T12:40:00.000Z</published>
    <updated>2018-04-09T01:06:17.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、普通工厂模式"><a href="#一、普通工厂模式" class="headerlink" title="一、普通工厂模式"></a>一、普通工厂模式</h1><p>就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。关系图如下：<br><img src="http://osrmzp0jr.bkt.clouddn.com/factory1.png" alt="image"><br>举例如下：发送邮件和发送短信的例子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//两者的共同接口</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sender</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//创建实现类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is mailSender!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> <span class="keyword">implements</span> <span class="title">Sender</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"this is smsSender!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//建工厂类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">(String type)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="string">"mail"</span>.equals(type))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MailSender();</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"sms"</span>.equals(type))&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            System.out.println(<span class="string">"请输入正确的类型！"</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        SendFactory factory = <span class="keyword">new</span> SendFactory();</div><div class="line">        Sender sender = factory.produce(<span class="string">"mail"</span>);</div><div class="line">        sender.Send();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="二、多个工厂方法模式"><a href="#二、多个工厂方法模式" class="headerlink" title="二、多个工厂方法模式"></a>二、多个工厂方法模式</h1><p>是对普通工厂方法模式的改进，在普通方法的模式中，如果传递的字符串出错，就不能正确的创建对象。而多个工厂方法模式，提供多个工厂方法，分别创建对象。<br><img src="http://osrmzp0jr.bkt.clouddn.com/factory2.png" alt="image"><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//只需工厂方法进行修改</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span>&#123;</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produceMail</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produceSms</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        SendFactory factory = <span class="keyword">new</span> SendFactory();</div><div class="line">        Sender sender = factory.produceMail();</div><div class="line">        sender.Send();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="三、静态工厂方法模式"><a href="#三、静态工厂方法模式" class="headerlink" title="三、静态工厂方法模式"></a>三、静态工厂方法模式</h1><p>将上面多个工厂方法的模式里的方法设置为静态的，不需要创建实例，直接调用即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title">produceMail</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title">produceSms</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//测试类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span>&#123;</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        Sender sender = SendFactory.produceMail();</div><div class="line">        sender.Send();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>如果出现了大量的产品需要创建，并且有共同的接口时，可以通过工厂方法模式来进行创建。第一种如果传入的字符串有错误，不能正确创建对象；第三种相较于第二种，不需要实例化工厂类。大多数情况下，静态工厂方法模式使用较多。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、普通工厂模式&quot;&gt;&lt;a href=&quot;#一、普通工厂模式&quot; class=&quot;headerlink&quot; title=&quot;一、普通工厂模式&quot;&gt;&lt;/a&gt;一、普通工厂模式&lt;/h1&gt;&lt;p&gt;就是建立一个工厂类，对实现了同一接口的一些类进行实例的创建。关系图如下：&lt;br&gt;&lt;img s
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://yoursite.com/2017/12/01/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/12/01/单例模式/</id>
    <published>2017-12-01T12:40:00.000Z</published>
    <updated>2018-04-09T01:06:17.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h1><p>设计模式是一套被反复使用、多数人知晓的、代码设计经验的总结。<br>目的：为了可重用代码、让代码更容易被他人理解、保证代码的可靠性。  </p>
<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>保证整个应用中某个实例有且只有一个。  </p>
<h2 id="应用场合"><a href="#应用场合" class="headerlink" title="应用场合"></a>应用场合</h2><p>有些对象我们只需要一个，比如<strong>配置文件、工具类、线程池、缓存、日志对象</strong>等。如果创造出多个实例，就会导致许多问题，比如占用过多资源，不一致的结果等。  </p>
<h2 id="一、饿汉模式"><a href="#一、饿汉模式" class="headerlink" title="一、饿汉模式"></a>一、饿汉模式</h2><p>第一步：将构造方法私有化，不允许外部直接创建对象<br>第二步：创建类的唯一实例，使用private static修饰，private保证不让外部类直接访问，static保证在第一次加载类的时候就创建了类的唯一实例。<br>第三步：提供一个用于获取实例的方法，使用public static修饰，static保证外部可以用类来调用该方法。<br><strong>所谓饿汉，主要体现在第二步，在加载类的时候就创建了类的唯一实例，而不管你是否会使用到，用空间来换取时间。</strong><br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public calss Singleton&#123;</div><div class="line"></div><div class="line">    //1.将构造方法私有化，不允许外部直接创建对象</div><div class="line">   <span class="keyword"> private</span> Singleton()&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">    //2.创建类的唯一实例，使用private<span class="keyword"> static</span>修饰</div><div class="line">   <span class="keyword"> private</span><span class="keyword"> static</span> Singleton<span class="built_in"> instance </span>=<span class="built_in"> new </span>Singleton();</div><div class="line">    </div><div class="line">    //3.提供一个用于获取实例的方法，使用public<span class="keyword"> static</span>修饰</div><div class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> Singleton getInstance()&#123;</div><div class="line">       <span class="built_in"> return </span>instance;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="二、懒汉模式"><a href="#二、懒汉模式" class="headerlink" title="二、懒汉模式"></a>二、懒汉模式</h2><p><strong>懒汉主要体现在只有在需要获取实例时，才去创建。判断实例是否为空，为空则创建唯一实例。用时间来换取空间。</strong><br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">private class Singleton&#123;</div><div class="line">    //1.将构造方法私有化，不允许外部直接创建对象</div><div class="line">   <span class="keyword"> private</span> Singleton()&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //2.声明类的实例变量，使用private<span class="keyword"> static</span>修饰</div><div class="line">   <span class="keyword"> private</span><span class="keyword"> static</span> Singleton instance;</div><div class="line">    </div><div class="line">    //3.提供一个用于获取实例的方法，使用public<span class="keyword"> static</span>修饰</div><div class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> Singleton getInstance()&#123;</div><div class="line">        if(instance==null)&#123;</div><div class="line">           <span class="built_in"> instance </span>=<span class="built_in"> new </span>Singleton();</div><div class="line">        &#125;</div><div class="line">       <span class="built_in"> return </span>instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>饿汉模式的特点是加载类时比较慢，因为需要创建类的实例，但运行时获取对象的速度比较快，是线程安全的。<br>懒汉模式的特点是加载类时比较快，因为不需要在加载时创建类的实例，但运行时获取对象的速度比较慢，是线程不安全的。  </p>
<h2 id="三、懒汉模式的优化"><a href="#三、懒汉模式的优化" class="headerlink" title="三、懒汉模式的优化"></a>三、懒汉模式的优化</h2><p>懒汉模式是线程不安全的，首先我们想到的是在getInstace()方法上加上synchronized关键字，如下：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public static synchronized Singleton getInstance()&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="attribute">instance</span>==null)&#123;</div><div class="line">           <span class="built_in"> instance </span>= new Singleton();</div><div class="line">        &#125;</div><div class="line">        return<span class="built_in"> instance;</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这样的做法，会让性能下降，原因是每次调用getInstance()，都需要拿到对象上锁，事实上我们只需要在第一次创建对象的时候加锁，之后就不需要了。进行下面的优化，使用双重判断：<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public static Singleton getInstance()&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="attribute">instance</span>==null)&#123;</div><div class="line">            synchronized(instance)&#123;</div><div class="line">                <span class="keyword">if</span>(<span class="attribute">instance</span>==null)&#123;</div><div class="line">               <span class="built_in"> instance </span>= new Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return<span class="built_in"> instance;</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>其实这样问题没有完全解决，instance = new Singleton()，这一句其实包含三个步骤：<br>1.在内存中为实例分配空间<br>2.进行Singleton的初始化动作<br>3.将实例的内存地址赋给instance变量<br>但这三步的顺序是不能保证的，可能在给Singleton分配完空间后就进行了赋值操作，使得没有进行初始化。这时候使用实例时，就会出现问题。  </p>
<h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><h4 id="第一种方法："><a href="#第一种方法：" class="headerlink" title="第一种方法："></a>第一种方法：</h4><p>单例模式可以使用内部类来维护它的实现，jvm内部的机制可以保证一个类被加载时候是线程互斥的，当我们第一次调用getInstance方法时，可以保证Instance只被创建一次，并且保证instance初始化完毕，就不用担心上面的问题。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>&#123;</span></div><div class="line"></div><div class="line">    <span class="comment">//私有构造方法，防止被实例化</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//使用内部类来维护单例</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonFactory</span>&#123;</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    <span class="comment">//获取实例</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonFactory.instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="第二种方法（推荐）"><a href="#第二种方法（推荐）" class="headerlink" title="第二种方法（推荐）"></a>第二种方法（推荐）</h4><p>将instance变量用volatile关键字修饰，这样做的目的是禁止指令重排序，就不会出现Singleton没有被正常初始化的问题。<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Singleton&#123;</div><div class="line"></div><div class="line">    //私有构造方法</div><div class="line">   <span class="keyword"> private</span> Singleton()&#123;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //volatile修饰instance变量</div><div class="line">   <span class="keyword"> private</span><span class="keyword"> static</span> volatile Singleton<span class="built_in"> instance </span>= null;</div><div class="line">    </div><div class="line">    //获取实例</div><div class="line">   <span class="keyword"> public</span><span class="keyword"> static</span> Singleton getInstance()&#123;</div><div class="line">        if(instance == null)&#123;</div><div class="line">            synchronized(instance)&#123;</div><div class="line">                if(instance == null)&#123;</div><div class="line">                   <span class="built_in"> instance </span>=<span class="built_in"> new </span>Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">       <span class="built_in"> return </span>instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是设计模式&quot;&gt;&lt;a href=&quot;#什么是设计模式&quot; class=&quot;headerlink&quot; title=&quot;什么是设计模式&quot;&gt;&lt;/a&gt;什么是设计模式&lt;/h1&gt;&lt;p&gt;设计模式是一套被反复使用、多数人知晓的、代码设计经验的总结。&lt;br&gt;目的：为了可重用代码、让代码更容
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>HashMap的四种遍历方式</title>
    <link href="http://yoursite.com/2017/12/01/HashMap%E7%9A%84%E5%9B%9B%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/12/01/HashMap的四种遍历方式/</id>
    <published>2017-12-01T12:39:00.000Z</published>
    <updated>2018-04-09T01:06:17.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Map的四种遍历方式"><a href="#一、Map的四种遍历方式" class="headerlink" title="一、Map的四种遍历方式"></a>一、Map的四种遍历方式</h1><h2 id="1、foreach-map-entrySet"><a href="#1、foreach-map-entrySet" class="headerlink" title="1、foreach map.entrySet()"></a>1、foreach map.entrySet()</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Map&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt;();</div><div class="line"><span class="built_in">for</span>(Entry&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; entry : <span class="built_in">map</span>.entrySet())&#123;</div><div class="line">    entry.<span class="built_in">getKey</span>();</div><div class="line">    entry.getValue();</div><div class="line">    </div><div class="line">    <span class="comment">//在遍历过程中删除元素，会抛出异常java.util.ConcurrentModificationException</span></div><div class="line">    <span class="comment">//entry.remove(entry.getKey());</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2、调用map-entrySet-的集合迭代器"><a href="#2、调用map-entrySet-的集合迭代器" class="headerlink" title="2、调用map.entrySet()的集合迭代器"></a>2、调用map.entrySet()的集合迭代器</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Iterator&lt;Map.Entry&lt;String,String&gt;&gt; </span><span class="keyword">it </span>= <span class="meta">map</span>.entrySet().<span class="keyword">iterator();</span></div><div class="line"><span class="symbol">while</span>(<span class="keyword">it.hasNext())&#123;</span></div><div class="line">    <span class="meta">Map</span>.Entry&lt;<span class="keyword">String,String&gt; </span><span class="meta">entry</span> = <span class="keyword">it.next();</span></div><div class="line">    <span class="meta">entry</span>.getKey()<span class="comment">;</span></div><div class="line">    <span class="meta">entry</span>.getValue()<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3、foreach-map-keySet"><a href="#3、foreach-map-keySet" class="headerlink" title="3、foreach map.keySet()"></a>3、foreach map.keySet()</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Map&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt; <span class="built_in">map</span> = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>,<span class="keyword">String</span>&gt;();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">String</span> <span class="built_in">key</span> : <span class="built_in">map</span>.keySet())&#123;</div><div class="line">    <span class="built_in">map</span>.<span class="built_in">get</span>(<span class="built_in">key</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4、foreach-map-entrySet-，用临时变量保存map-entrySet"><a href="#4、foreach-map-entrySet-，用临时变量保存map-entrySet" class="headerlink" title="4、foreach map.entrySet()，用临时变量保存map.entrySet()"></a>4、foreach map.entrySet()，用临时变量保存map.entrySet()</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Set</span>&lt;<span class="meta">Entry</span>&lt;<span class="keyword">String,String&gt;&gt; </span>entrySet = <span class="meta">map</span>.entrySet()<span class="comment">;</span></div><div class="line"><span class="symbol">for</span>(<span class="meta">Entry</span>&lt;<span class="keyword">String,String&gt; </span><span class="meta">entry</span> : entrySet())&#123;</div><div class="line">    <span class="meta">entry</span>.getKey()<span class="comment">;</span></div><div class="line">    <span class="meta">entry</span>.getValue()<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="二、结论"><a href="#二、结论" class="headerlink" title="二、结论"></a>二、结论</h1><p>1、在foreach map.entrySet()这种遍历方法的遍历过程中，不能删除元素，由于在遍历HashMap中删除了当前元素，下一个待访问的元素的指针也丢失了，所以会抛出java.util.ConcurrentModificationException。<br>2、如果需要在遍历过程中进行删除元素，可以使用调用map.entrySet()的集合迭代器来进行遍历。<br>3、如果只需要遍历key而不需要value的话，可以使用foreach map.keySet()的方式进行遍历。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、Map的四种遍历方式&quot;&gt;&lt;a href=&quot;#一、Map的四种遍历方式&quot; class=&quot;headerlink&quot; title=&quot;一、Map的四种遍历方式&quot;&gt;&lt;/a&gt;一、Map的四种遍历方式&lt;/h1&gt;&lt;h2 id=&quot;1、foreach-map-entrySet&quot;&gt;&lt;
    
    </summary>
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java三大特性之多态性</title>
    <link href="http://yoursite.com/2017/12/01/Java%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7%E4%B9%8B%E5%A4%9A%E6%80%81/"/>
    <id>http://yoursite.com/2017/12/01/Java三大特性之多态/</id>
    <published>2017-12-01T12:38:00.000Z</published>
    <updated>2018-04-09T01:06:17.616Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、多态的定义"><a href="#一、多态的定义" class="headerlink" title="一、多态的定义"></a>一、多态的定义</h1><p>&nbsp;&nbsp;多态就是指：程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法到底是哪个类中实现的方法，必须由程序运行期间才能决定。这样，不需要修改源程序，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序选择多个运行状态，这就是多态性。  </p>
<h1 id="二、多态的实现条件"><a href="#二、多态的实现条件" class="headerlink" title="二、多态的实现条件"></a>二、多态的实现条件</h1><p>Java实现多态有三个必要条件：<strong>继承、重写、向上转型</strong>。<br>继承：在多台中必须存在有继承关系的子类和父类。<br>重写：子类对父类中的某些方法进行重新定义，在调用这些方法时就会调用子类的方法。<br>向上转型：在多态中需要把父类型的引用变量指向子类对象。<br>&nbsp;&nbsp;多态的实现机制遵循一个原则：当父类对象的引用变量指向子类对象时，子类对象的类型决定了调用的是谁的方法，但是这个被调用的方法必须是在父类中定义过的，也就是说被子类覆盖的方法。  </p>
<h1 id="三、经典实例"><a href="#三、经典实例" class="headerlink" title="三、经典实例"></a>三、经典实例</h1><p>&nbsp;&nbsp;<strong>原则：当父类对象的引用变量指向子类对象时，子类对象的类型决定了调用的是谁的方法，但是这个被调用的方法必须是在父类中定义过的，也就是说被子类覆盖的方法。如果不符合前面的条件，它仍然需要根据继承链中方法调用的优先级来确认方法，优先级为：</strong><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这类this指的是引用变量的类型</span></div><div class="line"><span class="keyword">this</span>.show(o)---&gt;<span class="keyword">super</span>.show(o)---&gt;<span class="keyword">this</span>.show((<span class="keyword">super</span>)o)---&gt;<span class="keyword">super</span>.show((<span class="keyword">super</span>)o)</div></pre></td></tr></table></figure></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    public <span class="type">String</span> show(<span class="type">D</span> obj) &#123;</div><div class="line">        <span class="keyword">return</span> (<span class="string">"A and D"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public <span class="type">String</span> show(<span class="type">A</span> obj) &#123;</div><div class="line">        <span class="keyword">return</span> (<span class="string">"A and A"</span>);</div><div class="line">    &#125; </div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</div><div class="line">    public <span class="type">String</span> show(<span class="type">B</span> obj)&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="string">"B and B"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public <span class="type">String</span> show(<span class="type">A</span> obj)&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="string">"B and A"</span>);</div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    public static void main(<span class="type">String</span>[] args) &#123;</div><div class="line">        <span class="type">A</span> a1 = <span class="keyword">new</span> <span class="type">A</span>();</div><div class="line">        <span class="type">A</span> a2 = <span class="keyword">new</span> <span class="type">B</span>();</div><div class="line">        <span class="type">B</span> b = <span class="keyword">new</span> <span class="type">B</span>();</div><div class="line">        <span class="type">C</span> c = <span class="keyword">new</span> <span class="type">C</span>();</div><div class="line">        <span class="type">D</span> d = <span class="keyword">new</span> <span class="type">D</span>();</div><div class="line">        </div><div class="line">        <span class="type">System</span>.out.println(<span class="string">"1--"</span> + a1.show(b));</div><div class="line">        <span class="type">System</span>.out.println(<span class="string">"2--"</span> + a1.show(c));</div><div class="line">        <span class="type">System</span>.out.println(<span class="string">"3--"</span> + a1.show(d));</div><div class="line">        <span class="type">System</span>.out.println(<span class="string">"4--"</span> + a2.show(b));</div><div class="line">        <span class="type">System</span>.out.println(<span class="string">"5--"</span> + a2.show(c));</div><div class="line">        <span class="type">System</span>.out.println(<span class="string">"6--"</span> + a2.show(d));</div><div class="line">        <span class="type">System</span>.out.println(<span class="string">"7--"</span> + b.show(b));</div><div class="line">        <span class="type">System</span>.out.println(<span class="string">"8--"</span> + b.show(c));</div><div class="line">        <span class="type">System</span>.out.println(<span class="string">"9--"</span> + b.show(d));      </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//运行结果</span></div><div class="line"><span class="number">1</span>--<span class="type">A</span> and <span class="type">A</span></div><div class="line"><span class="number">2</span>--<span class="type">A</span> and <span class="type">A</span></div><div class="line"><span class="number">3</span>--<span class="type">A</span> and <span class="type">D</span></div><div class="line"><span class="number">4</span>--<span class="type">B</span> and <span class="type">A</span></div><div class="line"><span class="number">5</span>--<span class="type">B</span> and <span class="type">A</span></div><div class="line"><span class="number">6</span>--<span class="type">A</span> and <span class="type">D</span></div><div class="line"><span class="number">7</span>--<span class="type">B</span> and <span class="type">B</span></div><div class="line"><span class="number">8</span>--<span class="type">B</span> and <span class="type">B</span></div><div class="line"><span class="number">9</span>--<span class="type">A</span> and <span class="type">D</span></div></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;比如分析4，a2.show(b)，按照上面原则的意思，是由B来决定调用谁的方法，所有a2.show(b)应该要调用B中的show(B obj)，产生的结果应该是“B and B”，但是这样是错误的，因为我们忽略了后面那句话：被调用的方法必须要在父类中定义过的，不符合要求，不能直接这么做！所以仍然要按照继承链的调用方法的优先级来确认。由于this(A)没有父类，跳到第三级this((super)o)，找到了A中的show(A obj)方法，同时由于B重写了该方法，所以最终会调用B类中的show(A obj)方法，最后输出“B and A”。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、多态的定义&quot;&gt;&lt;a href=&quot;#一、多态的定义&quot; class=&quot;headerlink&quot; title=&quot;一、多态的定义&quot;&gt;&lt;/a&gt;一、多态的定义&lt;/h1&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;多态就是指：程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调
    
    </summary>
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>IO多路复用select、poll、epoll的区别与使用</title>
    <link href="http://yoursite.com/2017/10/27/Linux%E7%B3%BB%E7%BB%9F%E2%80%94%E2%80%94IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8select%E3%80%81poll%E3%80%81epoll%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/10/27/Linux系统——IO多路复用select、poll、epoll的区别与使用/</id>
    <published>2017-10-27T12:36:00.000Z</published>
    <updated>2018-04-09T01:06:17.618Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-O复用简述"><a href="#I-O复用简述" class="headerlink" title="I/O复用简述"></a>I/O复用简述</h2><p>&emsp;I/O多路复用技术是为了解决进程或线程阻塞到某个I/O系统调用而出现的技术，使进程不阻塞于某个特定的I/O系统调用。<br>&emsp;select()、poll()、epoll()都是I/O多路复用的机制。<strong>I/O多路复用通过一种机制，可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。</strong> select()、poll()、epoll()本质上都是同步IO，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说，读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。  </p>
<h2 id="一、select-的使用"><a href="#一、select-的使用" class="headerlink" title="一、select()的使用"></a>一、select()的使用</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int <span class="keyword">select</span>(<span class="built_in">int</span> nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, <span class="keyword">struct</span> timeval *<span class="keyword">timeout</span>);</div><div class="line">nfds:要监视的文件描述符的范围，一般取描述符数的最大值+1</div><div class="line">readfds：监视的可读描述符集合，只要有文件描述符即将进行读操作，这个文件描述符就存储到这。</div><div class="line">writefds：监视的可写描述符集合。</div><div class="line">exceptfds：监视的错误异常描述符集合。</div></pre></td></tr></table></figure>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>&emsp;监视并等待多个文件描述符的属性变化（可读、可写或错误异常）。select()函数监视的文件描述符分为三类，分别是readfds，writefds，exceptfds。调用select()函数会阻塞，直到有描述符就绪（有数据可读、可写或者有错误异常，或者超时），函数才会返回。当select()函数返回后，可以通过遍历fdset来找到就绪的描述符。</p>
<h3 id="select-的优缺点"><a href="#select-的优缺点" class="headerlink" title="select()的优缺点"></a>select()的优缺点</h3><p><strong>优点：</strong> 几乎在所有平台是都支持，具有良好的跨平台支持。<br><strong>缺点：</strong><br>1、每次调用select()，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大；同时每次调用select()，都需要在内核遍历传递进来的所有fd，这个开销在fd很多时也很大。<br>2、单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024，可以通过修改宏定义甚至重新编译内核的方式提升这一限制，但是这样也会造成效率的降低。  </p>
<h2 id="二、poll-的使用"><a href="#二、poll-的使用" class="headerlink" title="二、poll()的使用"></a>二、poll()的使用</h2><p>select()和poll()系统调用的本质一样，管理多个描述符也是进行轮询，根据描述符的状态进行处理，但是poll()没有最大文件描述符数量的限制（但数量过大后性能也会下降）。poll()和select()同样存在一个缺点是，包含大量文件描述符的集合被整体复制于用户态和内核态之间，而不论这些文件描述符是否就绪，随文件描述符数量的增加而线性增大。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span><span class="params">(struct pollfd *fds, <span class="keyword">nfds_t</span> nfds, <span class="keyword">int</span> timeout)</span></span></div></pre></td></tr></table></figure></p>
<h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><p>&emsp;监视并等待多个文件描述符的属性变化。<br>&emsp;poll()的实现和select()非常相似，只是描述fd集合的方式不同，poll()使用pollfd结构而不是select()的fd_set结构，还有就是poll()没有最大文件描述符数量的限制，其他的都差不多。  </p>
<h2 id="三、epoll-的使用"><a href="#三、epoll-的使用" class="headerlink" title="三、epoll()的使用"></a>三、epoll()的使用</h2><p>epoll()是select()和poll()的增强版本。但epoll更加灵活，没有描述符限制。epoll()使用一个文件描述符管理多个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内核空间的copy只需一次。<br>epoll操作过程需要三个接口：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span>(<span class="params"><span class="keyword">int</span> size</span>)</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span>(<span class="params"><span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, <span class="keyword">struct</span> epoll_event *<span class="keyword">event</span></span>)</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span>(<span class="params"><span class="keyword">int</span> epfd, <span class="keyword">struct</span> epoll_event *events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout</span>)</span>;</div></pre></td></tr></table></figure></p>
<h3 id="1、int-epoll-create-int-size"><a href="#1、int-epoll-create-int-size" class="headerlink" title="1、int epoll_create(int size)"></a>1、int epoll_create(int size)</h3><p><strong>功能：</strong> 该函数生成一个epoll专用的文件描述符（创建一个epoll的句柄）。在创建好epoll句柄后，它就是会占用一个fd值，在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽。  </p>
<h3 id="2、int-epoll-ctl-int-epfd-int-op-int-fd-struct-epoll-event-event"><a href="#2、int-epoll-ctl-int-epfd-int-op-int-fd-struct-epoll-event-event" class="headerlink" title="2、int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)"></a>2、int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)</h3><p><strong>功能：</strong> epoll的事件注册函数，它不同于select()是在监听事件时告诉内核要监听什么类型的事件，epoll需要先注册要监听的事件类型。  </p>
<h3 id="3、int-epoll-wait-int-epfd-struct-epoll-event-events-int-maxevents-int-timeout"><a href="#3、int-epoll-wait-int-epfd-struct-epoll-event-events-int-maxevents-int-timeout" class="headerlink" title="3、int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout)"></a>3、int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout)</h3><p><strong>功能：</strong> 等待事件的发生，收集在epoll监控的事件中已经发送的事件，类似于select()调用。  </p>
<p>&emsp;epoll对文件描述符的操作有两种模式：LT模式和ET模式。LT模式是默认模式，区别如下：<br><strong>LT模式：</strong> 当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序可以不立即处理该事件。下次调用epoll_wait时，会再次响应应用程序并通知此事件。<br><strong>ET模式：</strong> 当epoll_wait检测到描述符事件发生并将此事件通知应用程序，应用程序必须立即处理该事件。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。<br>ET模式很大程度上减少了epoll事件被重复触发的次数，因此效率比LT模式高。epoll工作在ET模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。  </p>
<p>&emsp;在select/poll中，进程只有在调用一定的方法后，内核才对所有监视的文件描述符进行扫描，而epoll()事件通过epoll_ctl()来注册一个文件描述符，一旦基于某个文件描述符就绪时，内核会采用类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait()时便得到通知。  </p>
<h3 id="epoll-的优点"><a href="#epoll-的优点" class="headerlink" title="epoll()的优点"></a>epoll()的优点</h3><p>1、监视的描述符数量不受限制，它所支持的fd上限是最大可以打开文件的数目，一般远大于2048。1GB内存机器上大约是10万左右。<br>2、I/O效率不会随着监视fd的数量的增长而下降。select,poll需要不断轮询所有fd集合，直到设备就绪，期间可能要睡眠和唤醒多次交替。而epoll也需要调用epoll_wait()不断轮询就绪链表，期间也可能多次睡眠和唤醒交替，但是epoll在设备就绪时，调用回调函数，把就绪fd放入就绪链表中，并唤醒在epoll_wait()中睡眠的进程。虽然都要睡眠和交替，但是select和poll在“醒着”的时候要遍历整个fd集合，而epoll在“醒着”的时候只要判断一下就绪链表是否为空就行了，这节约了大量的CPU时间。<br>3、select,poll每次调用都要把fd集合从用户态复制到内核态，而epoll只要拷贝一次，这节省了很大的开销。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;I-O复用简述&quot;&gt;&lt;a href=&quot;#I-O复用简述&quot; class=&quot;headerlink&quot; title=&quot;I/O复用简述&quot;&gt;&lt;/a&gt;I/O复用简述&lt;/h2&gt;&lt;p&gt;&amp;emsp;I/O多路复用技术是为了解决进程或线程阻塞到某个I/O系统调用而出现的技术，使进程不阻塞
    
    </summary>
    
      <category term="操作系统" scheme="http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>linux的五种I/O模型</title>
    <link href="http://yoursite.com/2017/10/27/Linux%E7%9A%84%E4%BA%94%E7%A7%8DIO%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2017/10/27/Linux的五种IO模型/</id>
    <published>2017-10-27T12:36:00.000Z</published>
    <updated>2018-04-09T01:06:17.618Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux的五种I-O模型："><a href="#linux的五种I-O模型：" class="headerlink" title="linux的五种I/O模型："></a>linux的五种I/O模型：</h2><p>1、阻塞I/O<br>2、非阻塞I/O<br>3、I/O复用<br>4、信号驱动I/O<br>5、异步I/O<br>前面四种都是同步I/O，只有最后一种是异步I/O。  </p>
<h3 id="阻塞I-O模型"><a href="#阻塞I-O模型" class="headerlink" title="阻塞I/O模型"></a>阻塞I/O模型</h3><p><strong>进程会一直阻塞，直到数据拷贝完成。</strong> 应用程序调用一个IO函数，导致应用程序阻塞，等待数据准备好，一直等待… 数据准备好了，从内核空间拷贝到用户空间，IO函数返回成功提示。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E9%98%BB%E5%A1%9EIO.png" alt="image">  </p>
<h3 id="非阻塞I-O模型"><a href="#非阻塞I-O模型" class="headerlink" title="非阻塞I/O模型"></a>非阻塞I/O模型</h3><p>通过进程反复调用IO函数（多次系统调用，并马上返回），在数据拷贝的过程中，进程是阻塞的。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E9%9D%9E%E9%98%BB%E5%A1%9Eio.jpg" alt="image">  </p>
<h3 id="I-O复用模型"><a href="#I-O复用模型" class="headerlink" title="I/O复用模型"></a>I/O复用模型</h3><p>主要是select和epoll，对一个IO端口，两次调用，两次返回。能实现同时对多个IO端口进行监听。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/io%E5%A4%8D%E7%94%A8.jpg" alt="image">  </p>
<h3 id="信号驱动I-O模型"><a href="#信号驱动I-O模型" class="headerlink" title="信号驱动I/O模型"></a>信号驱动I/O模型</h3><p>也是两次调用，两次返回。首先允许套接口进行信号驱动IO，并安装一个信号处理函数，进程继续运行并不阻塞。当数据准备好时，进程会收到一个SIGIO信号，可以在信号处理函数中调用I/O操作函数处理数据。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E4%BF%A1%E5%8F%B7%E9%A9%B1%E5%8A%A8io.jpg" alt="image">  </p>
<h3 id="异步I-O模型"><a href="#异步I-O模型" class="headerlink" title="异步I/O模型"></a>异步I/O模型</h3><p><strong>数据拷贝的时候进程无需阻塞</strong>。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者的输入输出操作。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%BC%82%E6%AD%A5io.jpg" alt="image">  </p>
<h2 id="五种I-O模型的比较"><a href="#五种I-O模型的比较" class="headerlink" title="五种I/O模型的比较"></a>五种I/O模型的比较</h2><p><img src="http://osrmzp0jr.bkt.clouddn.com/io%E6%A8%A1%E5%9E%8B%E6%AF%94%E8%BE%83.jpg" alt="image">  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;linux的五种I-O模型：&quot;&gt;&lt;a href=&quot;#linux的五种I-O模型：&quot; class=&quot;headerlink&quot; title=&quot;linux的五种I/O模型：&quot;&gt;&lt;/a&gt;linux的五种I/O模型：&lt;/h2&gt;&lt;p&gt;1、阻塞I/O&lt;br&gt;2、非阻塞I/O&lt;br
    
    </summary>
    
      <category term="操作系统" scheme="http://yoursite.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>AVL树的Java实现</title>
    <link href="http://yoursite.com/2017/10/23/AVL%E6%A0%91%E7%9A%84java%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2017/10/23/AVL树的java实现/</id>
    <published>2017-10-23T12:55:00.000Z</published>
    <updated>2018-04-09T01:06:17.614Z</updated>
    
    <content type="html"><![CDATA[<p>AVL树，也叫二叉平衡树，是一种二叉排序树，其中每一个节点的左子树和右子树的高度差至多等于1。  </p>
<h1 id="AVL树的Java实现"><a href="#AVL树的Java实现" class="headerlink" title="AVL树的Java实现"></a>AVL树的Java实现</h1><h2 id="1、节点"><a href="#1、节点" class="headerlink" title="1、节点"></a>1、节点</h2><h3 id="1-1节点定义"><a href="#1-1节点定义" class="headerlink" title="1.1节点定义"></a>1.1节点定义</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">AVLTree&lt;T</span> <span class="keyword">extends</span> <span class="title">Comparable&lt;T&gt;&gt;</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="type">AVLTreeNode</span>&lt;<span class="type">T</span> <span class="keyword">extends</span> <span class="type">Comparable</span>&lt;<span class="type">T</span>&gt;&gt;&#123;</div><div class="line">        <span class="type">T</span> key;                 <span class="comment">//键值</span></div><div class="line">        int height;            <span class="comment">//高度</span></div><div class="line">        <span class="type">AVLTreeNode</span>&lt;<span class="type">T</span>&gt; left;   <span class="comment">//左孩子</span></div><div class="line">        <span class="type">AVLTreeNode</span>&lt;<span class="type">T</span>&gt; right;  <span class="comment">//右孩子</span></div><div class="line">        </div><div class="line">        public <span class="type">AVLTreeNode</span>(<span class="type">T</span> key, <span class="type">AVLTreeNode</span>&lt;<span class="type">T</span>&gt; left, <span class="type">AVLTreeNode</span>&lt;<span class="type">T</span>&gt; right)&#123;</div><div class="line">            <span class="keyword">this</span>.key = key;</div><div class="line">            <span class="keyword">this</span>.left = left;</div><div class="line">            <span class="keyword">this</span>.right = right;</div><div class="line">            <span class="keyword">this</span>.height = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-2树的高度"><a href="#1-2树的高度" class="headerlink" title="1.2树的高度"></a>1.2树的高度</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取树的高度</span></div><div class="line"><span class="keyword">private</span> <span class="built_in">int</span> <span class="built_in">height</span>(AVLTreeNode&lt;T&gt; tree)&#123;</div><div class="line">    <span class="keyword">if</span>(tree != <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">return</span> tree.<span class="built_in">height</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="built_in">int</span> <span class="built_in">height</span>()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">height</span>(mRoot);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-3比较大小"><a href="#1-3比较大小" class="headerlink" title="1.3比较大小"></a>1.3比较大小</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">比较两个值的大小</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> a&gt;b ? a: b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2、旋转"><a href="#2、旋转" class="headerlink" title="2、旋转"></a>2、旋转</h2><p>如果在AVL树中进行插入或删除节点后，可能导致AVL树失去平衡。这种失去平衡可以概括为4种姿势：LL（左左），LR（左右），RR（右右），RL（右左）。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E6%97%8B%E8%BD%AC1.jpg" alt="image">  </p>
<h3 id="2-1-LL的旋转"><a href="#2-1-LL的旋转" class="headerlink" title="2.1 LL的旋转"></a>2.1 LL的旋转</h3><p><img src="http://osrmzp0jr.bkt.clouddn.com/LL.jpg" alt="image">  </p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//LL：左左对应的情况</div><div class="line">//返回值：旋转后的根节点</div><div class="line">private AVLTreeNode&lt;T&gt; leftLeftRotation(AVLTreeNode&lt;T&gt; <span class="built_in">k2</span>)&#123;</div><div class="line">    AVLTreeNode&lt;T&gt; <span class="built_in">k1</span><span class="comment">;</span></div><div class="line">    <span class="built_in">k1</span> = <span class="built_in">k2</span>.left<span class="comment">;</span></div><div class="line">    <span class="built_in">k2</span>.left = <span class="built_in">k1</span>.right<span class="comment">;</span></div><div class="line">    <span class="built_in">k1</span>.right = <span class="built_in">k2</span><span class="comment">;</span></div><div class="line">    </div><div class="line">    <span class="built_in">k2</span>.height = max(height(<span class="built_in">k2</span>.left),height(<span class="built_in">k2</span>.right)) + <span class="number">1</span><span class="comment">;</span></div><div class="line">    <span class="built_in">k1</span>.height = max(height(<span class="built_in">k1</span>.left),<span class="built_in">k2</span>.height) + <span class="number">1</span><span class="comment">;</span></div><div class="line">    </div><div class="line">    return <span class="built_in">k1</span><span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-2-RR的旋转"><a href="#2-2-RR的旋转" class="headerlink" title="2.2 RR的旋转"></a>2.2 RR的旋转</h3><p><img src="http://osrmzp0jr.bkt.clouddn.com/RR.jpg" alt="image">  </p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//RR：右右对应的情况</div><div class="line">//返回值：旋转后的根节点</div><div class="line">private AVLTreeNode&lt;T&gt; rightRightRotation(AVLTreeNode&lt;T&gt; <span class="built_in">k1</span>)&#123;</div><div class="line">    AVLTreeNode&lt;T&gt; <span class="built_in">k2</span><span class="comment">;</span></div><div class="line">    <span class="built_in">k2</span> = <span class="built_in">k1</span>.right<span class="comment">;</span></div><div class="line">    <span class="built_in">k1</span>.right = <span class="built_in">k2</span>.left<span class="comment">;</span></div><div class="line">    <span class="built_in">k2</span>.left = <span class="built_in">k1</span><span class="comment">;</span></div><div class="line">    </div><div class="line">    <span class="built_in">k1</span>.height = max(height(<span class="built_in">k1</span>.left),height(<span class="built_in">k1</span>.right)) + <span class="number">1</span><span class="comment">;</span></div><div class="line">    <span class="built_in">k2</span>.height = max(height(<span class="built_in">k2</span>.left),<span class="built_in">k1</span>.height) + <span class="number">1</span><span class="comment">;</span></div><div class="line">    </div><div class="line">    return <span class="built_in">k2</span><span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-3-LR的旋转"><a href="#2-3-LR的旋转" class="headerlink" title="2.3 LR的旋转"></a>2.3 LR的旋转</h3><p>LR失去平衡的情况，需要经过两次旋转才能让AVL树恢复平衡。<br><img src="http://osrmzp0jr.bkt.clouddn.com/LR.jpg" alt="image">  </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//LR：左右对应的情况</span></div><div class="line"><span class="comment">//返回值：旋转后的根节点</span></div><div class="line"><span class="keyword">private</span> <span class="type">AVLTreeNode</span>&lt;<span class="type">T</span>&gt; leftRightRotation(<span class="type">AVLTreeNode</span>&lt;<span class="type">T</span>&gt; k3)&#123;</div><div class="line">    k3.<span class="keyword">left</span> = rightRightRotation(k3.<span class="keyword">left</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> leftLeftRotation(k3);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-4-RL的旋转"><a href="#2-4-RL的旋转" class="headerlink" title="2.4 RL的旋转"></a>2.4 RL的旋转</h3><p><img src="http://osrmzp0jr.bkt.clouddn.com/RL.jpg" alt="image">  </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//RL：右左对应的情况</span></div><div class="line"><span class="comment">//返回值：旋转后的根节点</span></div><div class="line"><span class="keyword">private</span> <span class="type">AVLTreeNode</span>&lt;<span class="type">T</span>&gt; rightLeftRotation(<span class="type">AVLTreeNode</span>&lt;<span class="type">T</span>&gt; k1)&#123;</div><div class="line">    k1.<span class="keyword">right</span> = leftLeftRotation(k1.<span class="keyword">right</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> rightRightRotation(k1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3、插入"><a href="#3、插入" class="headerlink" title="3、插入"></a>3、插入</h2><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将结点插入到AVL树中，并返回根节点</span></div><div class="line"><span class="keyword">private</span> AVLTreeNode&lt;T&gt; insert(AVLTreeNode&lt;T&gt; tree, T <span class="built_in">key</span>)&#123;<span class="comment">//tree为根节点，key为待插入的值</span></div><div class="line">    <span class="keyword">if</span>(tree == <span class="keyword">null</span>)&#123;</div><div class="line">        <span class="comment">//新建节点</span></div><div class="line">        tree = <span class="keyword">new</span> AVLTreeNode&lt;T&gt;(<span class="built_in">key</span>,<span class="keyword">null</span>,<span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span>(tree==<span class="keyword">null</span>)&#123;</div><div class="line">            System.out.<span class="built_in">println</span>(<span class="string">"创建节点失败！"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">int</span> cmp = <span class="built_in">key</span>.compareTo(tree.<span class="built_in">key</span>);</div><div class="line">        </div><div class="line">        <span class="comment">//将key插入到Tree的左子树</span></div><div class="line">        <span class="keyword">if</span>(cmp &lt; <span class="number">0</span>)&#123;</div><div class="line">            tree.left = insert(tree.left, <span class="built_in">key</span>);</div><div class="line">            <span class="comment">//插入节点后，若AVL树失去平衡，做相应的调节</span></div><div class="line">            <span class="keyword">if</span>(<span class="built_in">height</span>(tree.left) - <span class="built_in">height</span>(tree.right) == <span class="number">2</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">key</span>.compareTo(tree.left.<span class="built_in">key</span>) &lt; <span class="number">0</span>)</div><div class="line">                    tree = leftLeftRotation(tree);</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    tree = leftRightRotation(tree);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//将key插入到Tree的右子树</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cmp &gt; <span class="number">0</span>)&#123;</div><div class="line">            tree.right = insert(tree.right, <span class="built_in">key</span>);</div><div class="line">            <span class="comment">//插入节点后，若AVL树失去平衡，做相应的调节</span></div><div class="line">            <span class="keyword">if</span>(<span class="built_in">height</span>(tree.right) - <span class="built_in">height</span>(tree.left== <span class="number">2</span>)&#123;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">key</span>.compareTo(tree.left.<span class="built_in">key</span>) &gt; <span class="number">0</span>)</div><div class="line">                    tree = rightRightRotation(tree);</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    tree = rightLeftRotation(tree);</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            System.out.<span class="built_in">println</span>(<span class="string">"添加节点失败！"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    tree.<span class="built_in">height</span> = <span class="built_in">max</span>(<span class="built_in">height</span>(tree.left), <span class="built_in">height</span>(tree.right)) + <span class="number">1</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> tree;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4、删除"><a href="#4、删除" class="headerlink" title="4、删除"></a>4、删除</h2><figure class="highlight xl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">private AVLTreeNode&lt;T&gt; remove(AVLTreeNode&lt;T&gt; <span class="keyword">tree</span>, AVLTreeNode&lt;T&gt; z) &#123;<span class="comment">//tree为根节点，z为待删除节点</span></div><div class="line">    <span class="comment">// 根为空 或者 没有要删除的节点，直接返回null。</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">tree</span>==null || z==null)</div><div class="line">        return null;</div><div class="line"></div><div class="line">    int cmp = z.key.compareTo(<span class="keyword">tree</span>.key);</div><div class="line">    <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123;        <span class="comment">// 待删除的节点在"tree的左子树"中</span></div><div class="line">        <span class="keyword">tree</span>.left = remove(<span class="keyword">tree</span>.left, z);</div><div class="line">        <span class="comment">// 删除节点后，若AVL树失去平衡，则进行相应的调节。</span></div><div class="line">        <span class="keyword">if</span> (height(<span class="keyword">tree</span>.right) - height(<span class="keyword">tree</span>.left) == <span class="number">2</span>) &#123;</div><div class="line">            AVLTreeNode&lt;T&gt; r =  <span class="keyword">tree</span>.right;</div><div class="line">            <span class="keyword">if</span> (height(r.left) &gt; height(r.right))</div><div class="line">                <span class="keyword">tree</span> = rightLeftRotation(<span class="keyword">tree</span>);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">tree</span> = rightRightRotation(<span class="keyword">tree</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) &#123;    <span class="comment">// 待删除的节点在"tree的右子树"中</span></div><div class="line">        <span class="keyword">tree</span>.right = remove(<span class="keyword">tree</span>.right, z);</div><div class="line">        <span class="comment">// 删除节点后，若AVL树失去平衡，则进行相应的调节。</span></div><div class="line">        <span class="keyword">if</span> (height(<span class="keyword">tree</span>.left) - height(<span class="keyword">tree</span>.right) == <span class="number">2</span>) &#123;</div><div class="line">            AVLTreeNode&lt;T&gt; l =  <span class="keyword">tree</span>.left;</div><div class="line">            <span class="keyword">if</span> (height(l.right) &gt; height(l.left))</div><div class="line">                <span class="keyword">tree</span> = leftRightRotation(<span class="keyword">tree</span>);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">tree</span> = leftLeftRotation(<span class="keyword">tree</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;    <span class="comment">// tree是对应要删除的节点。</span></div><div class="line">        <span class="comment">// tree的左右孩子都非空</span></div><div class="line">        <span class="keyword">if</span> ((<span class="keyword">tree</span>.left!=null) &amp;&amp; (<span class="keyword">tree</span>.right!=null)) &#123;</div><div class="line">            <span class="keyword">if</span> (height(<span class="keyword">tree</span>.left) &gt; height(<span class="keyword">tree</span>.right)) &#123;</div><div class="line">                <span class="comment">// 如果tree的左子树比右子树高；</span></div><div class="line">                <span class="comment">// 则(01)找出tree的左子树中的最大节点</span></div><div class="line">                <span class="comment">//   (02)将该最大节点的值赋值给tree。</span></div><div class="line">                <span class="comment">//   (03)删除该最大节点。</span></div><div class="line">                <span class="comment">// 这类似于用"tree的左子树中最大节点"做"tree"的替身；</span></div><div class="line">                <span class="comment">// 采用这种方式的好处是：删除"tree的左子树中最大节点"之后，AVL树仍然是平衡的。</span></div><div class="line">                AVLTreeNode&lt;T&gt; max = maximum(<span class="keyword">tree</span>.left);</div><div class="line">                <span class="keyword">tree</span>.key = max.key;</div><div class="line">                <span class="keyword">tree</span>.left = remove(<span class="keyword">tree</span>.left, max);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 如果tree的左子树不比右子树高(即它们相等，或右子树比左子树高1)</span></div><div class="line">                <span class="comment">// 则(01)找出tree的右子树中的最小节点</span></div><div class="line">                <span class="comment">//   (02)将该最小节点的值赋值给tree。</span></div><div class="line">                <span class="comment">//   (03)删除该最小节点。</span></div><div class="line">                <span class="comment">// 这类似于用"tree的右子树中最小节点"做"tree"的替身；</span></div><div class="line">                <span class="comment">// 采用这种方式的好处是：删除"tree的右子树中最小节点"之后，AVL树仍然是平衡的。</span></div><div class="line">                AVLTreeNode&lt;T&gt; min = minimum(<span class="keyword">tree</span>.right);</div><div class="line">                <span class="keyword">tree</span>.key = min.key;</div><div class="line">                <span class="keyword">tree</span>.right = remove(<span class="keyword">tree</span>.right, min);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            AVLTreeNode&lt;T&gt; tmp = <span class="keyword">tree</span>;</div><div class="line">            <span class="keyword">tree</span> = (<span class="keyword">tree</span>.left!=null) ? <span class="keyword">tree</span>.left : <span class="keyword">tree</span>.right;</div><div class="line">            tmp = null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return <span class="keyword">tree</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AVL树，也叫二叉平衡树，是一种二叉排序树，其中每一个节点的左子树和右子树的高度差至多等于1。  &lt;/p&gt;
&lt;h1 id=&quot;AVL树的Java实现&quot;&gt;&lt;a href=&quot;#AVL树的Java实现&quot; class=&quot;headerlink&quot; title=&quot;AVL树的Java实现&quot;&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Java中的BIO、NIO、AIO</title>
    <link href="http://yoursite.com/2017/10/16/Java%E4%B8%AD%E7%9A%84BIO%E3%80%81NIO%E3%80%81AIO/"/>
    <id>http://yoursite.com/2017/10/16/Java中的BIO、NIO、AIO/</id>
    <published>2017-10-16T08:14:00.000Z</published>
    <updated>2018-04-09T01:06:17.616Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><p>同步和异步关注的是消息通信机制。<br>同步：指在发出一个调用时，在没有得到结果之前，该调用就不返回。一旦返回，说明已经得到返回值了。也就是由调用者主动等待这个调用的结果。<br>异步：指在调用发出之后，这个调用就直接返回了，所以没有返回结果。就是说异步过程调用发出后，调用者不会立刻得到结果，而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。  </p>
<h2 id="阻塞和非阻塞"><a href="#阻塞和非阻塞" class="headerlink" title="阻塞和非阻塞"></a>阻塞和非阻塞</h2><p>阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态。<br>阻塞：阻塞调用指的是调用结果返回之前，当前线程会被挂起，调用线程只有在得到结果之后才会返回。<br>非阻塞：非阻塞调用指的是不能立刻得到结果之前，该调用不会阻塞当前线程。<br>在处理IO的时候，阻塞和非阻塞都是同步IO。除了特殊的API（AIO），为异步IO。  </p>
<p>对unix来讲：阻塞式IO，非阻塞式IO，IO复用（select/poll/epoll）都属于同步IO，因为它们在数据由内核空间复制回进程缓冲区时都是阻塞的（不能做其他事），分为两阶段：<br>1、数据准备完成<br>2、数据由内核空间复制回进程缓冲区  </p>
<h2 id="同步IO和异步IO"><a href="#同步IO和异步IO" class="headerlink" title="同步IO和异步IO"></a>同步IO和异步IO</h2><p><strong>同步IO</strong>：当用户发出IO请求操作后，如果数据没有就绪，需要通过用户线程或者内核不断去轮询数据是否就绪，当数据就绪时，再将数据从内核拷贝到用户线程。<br><strong>异步IO</strong>：只有IO请求操作的发出是用户线程来执行的，IO操作的两个阶段都是由内核自动完成，不需要不断去轮询，会发送通知告知用户线程IO操作已经完成。不会对用户线程产生阻塞。  </p>
<h2 id="阻塞IO和非阻塞IO"><a href="#阻塞IO和非阻塞IO" class="headerlink" title="阻塞IO和非阻塞IO"></a>阻塞IO和非阻塞IO</h2><p>阻塞IO和非阻塞IO是反映在当用户请求IO操作时，如果数据没有就绪，是用户线程一直等待数据就绪，还是会收到一个标志信息上。  </p>
<h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>老张爱喝茶，他要煮开水。<br>出场任务：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。<br>1、老张把水壶放到火上，立等水开。（同步阻塞）<br>老张觉得自己有点傻<br>2、老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开了没有。（同步非阻塞）<br>老张还是觉得自己有点傻，于是买了把会响笛的水壶。水开之后，能发出声音提醒水开了。<br>3、老张把响水壶放到火上，立等水开。（异步阻塞）<br>老张觉得这样傻等意义不大<br>4、老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）<br>老张觉得自己聪明了<br>&emsp;所谓同步异步，只是针对水壶而言。普通水壶，同步；响水壶，异步。虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。同步只能让调用者去轮询自己，造成老张效率的低下。<br>&emsp;所谓阻塞非阻塞，仅仅对于老张而言。立等的老张，阻塞；看电视的老张，非阻塞。情况1和3中老张是阻塞的，虽然3中响水壶是异步的，但对于立等的老张没有太大的意义。所以一般异步都是配合非阻塞使用的，这样才能发挥异步的效用。  </p>
<h2 id="I-O模型"><a href="#I-O模型" class="headerlink" title="I/O模型"></a>I/O模型</h2><p>可分为同步阻塞，同步非阻塞，异步阻塞，异步非阻塞IO。<br><strong>同步阻塞IO</strong>：在这种方式下，用户进程在发起一个IO操作后，必须等待IO操作的完成，只有当真正完成了IO操作以后，用户线程才能运行。<br><strong>同步非阻塞IO</strong>：这种方式下，用户进程在发起一个IO操作后可返回做其它事情，但是用户进程需要时不时的询问IO操作是否就绪，就要求用户进程不停的去询问，从而引入不惜要的CPU资源浪费。JAVA中NIO就属于同步非阻塞IO。<br><strong>异步阻塞IO</strong>：这种方式下，应用发起一个IO操作后，不等待内核IO操作的完成，等内核完成IO操作后会通知应用程序。<br><strong>异步非阻塞IO</strong>：这种方式下，用户进程只需要发起一个IO操作然后立即返回，等IO操作真正完成后，应用程序会得到IO操作完成的通知，此时用户进程只需要对数据进行处理就好了，不需要进行实际的IO读写操作，因为真正的IO读取和写入操作已经由内核完成了。  </p>
<h2 id="JAVA对BIO、NIO、AIO支持"><a href="#JAVA对BIO、NIO、AIO支持" class="headerlink" title="JAVA对BIO、NIO、AIO支持"></a>JAVA对BIO、NIO、AIO支持</h2><p><strong>BIO</strong>：同步阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。<br><strong>NIO</strong>：同步非阻塞，服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。<br><strong>AIO</strong>：异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处理。  </p>
<h2 id="JAVA中BIO、NIO、AIO的适用场景"><a href="#JAVA中BIO、NIO、AIO的适用场景" class="headerlink" title="JAVA中BIO、NIO、AIO的适用场景"></a>JAVA中BIO、NIO、AIO的适用场景</h2><p>BIO：适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，jdk1.4前唯一的选择，但程序直观简单易理解。<br>NIO：适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，编程比较复杂，jdk1.4开始支持。<br>AIO：适用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，jdk1.7开始支持。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;同步和异步&quot;&gt;&lt;a href=&quot;#同步和异步&quot; class=&quot;headerlink&quot; title=&quot;同步和异步&quot;&gt;&lt;/a&gt;同步和异步&lt;/h2&gt;&lt;p&gt;同步和异步关注的是消息通信机制。&lt;br&gt;同步：指在发出一个调用时，在没有得到结果之前，该调用就不返回。一旦返回，说明
    
    </summary>
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>常用排序算法总结</title>
    <link href="http://yoursite.com/2017/10/13/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/10/13/常用排序算法总结/</id>
    <published>2017-10-13T13:07:00.000Z</published>
    <updated>2018-04-09T01:06:17.620Z</updated>
    
    <content type="html"><![CDATA[<h3 id="各比较排序性能比较"><a href="#各比较排序性能比较" class="headerlink" title="各比较排序性能比较"></a>各比较排序性能比较</h3><p><img src="http://osrmzp0jr.bkt.clouddn.com/%E6%AF%94%E8%BE%83%E6%8E%92%E5%BA%8F%E6%80%A7%E8%83%BD.jpg" alt="image">  </p>
<h3 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h3><p>1、比较相邻的元素，如果前一个比后一个大，就把他们两个调换位置。<br>2、对每一对相邻的元素作同样的工作，从开始一对到最后一对，完成后，最后的元素会是最大的数。<br>3、针对所有元素重复上面的步骤，除了最后一个元素。<br>4、对剩下越来越少的元素重复上面的步骤。<br><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif" alt="image"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">分类-------------------内部比较排序</div><div class="line">数据结构---------------数组</div><div class="line">最差时间复杂度---------O(n^<span class="number">2</span>)</div><div class="line">最优时间复杂度---------加了isSorted标记，在第一趟运行时，发现无需进行下一趟比较，可把时间复杂度降为O(n)</div><div class="line">平均时间复杂度---------O(n^<span class="number">2</span>)</div><div class="line">所需辅助空间-----------O(<span class="number">1</span>)</div><div class="line">稳定性-----------------稳定</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>; i++)&#123;<span class="comment">//比较趟数</span></div><div class="line">            <span class="keyword">boolean</span> isSorted = <span class="keyword">true</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr.length-<span class="number">1</span>-i; j++)&#123;<span class="comment">//当前趟需要的比较次数</span></div><div class="line">                <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;<span class="comment">//将最大元素浮到数组最后</span></div><div class="line">                    isSorted = <span class="keyword">false</span>;</div><div class="line">                    swap(arr,j,j+<span class="number">1</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(isSorted)&#123;<span class="comment">//当前趟比较完后，发现没有元素需要交换位置，表示数组已有序，不必进行下一趟。</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;<span class="comment">//元素交换位置（通用）</span></div><div class="line">        <span class="keyword">int</span> temp=arr[i];</div><div class="line">        arr[i]=arr[j];</div><div class="line">        arr[j]=temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2、鸡尾酒排序"><a href="#2、鸡尾酒排序" class="headerlink" title="2、鸡尾酒排序"></a>2、鸡尾酒排序</h3><p>也叫定向冒泡排序，是冒泡排序的一种改进。与冒泡排序不同在于先从低到高将最大元素放到后面然后再从高到底将最小元素放到前面。<br><img src="http://osrmzp0jr.bkt.clouddn.com/%E9%B8%A1%E5%B0%BE%E9%85%92%E6%8E%92%E5%BA%8F.gif" alt="image"><br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">分类-------------------内部比较排序</div><div class="line">数据结构---------------数组</div><div class="line">最差时间复杂度---------O(<span class="built_in">n</span>^<span class="number">2</span>)</div><div class="line">最优时间复杂度---------如果数组一开始大部分已经排序过的话，接近O(<span class="built_in">n</span>)</div><div class="line">平均时间复杂度---------O(<span class="built_in">n</span>^<span class="number">2</span>)</div><div class="line">所需辅助空间-----------O(<span class="number">1</span>)</div><div class="line">稳定性-----------------稳定</div><div class="line"></div><div class="line">void CocktailSort(<span class="built_in">int</span>[] A, <span class="built_in">int</span> <span class="built_in">n</span>)&#123;</div><div class="line">    <span class="built_in">int</span> <span class="built_in">left</span>=<span class="number">0</span>;//初始化边界</div><div class="line">    <span class="built_in">int</span> <span class="built_in">right</span>=<span class="built_in">n</span>-<span class="number">1</span>;</div><div class="line">    while(<span class="built_in">left</span> &lt; <span class="built_in">right</span>)&#123;</div><div class="line">    </div><div class="line">        for(<span class="built_in">int</span> i=<span class="built_in">left</span>; i&lt;<span class="built_in">right</span>; i++)&#123;//从左往右，将最大元素放到数组最后</div><div class="line">            <span class="built_in">if</span>(A[i]&gt;A[i+<span class="number">1</span>])</div><div class="line">                swap(A, i, i+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">right</span>--;</div><div class="line">        </div><div class="line">        for(<span class="built_in">int</span> i=<span class="built_in">right</span>; i&gt;<span class="built_in">left</span>; i--)&#123;//从右往左，将最小元素放到数组最前</div><div class="line">            <span class="built_in">if</span>(A[i]&lt;A[i-<span class="number">1</span>])</div><div class="line">                swap(A, i ,i-<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">left</span>++;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3、选择排序"><a href="#3、选择排序" class="headerlink" title="3、选择排序"></a>3、选择排序</h3><p>选择排序，第一次遍历找到最小（大）元素，放到序列的起始位置，之后每次遍历继续寻找最小（大）元素，放到已排序序列的后面，直到所有元素都排序完毕。<br>选择排序和冒泡排序的区别：冒泡排序一次交换相邻两个顺序不合法的元素位置，从而将最小（大）元素放到合适的位置；而选择排序没遍历一次都记住当前最小（大）元素的位置，最后仅需一次交换操作就可以放到合适的位置。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif" alt="image"><br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">分类-------------------内部比较排序</div><div class="line">数据结构---------------数组</div><div class="line">最差时间复杂度---------O(n^<span class="number">2</span>)</div><div class="line">最优时间复杂度---------O(n^<span class="number">2</span>)</div><div class="line">平均时间复杂度---------O(n^<span class="number">2</span>)</div><div class="line">所需辅助空间-----------O(<span class="number">1</span>)</div><div class="line">稳定性-----------------不稳定</div><div class="line"></div><div class="line"><span class="keyword">void</span> SelectionSort(<span class="keyword">int</span>[] A, <span class="keyword">int</span> n)&#123;</div><div class="line">    <span class="built_in">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++)&#123;<span class="comment">//i为已排序序列的末尾</span></div><div class="line">        <span class="keyword">int</span> <span class="built_in">min</span>=i;</div><div class="line">        <span class="built_in">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;n; j++)&#123;<span class="comment">//未排序序列</span></div><div class="line">            <span class="built_in">if</span>(A[j]&lt;A[<span class="built_in">min</span>])<span class="comment">//找出未排序序列的最小值</span></div><div class="line">                <span class="built_in">min</span>=j;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">if</span>(<span class="built_in">min</span> != i)&#123;</div><div class="line">            swap(A,<span class="built_in">min</span>,i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="4、插入排序"><a href="#4、插入排序" class="headerlink" title="4、插入排序"></a>4、插入排序</h3><p>1、从第一个元素开始，该元素可以认定为已被排序<br>2、取出下一个元素，在已排序的序列中从后向前扫描<br>3、如果扫描到的数比新元素大，则将扫描到的数移到下一位置<br>4、重复步骤3，直到找到扫描的数小于等于新元素，则将新元素插到该元素后面<br>5、重复步骤2~4<br><img src="http://osrmzp0jr.bkt.clouddn.com/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F1.gif" alt="image">  </p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">分类-------------------内部比较排序</div><div class="line">数据结构---------------数组</div><div class="line">最差时间复杂度---------输入序列是降序排列，O(n^<span class="number">2</span>)</div><div class="line">最优时间复杂度---------输入序列是升序排列，O(n)</div><div class="line">平均时间复杂度---------O(n^<span class="number">2</span>)</div><div class="line">所需辅助空间-----------O(<span class="number">1</span>)</div><div class="line">稳定性-----------------稳定</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertionSort</span>(<span class="params"><span class="keyword">int</span>[] A, <span class="keyword">int</span> n</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n ;i++)&#123;<span class="comment">//类似抓扑克牌</span></div><div class="line">        <span class="keyword">int</span> <span class="keyword">get</span> = A[i];<span class="comment">//右手抓到的扑克牌</span></div><div class="line">        <span class="keyword">int</span> j=i<span class="number">-1</span>;<span class="comment">//左手上的牌总是排好序的</span></div><div class="line">        <span class="keyword">while</span>(<span class="keyword">get</span>&lt;A[j] &amp;&amp; j&gt;=<span class="number">0</span>)&#123;<span class="comment">//将抓到的牌和手牌从右向左进行比较，若手牌比抓到的牌大，就将其右移 </span></div><div class="line">            A[j+<span class="number">1</span>]=A[j];</div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">        A[j+<span class="number">1</span>]=<span class="keyword">get</span>;<span class="comment">//若手牌比抓到的牌小，就将抓到的牌插到该手牌右边</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5、插入排序的改进：二分插入排序"><a href="#5、插入排序的改进：二分插入排序" class="headerlink" title="5、插入排序的改进：二分插入排序"></a>5、插入排序的改进：二分插入排序</h3><p>对于插入排序，如果比较操作的代价比交换操作大的话，可以采用二分查找法来减少比较操作的次数。<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">分类-------------------内部比较排序</div><div class="line">数据结构---------------数组</div><div class="line">最差时间复杂度---------输入序列是降序排列，O(nlogn)</div><div class="line">最优时间复杂度---------输入序列是升序排列，O(<span class="built_in">n</span>)</div><div class="line">平均时间复杂度---------O(<span class="built_in">n</span>^<span class="number">2</span>)</div><div class="line">所需辅助空间-----------O(<span class="number">1</span>)</div><div class="line">稳定性-----------------稳定</div><div class="line"></div><div class="line">void InsertionSortDichotomy(<span class="built_in">int</span>[] A,<span class="built_in">int</span> <span class="built_in">n</span>)&#123;</div><div class="line">    for(<span class="built_in">int</span> i=<span class="number">1</span>; i&lt;<span class="built_in">n</span>; i++)&#123;</div><div class="line">        <span class="built_in">int</span> get=A[i];//抓到的牌</div><div class="line">        <span class="built_in">int</span> <span class="built_in">left</span>=<span class="number">0</span>;//<span class="built_in">left</span>,<span class="built_in">right</span>是手牌的边界，手牌是已排序好的</div><div class="line">        <span class="built_in">int</span> <span class="built_in">right</span>=i-<span class="number">1</span>;</div><div class="line">        while(<span class="built_in">left</span>&lt;=<span class="built_in">right</span>)&#123;</div><div class="line">            <span class="built_in">int</span> <span class="built_in">mid</span>=(<span class="built_in">left</span>+<span class="built_in">right</span>)/<span class="number">2</span>;//二分查找，定位新牌的位置</div><div class="line">            <span class="built_in">if</span>(A[<span class="built_in">mid</span>]&gt;get)</div><div class="line">                <span class="built_in">right</span>=<span class="built_in">mid</span>-<span class="number">1</span>;</div><div class="line">            else</div><div class="line">                <span class="built_in">left</span>=<span class="built_in">mid</span>+<span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        for(<span class="built_in">int</span> j=i-<span class="number">1</span>; j&gt;=<span class="built_in">left</span>; j--)&#123;//将欲插入新牌位置后边的牌向后移一位</div><div class="line">            A[j+<span class="number">1</span>]=A[j];</div><div class="line">        &#125;</div><div class="line">        A[<span class="built_in">left</span>]=get;//将抓到的牌插入手牌</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="6、插入排序的更高效改进：希尔排序"><a href="#6、插入排序的更高效改进：希尔排序" class="headerlink" title="6、插入排序的更高效改进：希尔排序"></a>6、插入排序的更高效改进：希尔排序</h3><p>又叫递减增量排序，是不稳定的排序算法。<br>希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素一次性地朝最终位置前进一大步。然后算法再取越来越小的补偿进行排序，算法的最后一步就是普通的插入排序，但到这一步，需排序的数据几乎是已排好的了（此时插入排序较快）。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.gif" alt="image"><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">分类-------------------内部比较排序</div><div class="line">数据结构---------------数组</div><div class="line">最差时间复杂度---------O(n^<span class="number">2</span>)</div><div class="line">最优时间复杂度---------O(n^<span class="number">1.3</span>)</div><div class="line">平均时间复杂度---------O(nlogn)~O(n^w)</div><div class="line">所需辅助空间-----------O(<span class="number">1</span>)</div><div class="line">稳定性-----------------不稳定</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span>(<span class="params"><span class="keyword">int</span> A[], <span class="keyword">int</span> n</span>)</span>&#123;</div><div class="line">    <span class="keyword">int</span> h=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(h&lt;=n)&#123;</div><div class="line">        h = <span class="number">3</span> * h + <span class="number">1</span>;<span class="comment">//生成初始增量</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(h&gt;=<span class="number">1</span>)&#123;</div><div class="line">    <span class="comment">//i和j相距距离为h，j在i左侧，A[j]和A[i]比较大小，大的向后移，之后j=j-h按步长向前退</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=h; i&lt;n; i++)&#123;</div><div class="line">            <span class="keyword">int</span> j = i-h;</div><div class="line">            <span class="keyword">int</span> <span class="keyword">get</span> = A[i];</div><div class="line">            <span class="keyword">while</span>(j&gt;=<span class="number">0</span> &amp;&amp; A[j]&gt;<span class="keyword">get</span>)&#123;</div><div class="line">                A[j+h] = A[j];</div><div class="line">                j = j-h;</div><div class="line">            &#125;</div><div class="line">            A[j+h] = <span class="keyword">get</span>;</div><div class="line">        &#125;</div><div class="line">        h=(h<span class="number">-1</span>)/<span class="number">3</span>;<span class="comment">//递减增量</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="7、归并排序"><a href="#7、归并排序" class="headerlink" title="7、归并排序"></a>7、归并排序</h3><p>归并操作如下：<br>1、申请空间，使其大小为两个已经排序的序列之和，该序列用来存放合并后的序列<br>2、设定两个指针，最初位置分别为两个已经排序序列的起始位置<br>3、比较两个指针所指向的元素，选择较小的元素放入到合并空间，并移动指针到下一位置<br>4、重复步骤3直到某一指针达到序列末尾<br>5、将另一序列所剩下的所有元素直接复制到合并序列尾部  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.gif" alt="image"><br><figure class="highlight excel"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">分类-------------------内部比较排序</div><div class="line">数据结构---------------数组</div><div class="line">最差时间复杂度---------O(nlogn)</div><div class="line">最优时间复杂度---------O(nlogn)</div><div class="line">平均时间复杂度---------O(nlogn)</div><div class="line">所需辅助空间-----------O(<span class="built_in">n</span>)</div><div class="line">稳定性-----------------稳定</div><div class="line"></div><div class="line"></div><div class="line">//合并两个已排好序的数组A[left...mid]和A[<span class="built_in">mid</span>+<span class="number">1</span>...<span class="built_in">right</span>]</div><div class="line">void Merge(<span class="built_in">int</span>[] A, <span class="built_in">int</span> <span class="built_in">left</span>, <span class="built_in">int</span> <span class="built_in">mid</span>, <span class="built_in">int</span> <span class="built_in">right</span>)&#123;</div><div class="line">    <span class="built_in">int</span> <span class="built_in">len</span> = <span class="built_in">right</span>-<span class="built_in">left</span>+<span class="number">1</span>;</div><div class="line">    <span class="built_in">int</span>[] temp = new <span class="built_in">int</span>[<span class="built_in">len</span>];//辅助空间O(<span class="built_in">n</span>)</div><div class="line">    <span class="built_in">int</span> <span class="built_in">index</span>=<span class="number">0</span>;</div><div class="line">    <span class="built_in">int</span> i=<span class="built_in">left</span>;//i,j为两数组的起始位置</div><div class="line">    <span class="built_in">int</span> j=<span class="built_in">mid</span>+<span class="number">1</span>;</div><div class="line">    while(i&lt;=<span class="built_in">mid</span> &amp;&amp; j&lt;=<span class="built_in">right</span>)&#123;</div><div class="line">        temp[<span class="built_in">index</span>++] = A[i]&lt;=A[j] ? A[i++] <span class="symbol">:</span> A[j++];//选择较小元素放入合并空间，并更新指针</div><div class="line">    &#125;</div><div class="line">    while(i&lt;=<span class="built_in">mid</span>)</div><div class="line">        temp[<span class="built_in">index</span>++]=A[i++];</div><div class="line">    while(j&lt;=<span class="built_in">right</span>)</div><div class="line">        temp[<span class="built_in">index</span>++]=A[j++];</div><div class="line">    for(<span class="built_in">int</span> k=<span class="number">0</span>; k&lt;<span class="built_in">len</span>; k++)//将辅助序列复制回原数组</div><div class="line">        A[<span class="built_in">left</span>++]=temp[k];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//递归实现的归并排序（自顶向下）</div><div class="line">void MergeSortRecursion(<span class="built_in">int</span>[] A,<span class="built_in">int</span> <span class="built_in">left</span>, <span class="built_in">int</span> <span class="built_in">right</span>)&#123;</div><div class="line">    <span class="built_in">if</span>(<span class="built_in">left</span>==<span class="built_in">right</span>)//当序列长度为<span class="number">1</span>时，递归开始回溯，进行merge操作</div><div class="line">        return;</div><div class="line">    <span class="built_in">int</span> <span class="built_in">mid</span>=(<span class="built_in">left</span>+<span class="built_in">right</span>)/<span class="number">2</span>;</div><div class="line">    MergeSortRecursion(A,<span class="built_in">left</span>,<span class="built_in">mid</span>);</div><div class="line">    MergeSortRecursion(A,<span class="built_in">mid</span>+<span class="number">1</span>,<span class="built_in">right</span>);</div><div class="line">    Merge(A,<span class="built_in">left</span>,<span class="built_in">mid</span>,<span class="built_in">right</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//非递归（迭代）实现的归并排序（自底向上）</div><div class="line">void MergeSortInteration(<span class="built_in">int</span>[] A, <span class="built_in">int</span> <span class="built_in">len</span>)&#123;</div><div class="line">    <span class="built_in">int</span> <span class="built_in">left</span>,<span class="built_in">mid</span>,<span class="built_in">right</span>;//子数组索引，A[left...mid]和A[<span class="built_in">mid</span>+<span class="number">1</span>...<span class="built_in">right</span>]</div><div class="line">    for(<span class="built_in">int</span> i=<span class="number">1</span>; i&lt;<span class="built_in">len</span>; i*=<span class="number">2</span>)&#123;//子数组大小i初始化为<span class="number">1</span>，每轮翻倍</div><div class="line">        <span class="built_in">left</span>=<span class="number">0</span>;</div><div class="line">        while(<span class="built_in">left</span>+i &lt; <span class="built_in">len</span>)&#123;//后一个数组存在（需要归并）</div><div class="line">            <span class="built_in">mid</span>=<span class="built_in">left</span>+i-<span class="number">1</span>;</div><div class="line">            <span class="built_in">right</span> = <span class="built_in">mid</span>+i&lt;<span class="built_in">len</span> ? <span class="built_in">mid</span>+i <span class="symbol">:</span> <span class="built_in">len</span>-<span class="number">1</span>;//后一个子数组大小可能不够</div><div class="line">            Merge(A,<span class="built_in">left</span>,<span class="built_in">mid</span>,<span class="built_in">right</span>);</div><div class="line">            <span class="built_in">left</span>=<span class="built_in">right</span>+<span class="number">1</span>;//前一个子数组索引向后移动</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="8、堆排序"><a href="#8、堆排序" class="headerlink" title="8、堆排序"></a>8、堆排序</h3><p>堆是一种近乎完全二叉树的结构，最大堆满足父结点的值总是大于它的孩子节点。<br>1、由输入的无序数组构造一个最大堆<br>2、把堆顶元素（最大值）和队尾元素互换<br>3、将堆的尺寸缩小1，从新的堆顶元素开始堆调整<br>4、重复步骤2~3，直到堆的尺寸为1<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">分类-------------------内部比较排序</div><div class="line">数据结构---------------数组</div><div class="line">最差时间复杂度---------O(nlogn)</div><div class="line">最优时间复杂度---------O(nlogn)</div><div class="line">平均时间复杂度---------O(nlogn)</div><div class="line">所需辅助空间-----------O(<span class="number">1</span>)</div><div class="line">稳定性-----------------不稳定</div><div class="line"></div><div class="line"><span class="keyword">void</span> HeapSort(<span class="keyword">int</span>[] A, <span class="keyword">int</span> n)&#123;</div><div class="line">    <span class="keyword">int</span> heap_size = BuildHeap(A, n);<span class="comment">//建立一个最大堆</span></div><div class="line">    <span class="built_in">while</span>(heap_size&gt;<span class="number">1</span>)&#123;<span class="comment">//堆元素个数大于1，未完成排序</span></div><div class="line">        swap(A,<span class="number">0</span>,--heap_size);<span class="comment">//将堆顶元素和堆的最后一个元素互换，并从堆中去除最后一个元素</span></div><div class="line">        Heapify(A,<span class="number">0</span>,heap_size);<span class="comment">//从新的堆顶元素开始向下进行堆调整</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//建堆</span></div><div class="line"><span class="keyword">int</span> BuildHeap(<span class="keyword">int</span>[] A, <span class="keyword">int</span> n)&#123;</div><div class="line">    <span class="keyword">int</span> heap_size=n;</div><div class="line">    <span class="comment">//从每一个非叶子节点开始向下进行堆排序，以每个非叶子节点为根节点都形成最大堆</span></div><div class="line">    <span class="built_in">for</span>(<span class="keyword">int</span> i=heap_size/<span class="number">2</span> <span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</div><div class="line">        Heapify(A, i, heap_size);</div><div class="line">    <span class="built_in">return</span> heap_size;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//堆调整</span></div><div class="line"><span class="keyword">void</span> Heapify(<span class="keyword">int</span>[] A, <span class="keyword">int</span> i, <span class="keyword">int</span> <span class="built_in">size</span>)&#123;<span class="comment">//从A[i]向下进行堆调整</span></div><div class="line">    <span class="keyword">int</span> left_child=i*<span class="number">2</span> + <span class="number">1</span>;<span class="comment">//左孩子索引</span></div><div class="line">    <span class="keyword">int</span> right_child=i*<span class="number">2</span> + <span class="number">2</span>;<span class="comment">//右孩子索引</span></div><div class="line">    <span class="keyword">int</span> <span class="built_in">max</span>=i;<span class="comment">//选出当前节点及左右孩子三者之间中的最大值</span></div><div class="line">    <span class="built_in">if</span>(left_child&lt;<span class="built_in">size</span> &amp;&amp; A[left_child]&gt;A[<span class="built_in">max</span>])</div><div class="line">        <span class="built_in">max</span>=left_child;</div><div class="line">    <span class="built_in">if</span>(right_child&lt;<span class="built_in">size</span> &amp;&amp; A[right_child]&gt;A[<span class="built_in">max</span>])</div><div class="line">        <span class="built_in">max</span>=right_child;</div><div class="line">    <span class="built_in">if</span>(<span class="built_in">max</span> != i)&#123;</div><div class="line">        swap(A, i, <span class="built_in">max</span>);</div><div class="line">        Heapify(A, <span class="built_in">max</span>, <span class="built_in">size</span>);<span class="comment">//递归调用，继续从当前节点向下进行堆调整</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="9、快速排序"><a href="#9、快速排序" class="headerlink" title="9、快速排序"></a>9、快速排序</h3><p>1、从序列中挑出一个元素，作为基准。<br>2、把所有比基准小的元素放在基准前面，所有比基准大的元素放在基准的后面，这个称为分区操作。<br>3.对每个分区递归的调用步骤1~2，递归的结束条件是序列的大小是0或是1，这时整体已经排序好了。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif" alt="image"><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">分类-------------------内部比较排序</div><div class="line">数据结构---------------数组</div><div class="line">最差时间复杂度---------<span class="type">O</span>(n^<span class="number">2</span>)</div><div class="line">最优时间复杂度---------<span class="type">O</span>(nlogn)</div><div class="line">平均时间复杂度---------<span class="type">O</span>(nlogn)</div><div class="line">所需辅助空间-----------主要是递归造成的栈空间使用（用来保存<span class="keyword">left</span>和<span class="keyword">right</span>等局部变量），取决于递归树的深度，一般为<span class="type">O</span>(logn)，最差为<span class="type">O</span>(n)</div><div class="line">稳定性-----------------不稳定</div><div class="line"></div><div class="line"></div><div class="line">void <span class="type">QuickSort</span>(int[] <span class="type">A</span>, int <span class="keyword">left</span>, int <span class="keyword">right</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">left</span>&gt;=<span class="keyword">right</span>)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    int pivot_index = <span class="type">Partition</span>(<span class="type">A</span>, <span class="keyword">left</span>, <span class="keyword">right</span>);<span class="comment">//基准的索引</span></div><div class="line">    <span class="type">QuickSort</span>(<span class="type">A</span>, <span class="keyword">left</span>, pivot_index-<span class="number">1</span>);</div><div class="line">    <span class="type">QuickSort</span>(<span class="type">A</span>, pivot_index+<span class="number">1</span>, <span class="keyword">right</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//划分函数</span></div><div class="line">int <span class="type">Partition</span>(int[] <span class="type">A</span>, int <span class="keyword">left</span>, int <span class="keyword">right</span>)&#123;</div><div class="line">    int pivot=<span class="type">A</span>[<span class="keyword">right</span>];<span class="comment">//每次以最后一个元素为基准</span></div><div class="line">    int tail=<span class="keyword">left</span>-<span class="number">1</span>;<span class="comment">//tail为小于基准的子数组的最后一个元素的索引</span></div><div class="line">    <span class="keyword">for</span>(int i=<span class="keyword">left</span>; i&lt;<span class="keyword">right</span>;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="type">A</span>[i]&lt;pivot)<span class="comment">//把小于基准的数字放到前一个子数组的末尾</span></div><div class="line">            <span class="built_in">swap</span>(<span class="type">A</span>, ++tail, i);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">swap</span>(<span class="type">A</span>, tail+<span class="number">1</span>, <span class="keyword">right</span>);<span class="comment">//最后把基准放到前一个子数组的后边，剩下的子数组就是大于基准的子数组</span></div><div class="line">    <span class="keyword">return</span> tail+<span class="number">1</span>;<span class="comment">//返回基准索引</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;各比较排序性能比较&quot;&gt;&lt;a href=&quot;#各比较排序性能比较&quot; class=&quot;headerlink&quot; title=&quot;各比较排序性能比较&quot;&gt;&lt;/a&gt;各比较排序性能比较&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://osrmzp0jr.bkt.clouddn.com
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Java实现二叉树的先序、中序、后序遍历</title>
    <link href="http://yoursite.com/2017/10/13/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%85%88%E5%BA%8F%E3%80%81%E4%B8%AD%E5%BA%8F%E3%80%81%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2017/10/13/二叉树的先序、中序、后序遍历/</id>
    <published>2017-10-13T13:06:00.000Z</published>
    <updated>2018-04-09T01:06:17.619Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先序遍历示意图："><a href="#先序遍历示意图：" class="headerlink" title="先序遍历示意图："></a>先序遍历示意图：</h3><p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86.jpg" alt="image">  </p>
<h3 id="中序遍历示意图："><a href="#中序遍历示意图：" class="headerlink" title="中序遍历示意图："></a>中序遍历示意图：</h3><p><img src="http://osrmzp0jr.bkt.clouddn.com/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.jpg" alt="image">  </p>
<h3 id="后序遍历示意图："><a href="#后序遍历示意图：" class="headerlink" title="后序遍历示意图："></a>后序遍历示意图：</h3><p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.jpg" alt="image">  </p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class <span class="keyword">Node</span> <span class="title">&#123;  </span></div><div class="line">    private int data;  </div><div class="line">    private <span class="keyword">Node</span> <span class="title">leftNode</span>;  </div><div class="line">    private <span class="keyword">Node</span> <span class="title">rightNode</span>;  </div><div class="line">    public <span class="keyword">Node</span><span class="title">(int</span> data, <span class="keyword">Node</span> <span class="title">leftNode</span>, <span class="keyword">Node</span> <span class="title">rightNode</span>)&#123;  </div><div class="line">        this.data = data;  </div><div class="line">        this.leftNode = leftNode;  </div><div class="line">        this.rightNode = rightNode;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    public int getData() &#123;  </div><div class="line">        return data;  </div><div class="line">    &#125;  </div><div class="line">    public void setData(int data) &#123;  </div><div class="line">        this.data = data;  </div><div class="line">    &#125;  </div><div class="line">    public <span class="keyword">Node</span> <span class="title">getLeftNode</span>() &#123;  </div><div class="line">        return leftNode;  </div><div class="line">    &#125;  </div><div class="line">    public void setLeftNode(<span class="keyword">Node</span> <span class="title">leftNode</span>) &#123;  </div><div class="line">        this.leftNode = leftNode;  </div><div class="line">    &#125;  </div><div class="line">    public <span class="keyword">Node</span> <span class="title">getRightNode</span>() &#123;  </div><div class="line">        return rightNode;  </div><div class="line">    &#125;  </div><div class="line">    public void setRightNode(<span class="keyword">Node</span> <span class="title">rightNode</span>) &#123;  </div><div class="line">        this.rightNode = rightNode;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="一、递归遍历"><a href="#一、递归遍历" class="headerlink" title="一、递归遍历"></a>一、递归遍历</h2><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//先序遍历</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">theFirstTraversal</span><span class="params">(Node root)</span></span>&#123;</div><div class="line">    printNode(root);</div><div class="line">    <span class="keyword">if</span>(root.getLeftNode() != <span class="keyword">null</span>)&#123;</div><div class="line">        theFirstTraversal(root.getLeftNode());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(root.getRightNode() != <span class="keyword">null</span>)&#123;</div><div class="line">        theFirstTraversal(root.getRightNode());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//中序遍历</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">theInOrderTraversal</span><span class="params">(Node root)</span> </span>&#123;    </div><div class="line">    <span class="keyword">if</span> (root.getLeftNode() != <span class="keyword">null</span>) &#123;  </div><div class="line">        theInOrderTraversal(root.getLeftNode());  </div><div class="line">    &#125;  </div><div class="line">    printNode(root);  </div><div class="line">    <span class="keyword">if</span> (root.getRightNode() != <span class="keyword">null</span>) &#123;  </div><div class="line">        theInOrderTraversal(root.getRightNode());  </div><div class="line">    &#125;  </div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="comment">//后序遍历  </span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">thePostOrderTraversal</span><span class="params">(Node root)</span> </span>&#123;    </div><div class="line">    <span class="keyword">if</span> (root.getLeftNode() != <span class="keyword">null</span>) &#123;  </div><div class="line">        thePostOrderTraversal(root.getLeftNode());  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">if</span>(root.getRightNode() != <span class="keyword">null</span>) &#123;  </div><div class="line">        thePostOrderTraversal(root.getRightNode());  </div><div class="line">    &#125;  </div><div class="line">    printNode(root);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="非递归遍历"><a href="#非递归遍历" class="headerlink" title="非递归遍历"></a>非递归遍历</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">//先序遍历</div><div class="line">public void theFirstTraversal_Stack(<span class="keyword">Node</span> <span class="title">root</span>)&#123;</div><div class="line">    Stack<span class="tag">&lt;Node&gt;</span> stack = new Stack<span class="tag">&lt;Node&gt;</span>();</div><div class="line">    <span class="keyword">Node</span> <span class="title">node</span> = root;</div><div class="line">    while(<span class="keyword">node</span> <span class="title">!= null</span> || stack.size() &gt; <span class="number">0</span>)&#123;</div><div class="line">        if(<span class="keyword">node</span> <span class="title">!= null</span>)&#123;</div><div class="line">            printNode(<span class="keyword">node</span><span class="title">);</span></div><div class="line">            stack.push(<span class="keyword">node</span><span class="title">);</span></div><div class="line">            node = <span class="keyword">node</span>.<span class="title">getLeftNode</span>();</div><div class="line">        &#125;else&#123;</div><div class="line">            <span class="keyword">node</span> <span class="title">= stack</span>.pop();</div><div class="line">            <span class="keyword">node</span> <span class="title">= node</span>.getRightNode();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//中序遍历</div><div class="line">public void theInOrderTraversal_Stack(<span class="keyword">Node</span> <span class="title">root</span>) &#123;</div><div class="line">    Stack<span class="tag">&lt;Node&gt;</span> stack = new Stack<span class="tag">&lt;Node&gt;</span>();</div><div class="line">    <span class="keyword">Node</span> <span class="title">node</span> = root;</div><div class="line">    while(<span class="keyword">node</span> <span class="title">!= null</span> || stack.size() &gt; <span class="number">0</span>)&#123;</div><div class="line">        if(<span class="keyword">node</span> <span class="title">!= null</span>)&#123;</div><div class="line">            stack.push(<span class="keyword">node</span><span class="title">);</span></div><div class="line">            node = <span class="keyword">node</span>.<span class="title">getLeftNode</span>();</div><div class="line">        &#125;else&#123;</div><div class="line">            <span class="keyword">node</span> <span class="title">= stack</span>.pop();</div><div class="line">            printNode(<span class="keyword">node</span><span class="title">);</span></div><div class="line">            node = <span class="keyword">node</span>.<span class="title">getRightNode</span>();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//后序遍历  </div><div class="line">public void thePostOrderTraversal_Stack(<span class="keyword">Node</span> <span class="title">root</span>) &#123;</div><div class="line">    Stack<span class="tag">&lt;Node&gt;</span> stack = new Stack<span class="tag">&lt;Node&gt;</span>();</div><div class="line">    Stack<span class="tag">&lt;Node&gt;</span> output = new Stack<span class="tag">&lt;Node&gt;</span>();//用于存储逆后序遍历的结果</div><div class="line">    <span class="keyword">Node</span> <span class="title">node</span> = root;</div><div class="line">    while(<span class="keyword">node</span> <span class="title">!= null</span> || stack.size() &gt; <span class="number">0</span>)&#123;</div><div class="line">        if(<span class="keyword">node</span> <span class="title">!= null</span>)&#123;</div><div class="line">            stack.push(<span class="keyword">node</span><span class="title">);</span></div><div class="line">            output.push(<span class="keyword">node</span><span class="title">);</span></div><div class="line">            node = <span class="keyword">node</span>.<span class="title">getRightNode</span>();</div><div class="line">        &#125;else&#123;</div><div class="line">            <span class="keyword">node</span> <span class="title">= stack</span>.pop();</div><div class="line">            <span class="keyword">node</span> <span class="title">= node</span>.getLeftNode();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    while(output.size() &gt; <span class="number">0</span>)&#123;</div><div class="line">        printNode(output.pop());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;先序遍历示意图：&quot;&gt;&lt;a href=&quot;#先序遍历示意图：&quot; class=&quot;headerlink&quot; title=&quot;先序遍历示意图：&quot;&gt;&lt;/a&gt;先序遍历示意图：&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://osrmzp0jr.bkt.clouddn.com/%E5
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>29、数组中出现超过一半的数字</title>
    <link href="http://yoursite.com/2017/10/13/29%E3%80%81%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2017/10/13/29、数组中出现超过一半的数字/</id>
    <published>2017-10-13T13:05:00.000Z</published>
    <updated>2018-04-09T01:06:17.614Z</updated>
    
    <content type="html"><![CDATA[<p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。  </p>
<h2 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h2><p>在遍历数组时，保存两个值：一个是数组中的一个数字，还有一个是次数。当我们遍历到下一个数字的时候，如果下一个数字和我们之前保存的相同，则次数加一，不同次数就减一。若次数为0，我们需要保存下一个数字，次数记为1。由于我们要找的数字出现次数比其他所有数字出现的次数之和还多，那么要找的数字肯定是最后一次把次数设为1时对应的数字。  </p>
<h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class <span class="type">Solution</span> &#123;</div><div class="line">    public <span class="built_in">int</span> <span class="type">MoreThanHalfNum_Solution</span>(<span class="built_in">int</span> [] <span class="built_in">array</span>) &#123;</div><div class="line">        <span class="built_in">int</span> <span class="literal">result</span>=<span class="built_in">array</span>[<span class="number">0</span>];</div><div class="line">        <span class="built_in">int</span> count=<span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">1</span>;i&lt;<span class="built_in">array</span>.length;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(count==<span class="number">0</span>)&#123;</div><div class="line">                <span class="literal">result</span>=<span class="built_in">array</span>[i];</div><div class="line">                count=<span class="number">1</span>;</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">array</span>[i]==<span class="literal">result</span>)&#123;</div><div class="line">                count++;</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                count--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(!<span class="type">CheckMoreThanHalf</span>(<span class="built_in">array</span>,<span class="built_in">array</span>.length,<span class="literal">result</span>))</div><div class="line">            <span class="literal">result</span>=<span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">result</span>;</div><div class="line">    &#125;</div><div class="line">    //检验最后一次把次数设为<span class="number">1</span>时对应的数字出现的次数是够满足超过一半的数字。</div><div class="line">    boolean <span class="type">CheckMoreThanHalf</span>(<span class="built_in">int</span>[] <span class="built_in">array</span>,<span class="built_in">int</span> length,<span class="built_in">int</span> <span class="literal">result</span>)&#123;</div><div class="line">        boolean a=<span class="literal">true</span>;</div><div class="line">        <span class="built_in">int</span> times=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(<span class="built_in">array</span>[i]==<span class="literal">result</span>)</div><div class="line">                times++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(times*<span class="number">2</span>&lt;=length)</div><div class="line">            a=<span class="literal">false</span>;</div><div class="line">        <span class="keyword">return</span> a;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。  &lt;/p&gt;
&lt;h2 id=&quot;一、思路&quot;&gt;&lt;a href=&quot;#一
    
    </summary>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法，剑指offer" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%EF%BC%8C%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>30、最小的k个数</title>
    <link href="http://yoursite.com/2017/10/13/30%E3%80%81%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/"/>
    <id>http://yoursite.com/2017/10/13/30、最小的k个数/</id>
    <published>2017-10-13T12:08:00.000Z</published>
    <updated>2018-04-09T01:06:17.614Z</updated>
    
    <content type="html"><![CDATA[<p>输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4。  </p>
<h2 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h2><p>创建一个大小为k的最大堆，先依次放入k个数，找出k个数中的最大值，然后每次拿待插入的数和最大值比较。如果待插入的数比当前已知的最大值小，就用这个数替换最大值；若比最大值大，就抛弃该数。<br>堆满之后，要做三件事：一是找出最大数；二是可能需要删除最大数；三是可能要插入新数字，我们可以在O(logk)时间内完成这三步操作。对N个数字而言，总时间复杂度为O(nlogk)。  </p>
<h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.PriorityQueue;</div><div class="line"><span class="keyword">import</span> java.util.Comparator;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></div><div class="line">    <span class="keyword">public</span> ArrayList&lt;Integer&gt; GetLeastNumbers_Solution(<span class="keyword">int</span> [] input, <span class="keyword">int</span> k) &#123;</div><div class="line">        ArrayList&lt;Integer&gt; <span class="built_in">list</span> = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</div><div class="line">        <span class="keyword">int</span> length=input.length;</div><div class="line">        <span class="keyword">if</span>(k&gt;length || k&lt;=<span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">        </div><div class="line">        PriorityQueue&lt;Integer&gt; maxHeap = <span class="keyword">new</span> PriorityQueue&lt;Integer&gt;(k , <span class="keyword">new</span> Comparator&lt;Integer&gt;()&#123;<span class="comment">//PriorityQueue是基于最小堆的</span></div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="keyword">int</span> compare(Integer o1,Integer o2)&#123;</div><div class="line">                <span class="keyword">return</span> o2.compareTo(o1);<span class="comment">//变为按逆序排的最大堆，原为按自然顺序的最小堆</span></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(maxHeap.size() != k)&#123;<span class="comment">//先填满大小为k的最大堆</span></div><div class="line">                maxHeap.offer(input[i]);</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(maxHeap.peek() &gt; input[i])&#123;<span class="comment">//如果比最大堆中最大的数小，则替换之。</span></div><div class="line">                maxHeap.poll();</div><div class="line">                maxHeap.offer(input[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(Integer integer : maxHeap)&#123;</div><div class="line">            <span class="built_in">list</span>.add(integer);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">list</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4。  &lt;/p&gt;
&lt;h2 id=&quot;一、思路&quot;&gt;&lt;a href=&quot;#一、思路&quot; class=&quot;headerlink&quot; title=&quot;一、思路&quot;&gt;&lt;/a&gt;一、思路
    
    </summary>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法，剑指offer" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%EF%BC%8C%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>Java实现二叉排序树的插入、查找和删除</title>
    <link href="http://yoursite.com/2017/10/12/Java%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%E7%9A%84%E6%8F%92%E5%85%A5%E3%80%81%E6%9F%A5%E6%89%BE%E5%92%8C%E5%88%A0%E9%99%A4/"/>
    <id>http://yoursite.com/2017/10/12/Java实现二叉排序树的插入、查找和删除/</id>
    <published>2017-10-12T07:39:00.000Z</published>
    <updated>2018-04-09T01:06:17.617Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h2><p>又叫二叉查找树。<br>1.可以使一颗空树<br>2.若左子树不为空，则左子树上所有节点的值均小于根节点的值<br>3.若右子树不为空，则右子树上所有节点的值均大于根节点的值<br>4.左右子树也分别为二叉排序树  </p>
<h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p><strong>查找性能</strong>：含有n个节点的二叉排序树的平均查找长度和树的形态有关。<br>（最坏情况）当先后插入的关键字有序时，构成的二叉排序树蜕变为单枝树，查找性能为O(n)<br>（最好情况）二叉排序的形态和折半查找的判定树相同，平均查找长度和log2(n)成正比  </p>
<p><strong>插入、删除性能</strong>：插入、删除操作的时间复杂度都是O(logn)级的。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//二叉树节点定义</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Node</span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> <span class="keyword">value</span>;</div><div class="line">    <span class="keyword">private</span> Node left;</div><div class="line">    <span class="keyword">private</span> Node right;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span>(<span class="params">Node left, Node right, <span class="keyword">int</span> <span class="keyword">value</span></span>)</span>&#123;</div><div class="line">        <span class="keyword">this</span>.left = left;</div><div class="line">        <span class="keyword">this</span>.right=right;</div><div class="line">        <span class="keyword">this</span>.<span class="keyword">value</span> = <span class="keyword">value</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">set</span>,<span class="keyword">get</span>...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BinarySortTree</span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Node root=<span class="literal">null</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//查找二叉排序树中是否有key值</span></div><div class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">searchBST</span>(<span class="params"><span class="keyword">int</span> key</span>)</span>&#123;</div><div class="line">        Node current = root;</div><div class="line">        <span class="keyword">while</span>(current != <span class="literal">null</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(key == current.getValue())</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            <span class="keyword">else</span>(key &lt; current.getValue())</div><div class="line">                current=current.getLeft();</div><div class="line">            <span class="keyword">else</span></div><div class="line">                current=current.getRight();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//向二叉排序树中插入节点</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertBST</span>(<span class="params"><span class="keyword">int</span> key</span>)</span>&#123;</div><div class="line">        Node p = root;</div><div class="line">        <span class="comment">//记录查找节点的父节点</span></div><div class="line">        Node prev = <span class="literal">null</span>;</div><div class="line">        <span class="comment">//一直查找下去，一直到满足条件的叶子节点</span></div><div class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span>)&#123;</div><div class="line">            prev=p;</div><div class="line">            <span class="keyword">if</span>(key &lt; p.getValue())</div><div class="line">                p = p.getLeft();</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(key &gt; p.getValue())</div><div class="line">                p = p.getRight();</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">return</span>;<span class="comment">//找到了相同节点就返回</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//prev为要安放节点的父结点，根据key的大小，判断放入prev的左右节点</span></div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)</div><div class="line">            root = <span class="keyword">new</span> Node(key);</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(key &lt; prev.getValue())</div><div class="line">            prev.setLeft(<span class="keyword">new</span> Node(key));</div><div class="line">        <span class="keyword">else</span></div><div class="line">            prev.setRight(<span class="keyword">new</span> Node(key));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//删除二叉排序树中的节点</span></div><div class="line">    分为三种情况：</div><div class="line">    (<span class="number">1</span>)要删除的节点p是叶子节点，删除置空即可</div><div class="line">    (<span class="number">2</span>)p只有左子树或右子树，直接让左子树/右子树代替p</div><div class="line">    (<span class="number">3</span>)p既有左子树又有右子树，用p左子树中最大的那个值（最右端s）代替p，删除s，重接其左子树</div><div class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">delete</span>(<span class="params">Node node</span>)</span>&#123;</div><div class="line">        Node temp = <span class="literal">null</span>;</div><div class="line">        <span class="comment">//右子树为空，重接它的左子树；如果是叶子节点，在这也被置为空</span></div><div class="line">        <span class="keyword">if</span>(node.getRight()==<span class="literal">null</span>)&#123;</div><div class="line">            temp = node;</div><div class="line">            node = node.getLeft();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//左子树为空，重接它的右子树</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(node.getLeft()==<span class="literal">null</span>)&#123;</div><div class="line">            temp = node;</div><div class="line">            node = node.getRight();</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//左右子树都不为空</span></div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            temp = node;</div><div class="line">            Node s = node;</div><div class="line">            <span class="comment">//转向左子树，然后向右走到尽头</span></div><div class="line">            s=s.getLeft();<span class="comment">//temp是s的父结点</span></div><div class="line">            <span class="keyword">while</span>(s.getRight() != <span class="literal">null</span>)&#123;</div><div class="line">                temp = s;</div><div class="line">                s = s.getRight();</div><div class="line">            &#125;</div><div class="line">            node.setValue(s.getValue());<span class="comment">//将node的值设为左子树最右侧s的值</span></div><div class="line">            <span class="keyword">if</span>(temp != node)&#123;</div><div class="line">                temp.setRight(s.getLeft());<span class="comment">//见书p326</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                temp.setLeft(s.getLeft());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;二叉排序树&quot;&gt;&lt;a href=&quot;#二叉排序树&quot; class=&quot;headerlink&quot; title=&quot;二叉排序树&quot;&gt;&lt;/a&gt;二叉排序树&lt;/h2&gt;&lt;p&gt;又叫二叉查找树。&lt;br&gt;1.可以使一颗空树&lt;br&gt;2.若左子树不为空，则左子树上所有节点的值均小于根节点的值&lt;br&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>静态代码块、构造代码块、构造函数及类初始化顺序</title>
    <link href="http://yoursite.com/2017/10/12/%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E3%80%81%E6%9E%84%E9%80%A0%E4%BB%A3%E7%A0%81%E5%9D%97%E3%80%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%8F%8A%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/10/12/静态代码块、构造代码块、构造函数及类初始化顺序/</id>
    <published>2017-10-12T07:35:00.000Z</published>
    <updated>2018-04-09T01:06:17.621Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>静态代码块：用static声明，jvm加载类时执行，仅执行一次。<br>构造代码块：类中直接用{}定义，每一次创建对象时执行。<br>执行顺序优先级：<strong>静态块-&gt;main()-&gt;构造块-&gt;构造函数</strong>。  </p>
<h2 id="二、详解"><a href="#二、详解" class="headerlink" title="二、详解"></a>二、详解</h2><h3 id="1、构造函数"><a href="#1、构造函数" class="headerlink" title="1、构造函数"></a>1、构造函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Hello</span><span class="params">()</span></span>&#123;<span class="comment">//构造函数</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.对象一建立就会调用与之相应的构造函数，也就是说，不建立对象，构造函数是不会运行的。<br>2.构造函数的作用是用于给对象初始化。<br>3.一个对象建立，构造函数只运行一次。  </p>
<h3 id="2、构造代码块"><a href="#2、构造代码块" class="headerlink" title="2、构造代码块"></a>2、构造代码块</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="comment">//构造代码块</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.构造代码块的作用是给对象进行初始化。<br>2.对象一建立就运行构造代码块了，而且优先于构造函数。有对象建立，才会运行构造代码块，类是不能调用构造代码块的。<br>3.构造代码块和构造函数的区别：<strong>构造代码块是给所有对象进行统一初始化，而构造函数是给对应的对象初始化。</strong>因为构造函数可以有多个，运行哪个构造函数就会建立什么样的对象，但无论建立哪个对象，都会执行相同的构造代码块。也就是说，构造代码块中定义的是不同对象共性的初始化内容。  </p>
<h3 id="3、静态代码块"><a href="#3、静态代码块" class="headerlink" title="3、静态代码块"></a>3、静态代码块</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span>&#123;<span class="comment">//静态代码块</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.<strong>它随着类的加载而执行，只执行一次，并且优先于主函数</strong>。具体说，静态代码块是由类调用的，类调用时，先执行静态代码块，然后再执行主函数。<br>2.静态代码块其实是给类初始化的，而构造代码块是给对象初始化的。<br>3.静态代码块中的变量是局部变量，与普通函数中的局部变量没有区别。<br>4.一个类中可以有多个静态代码块。  </p>
<h2 id="三、类初始化顺序"><a href="#三、类初始化顺序" class="headerlink" title="三、类初始化顺序"></a>三、类初始化顺序</h2><p>&emsp;其中，<strong>静态变量、静态初始化块，变量、初始化块（构造代码块）的初始化顺序取决于它们在类中出现的先后顺序。</strong><br>首先，访问SubClass.main()，这是一个static方法，于是装载器会寻找已经编译的SubClass.class文件。在装载过程中，如果注意到有基类（extends），会装载基类。不管创不创建基类对象，这个过程都会发生。之后是正常的初始化顺序：  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F.png" alt="image"><br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> <span class="title">Parent</span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String p_StaticField=<span class="string">"父类--静态变量"</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> String p_Field=<span class="string">"父类--变量"</span>;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> i=<span class="number">9</span>;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> j=<span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println(p_StaticField);</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"父类--静态初始化块"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    &#123;</div><div class="line">        System.<span class="keyword">out</span>.println(p_Field);</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"父类--初始化块"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"父类--构造器"</span>);</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"i="</span> + i+ <span class="string">",j="</span> + j);</div><div class="line">        j=<span class="number">20</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SubClass</span> <span class="title">extends</span> <span class="title">Parent</span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s_StaticField=<span class="string">"子类--静态变量"</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> String s_Field=<span class="string">"子类--变量"</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">static</span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println(s_StaticField);</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"子类--静态初始化块"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    &#123;</div><div class="line">        System.<span class="keyword">out</span>.println(s_Field);</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"子类--初始化块"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubClass</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"子类--构造器"</span>);</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"i="</span> + i+ <span class="string">",j="</span> + j);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span>&#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"子类main方法"</span>);</div><div class="line">        <span class="keyword">new</span> SubClass();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">运行结果：  </div><div class="line">父类--静态变量  </div><div class="line">父类--静态初始化块  </div><div class="line">子类--静态变量  </div><div class="line">子类--静态初始化块  </div><div class="line">子类main方法  </div><div class="line">父类--变量  </div><div class="line">父类--初始化块  </div><div class="line">父类--构造器  </div><div class="line">i=<span class="number">9</span>, j=<span class="number">0</span>  </div><div class="line">子类--变量  </div><div class="line">子类--初始化块  </div><div class="line">子类--构造器  </div><div class="line">i=<span class="number">9</span>,j=<span class="number">20</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;静态代码块：用static声明，jvm加载类时执行，仅执行一次。&lt;br&gt;构造代码块：类中直接用{}定义，每一次创建对象时执行
    
    </summary>
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>字符串、基本数据类型等在堆、栈、常量池中的存储</title>
    <link href="http://yoursite.com/2017/10/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%AD%89%E5%9C%A8%E5%A0%86%E3%80%81%E6%A0%88%E3%80%81%E5%B8%B8%E9%87%8F%E6%B1%A0%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/"/>
    <id>http://yoursite.com/2017/10/11/字符串、基本数据类型等在堆、栈、常量池中的存储/</id>
    <published>2017-10-11T12:56:00.000Z</published>
    <updated>2018-04-09T01:06:17.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、对于字符串"><a href="#一、对于字符串" class="headerlink" title="一、对于字符串"></a>一、对于字符串</h1><p>字符串的对象引用都是存储在栈中的。如果是编译期已经创建好的（直接用双引号定义的），对象存储在常量池中；如果是运行期才能确定的（new出来的），对象存储在堆中。对于equals相等的字符串，常量池中只有一份，堆中可以有多份。<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">String</span> s1=<span class="string">"china"</span>;</div><div class="line"><span class="keyword">String</span> s2=<span class="string">"china"</span>;</div><div class="line"><span class="keyword">String</span> ss1=<span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"china"</span>);</div><div class="line"><span class="keyword">String</span> ss2=<span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"china"</span>);</div></pre></td></tr></table></figure></p>
<p>通过new产生一个字符串“china”时，会先去常量池中查找是否已经有了“china”，如果没有，就在常量池中创建一个此字符串对象，然后在堆中再创建一个常量池中此“china”对象的拷贝对象。  </p>
<h1 id="二、对于基础类型的变量和常量"><a href="#二、对于基础类型的变量和常量" class="headerlink" title="二、对于基础类型的变量和常量"></a>二、对于基础类型的变量和常量</h1><p>局部变量（包括形式参数）：数据存在于栈内存中，栈内存中的局部变量随着方法的消失而消失。<br>成员变量：存储在堆中的对象里面，由垃圾收集器负责回收。<br>常量、静态变量：存储在方法区中（常量池）。  </p>
<h1 id="三、Java中的两种数据类型"><a href="#三、Java中的两种数据类型" class="headerlink" title="三、Java中的两种数据类型"></a>三、Java中的两种数据类型</h1><h2 id="1、八种基本类型"><a href="#1、八种基本类型" class="headerlink" title="1、八种基本类型"></a>1、八种基本类型</h2><p>byte,short,int,long,char,double,float,boolean。如函数中的int a=3，a是一个指向3这个字面值的引用。存在于栈中，数据可以共享。同时定义int a=3和int b=3，a和b会同时指向3。<br>字面值的引用和类对象引用不同。两类对象引用同时指向一个对象，若一个对象引用变量修改了这个对象的内部状态，那么对另一个对象引用也即刻反映出变化，但字面值引用不会。  </p>
<h2 id="2、包装类数据"><a href="#2、包装类数据" class="headerlink" title="2、包装类数据"></a>2、包装类数据</h2><p>Integer,Double等。这些数据全部存在于堆中，Java中用new语句显式的告诉编译器运行时根据需要动态创建，灵活但更占用时间。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args)&#123;</div><div class="line">    int <span class="attribute">a1</span>=1;</div><div class="line">    int <span class="attribute">b1</span>=1;</div><div class="line">    int <span class="attribute">c1</span>=2;</div><div class="line">    int <span class="attribute">d1</span>=a1+b1;</div><div class="line">    </div><div class="line">    Integer <span class="attribute">a</span>=1;</div><div class="line">    Integer <span class="attribute">b</span>=2;</div><div class="line">    Integer <span class="attribute">c</span>=3;</div><div class="line">    Integer <span class="attribute">d</span>=3</div><div class="line">    </div><div class="line">    Integer <span class="attribute">e</span>=321;</div><div class="line">    Integer <span class="attribute">f</span>=321;</div><div class="line">    </div><div class="line">    System.out.println(<span class="attribute">a1</span>==b1);//true</div><div class="line">    System.out.println(<span class="attribute">c1</span>==d1);//true</div><div class="line">    System.out.println(<span class="attribute">c</span>==(a+b));//true</div><div class="line">    System.out.println(<span class="attribute">c</span>==d);//true</div><div class="line">    System.out.println(<span class="attribute">c</span>==d);//false</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在自动装箱时（int-&gt;Integer时），当int值在-128~127时，返回的不是一个新New出来的Integer对象，而是一个已经缓存在堆中的Integer对象；若不在范围，则返回一个新new出来的Integer对象。<br>System.out.println(c1==d1);//true：先创建一个c1的引用，查找有没有字面值为2的地址，没找到，就开辟一个存放2这个字面值的地址，将c1指向2的地址。d1为两个字面值相加也为2，由于在栈中已经有2这个字面量的地址，因此将d1直接指向2的地址，所以c1和d1的指向相同。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、对于字符串&quot;&gt;&lt;a href=&quot;#一、对于字符串&quot; class=&quot;headerlink&quot; title=&quot;一、对于字符串&quot;&gt;&lt;/a&gt;一、对于字符串&lt;/h1&gt;&lt;p&gt;字符串的对象引用都是存储在栈中的。如果是编译期已经创建好的（直接用双引号定义的），对象存储在常量池中
    
    </summary>
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
