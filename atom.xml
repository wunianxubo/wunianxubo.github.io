<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wunian&#39;s Blog</title>
  <subtitle>清风徐来，水波不兴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-16T08:15:10.219Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xu Bo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中的BIO、NIO、AIO</title>
    <link href="http://yoursite.com/2017/10/16/Java%E4%B8%AD%E7%9A%84BIO%E3%80%81NIO%E3%80%81AIO/"/>
    <id>http://yoursite.com/2017/10/16/Java中的BIO、NIO、AIO/</id>
    <published>2017-10-16T08:14:00.000Z</published>
    <updated>2017-10-16T08:15:10.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><p>同步和异步关注的是消息通信机制。<br>同步：指在发出一个调用时，在没有得到结果之前，该调用就不返回。一旦返回，说明已经得到返回值了。也就是由调用者主动等待这个调用的结果。<br>异步：指在调用发出之后，这个调用就直接返回了，所以没有返回结果。就是说异步过程调用发出后，调用者不会立刻得到结果，而是在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用。  </p>
<h2 id="阻塞和非阻塞"><a href="#阻塞和非阻塞" class="headerlink" title="阻塞和非阻塞"></a>阻塞和非阻塞</h2><p>阻塞和非阻塞关注的是程序在等待调用结果（消息，返回值）时的状态。<br>阻塞：阻塞调用指的是调用结果返回之前，当前线程会被挂起，调用线程只有在得到结果之后才会返回。<br>非阻塞：非阻塞调用指的是不能立刻得到结果之前，该调用不会阻塞当前线程。<br>在处理IO的时候，阻塞和非阻塞都是同步IO。除了特殊的API（AIO），为异步IO。  </p>
<p>对unix来讲：阻塞式IO，非阻塞式IO，IO复用（select/poll/epoll）都属于同步IO，因为它们在数据由内核空间复制回进程缓冲区时都是阻塞的（不能做其他事），分为两阶段：<br>1、数据准备完成<br>2、数据由内核空间复制回进程缓冲区  </p>
<h2 id="同步IO和异步IO"><a href="#同步IO和异步IO" class="headerlink" title="同步IO和异步IO"></a>同步IO和异步IO</h2><p><strong>同步IO</strong>：当用户发出IO请求操作后，如果数据没有就绪，需要通过用户线程或者内核不断去轮询数据是否就绪，当数据就绪时，再将数据从内核拷贝到用户线程。<br><strong>异步IO</strong>：只有IO请求操作的发出是用户线程来执行的，IO操作的两个阶段都是由内核自动完成，不需要不断去轮询，会发送通知告知用户线程IO操作已经完成。不会对用户线程产生阻塞。  </p>
<h2 id="阻塞IO和非阻塞IO"><a href="#阻塞IO和非阻塞IO" class="headerlink" title="阻塞IO和非阻塞IO"></a>阻塞IO和非阻塞IO</h2><p>阻塞IO和非阻塞IO是反映在当用户请求IO操作时，如果数据没有就绪，是用户线程一直等待数据就绪，还是会收到一个标志信息上。  </p>
<h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>老张爱喝茶，他要煮开水。<br>出场任务：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。<br>1、老张把水壶放到火上，立等水开。（同步阻塞）<br>老张觉得自己有点傻<br>2、老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开了没有。（同步非阻塞）<br>老张还是觉得自己有点傻，于是买了把会响笛的水壶。水开之后，能发出声音提醒水开了。<br>3、老张把响水壶放到火上，立等水开。（异步阻塞）<br>老张觉得这样傻等意义不大<br>4、老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）<br>老张觉得自己聪明了<br>&emsp;所谓同步异步，只是针对水壶而言。普通水壶，同步；响水壶，异步。虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。同步只能让调用者去轮询自己，造成老张效率的低下。<br>&emsp;所谓阻塞非阻塞，仅仅对于老张而言。立等的老张，阻塞；看电视的老张，非阻塞。情况1和3中老张是阻塞的，虽然3中响水壶是异步的，但对于立等的老张没有太大的意义。所以一般异步都是配合非阻塞使用的，这样才能发挥异步的效用。  </p>
<h2 id="I-O模型"><a href="#I-O模型" class="headerlink" title="I/O模型"></a>I/O模型</h2><p>可分为同步阻塞，同步非阻塞，异步阻塞，异步非阻塞IO。<br><strong>同步阻塞IO</strong>：在这种方式下，用户进程在发起一个IO操作后，必须等待IO操作的完成，只有当真正完成了IO操作以后，用户线程才能运行。<br><strong>同步非阻塞IO</strong>：这种方式下，用户进程在发起一个IO操作后可返回做其它事情，但是用户进程需要时不时的询问IO操作是否就绪，就要求用户进程不停的去询问，从而引入不惜要的CPU资源浪费。JAVA中NIO就属于同步非阻塞IO。<br><strong>异步阻塞IO</strong>：这种方式下，应用发起一个IO操作后，不等待内核IO操作的完成，等内核完成IO操作后会通知应用程序。<br><strong>异步非阻塞IO</strong>：这种方式下，用户进程只需要发起一个IO操作然后立即返回，等IO操作真正完成后，应用程序会得到IO操作完成的通知，此时用户进程只需要对数据进行处理就好了，不需要进行实际的IO读写操作，因为真正的IO读取和写入操作已经由内核完成了。  </p>
<h2 id="JAVA对BIO、NIO、AIO支持"><a href="#JAVA对BIO、NIO、AIO支持" class="headerlink" title="JAVA对BIO、NIO、AIO支持"></a>JAVA对BIO、NIO、AIO支持</h2><p><strong>BIO</strong>：同步阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器就需要启动一个线程进行处理，如果这个连接不做任何事情会造成不必要的线程开销，当然可以通过线程池机制改善。<br><strong>NIO</strong>：同步非阻塞，服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有I/O请求时才启动一个线程进行处理。<br><strong>AIO</strong>：异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处理。  </p>
<h2 id="JAVA中BIO、NIO、AIO的适用场景"><a href="#JAVA中BIO、NIO、AIO的适用场景" class="headerlink" title="JAVA中BIO、NIO、AIO的适用场景"></a>JAVA中BIO、NIO、AIO的适用场景</h2><p>BIO：适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，jdk1.4前唯一的选择，但程序直观简单易理解。<br>NIO：适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，编程比较复杂，jdk1.4开始支持。<br>AIO：适用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，jdk1.7开始支持。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;同步和异步&quot;&gt;&lt;a href=&quot;#同步和异步&quot; class=&quot;headerlink&quot; title=&quot;同步和异步&quot;&gt;&lt;/a&gt;同步和异步&lt;/h2&gt;&lt;p&gt;同步和异步关注的是消息通信机制。&lt;br&gt;同步：指在发出一个调用时，在没有得到结果之前，该调用就不返回。一旦返回，说明
    
    </summary>
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>常用排序算法总结</title>
    <link href="http://yoursite.com/2017/10/13/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/10/13/常用排序算法总结/</id>
    <published>2017-10-13T13:07:00.000Z</published>
    <updated>2017-10-13T13:28:00.746Z</updated>
    
    <content type="html"><![CDATA[<h3 id="各比较排序性能比较"><a href="#各比较排序性能比较" class="headerlink" title="各比较排序性能比较"></a>各比较排序性能比较</h3><p><img src="http://osrmzp0jr.bkt.clouddn.com/%E6%AF%94%E8%BE%83%E6%8E%92%E5%BA%8F%E6%80%A7%E8%83%BD.jpg" alt="image">  </p>
<h3 id="1、冒泡排序"><a href="#1、冒泡排序" class="headerlink" title="1、冒泡排序"></a>1、冒泡排序</h3><p>1、比较相邻的元素，如果前一个比后一个大，就把他们两个调换位置。<br>2、对每一对相邻的元素作同样的工作，从开始一对到最后一对，完成后，最后的元素会是最大的数。<br>3、针对所有元素重复上面的步骤，除了最后一个元素。<br>4、对剩下越来越少的元素重复上面的步骤。<br><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif" alt="image"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">分类-------------------内部比较排序</div><div class="line">数据结构---------------数组</div><div class="line">最差时间复杂度---------O(n^2)</div><div class="line">最优时间复杂度---------加了isSorted标记，在第一趟运行时，发现无需进行下一趟比较，可把时间复杂度降为O(n)</div><div class="line">平均时间复杂度---------O(n^2)</div><div class="line">所需辅助空间-----------O(1)</div><div class="line">稳定性-----------------稳定</div><div class="line"></div><div class="line">public class BubbleSort&#123;</div><div class="line">    public static void bubbleSort(int[] arr)&#123;</div><div class="line">        for(int i=0; i&lt;arr.length-1; i++)&#123;//比较趟数</div><div class="line">            boolean isSorted = true;</div><div class="line">            for(int j=0; j&lt;arr.length-1-i; j++)&#123;//当前趟需要的比较次数</div><div class="line">                if(arr[j]&gt;arr[j+1])&#123;//将最大元素浮到数组最后</div><div class="line">                    isSorted = false;</div><div class="line">                    swap(arr,j,j+1);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            if(isSorted)&#123;//当前趟比较完后，发现没有元素需要交换位置，表示数组已有序，不必进行下一趟。</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    void swap(int[] arr, int i, int j)&#123;//元素交换位置（通用）</div><div class="line">        int temp=arr[i];</div><div class="line">        arr[i]=arr[j];</div><div class="line">        arr[j]=temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2、鸡尾酒排序"><a href="#2、鸡尾酒排序" class="headerlink" title="2、鸡尾酒排序"></a>2、鸡尾酒排序</h3><p>也叫定向冒泡排序，是冒泡排序的一种改进。与冒泡排序不同在于先从低到高将最大元素放到后面然后再从高到底将最小元素放到前面。<br><img src="http://osrmzp0jr.bkt.clouddn.com/%E9%B8%A1%E5%B0%BE%E9%85%92%E6%8E%92%E5%BA%8F.gif" alt="image"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">分类-------------------内部比较排序</div><div class="line">数据结构---------------数组</div><div class="line">最差时间复杂度---------O(n^2)</div><div class="line">最优时间复杂度---------如果数组一开始大部分已经排序过的话，接近O(n)</div><div class="line">平均时间复杂度---------O(n^2)</div><div class="line">所需辅助空间-----------O(1)</div><div class="line">稳定性-----------------稳定</div><div class="line"></div><div class="line">void CocktailSort(int[] A, int n)&#123;</div><div class="line">    int left=0;//初始化边界</div><div class="line">    int right=n-1;</div><div class="line">    while(left &lt; right)&#123;</div><div class="line">    </div><div class="line">        for(int i=left; i&lt;right; i++)&#123;//从左往右，将最大元素放到数组最后</div><div class="line">            if(A[i]&gt;A[i+1])</div><div class="line">                swap(A, i, i+1);</div><div class="line">        &#125;</div><div class="line">        right--;</div><div class="line">        </div><div class="line">        for(int i=right; i&gt;left; i--)&#123;//从右往左，将最小元素放到数组最前</div><div class="line">            if(A[i]&lt;A[i-1])</div><div class="line">                swap(A, i ,i-1);</div><div class="line">        &#125;</div><div class="line">        left++;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="3、选择排序"><a href="#3、选择排序" class="headerlink" title="3、选择排序"></a>3、选择排序</h3><p>选择排序，第一次遍历找到最小（大）元素，放到序列的起始位置，之后每次遍历继续寻找最小（大）元素，放到已排序序列的后面，直到所有元素都排序完毕。<br>选择排序和冒泡排序的区别：冒泡排序一次交换相邻两个顺序不合法的元素位置，从而将最小（大）元素放到合适的位置；而选择排序没遍历一次都记住当前最小（大）元素的位置，最后仅需一次交换操作就可以放到合适的位置。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif" alt="image"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">分类-------------------内部比较排序</div><div class="line">数据结构---------------数组</div><div class="line">最差时间复杂度---------O(n^2)</div><div class="line">最优时间复杂度---------O(n^2)</div><div class="line">平均时间复杂度---------O(n^2)</div><div class="line">所需辅助空间-----------O(1)</div><div class="line">稳定性-----------------不稳定</div><div class="line"></div><div class="line">void SelectionSort(int[] A, int n)&#123;</div><div class="line">    for(int i=0; i&lt;n-1; i++)&#123;//i为已排序序列的末尾</div><div class="line">        int min=i;</div><div class="line">        for(int j=i+1; j&lt;n; j++)&#123;//未排序序列</div><div class="line">            if(A[j]&lt;A[min])//找出未排序序列的最小值</div><div class="line">                min=j;</div><div class="line">        &#125;</div><div class="line">        if(min != i)&#123;</div><div class="line">            swap(A,min,i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="4、插入排序"><a href="#4、插入排序" class="headerlink" title="4、插入排序"></a>4、插入排序</h3><p>1、从第一个元素开始，该元素可以认定为已被排序<br>2、取出下一个元素，在已排序的序列中从后向前扫描<br>3、如果扫描到的数比新元素大，则将扫描到的数移到下一位置<br>4、重复步骤3，直到找到扫描的数小于等于新元素，则将新元素插到该元素后面<br>5、重复步骤2~4<br><img src="http://osrmzp0jr.bkt.clouddn.com/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F1.gif" alt="image">  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">分类-------------------内部比较排序</div><div class="line">数据结构---------------数组</div><div class="line">最差时间复杂度---------输入序列是降序排列，O(n^2)</div><div class="line">最优时间复杂度---------输入序列是升序排列，O(n)</div><div class="line">平均时间复杂度---------O(n^2)</div><div class="line">所需辅助空间-----------O(1)</div><div class="line">稳定性-----------------稳定</div><div class="line"></div><div class="line">void InsertionSort(int[] A, int n)&#123;</div><div class="line">    for(int i=1; i&lt;n ;i++)&#123;//类似抓扑克牌</div><div class="line">        int get = A[i];//右手抓到的扑克牌</div><div class="line">        int j=i-1;//左手上的牌总是排好序的</div><div class="line">        while(get&lt;A[j] &amp;&amp; j&gt;=0)&#123;//将抓到的牌和手牌从右向左进行比较，若手牌比抓到的牌大，就将其右移 </div><div class="line">            A[j+1]=A[j];</div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">        A[j+1]=get;//若手牌比抓到的牌小，就将抓到的牌插到该手牌右边</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5、插入排序的改进：二分插入排序"><a href="#5、插入排序的改进：二分插入排序" class="headerlink" title="5、插入排序的改进：二分插入排序"></a>5、插入排序的改进：二分插入排序</h3><p>对于插入排序，如果比较操作的代价比交换操作大的话，可以采用二分查找法来减少比较操作的次数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">分类-------------------内部比较排序</div><div class="line">数据结构---------------数组</div><div class="line">最差时间复杂度---------输入序列是降序排列，O(nlogn)</div><div class="line">最优时间复杂度---------输入序列是升序排列，O(n)</div><div class="line">平均时间复杂度---------O(n^2)</div><div class="line">所需辅助空间-----------O(1)</div><div class="line">稳定性-----------------稳定</div><div class="line"></div><div class="line">void InsertionSortDichotomy(int[] A,int n)&#123;</div><div class="line">    for(int i=1; i&lt;n; i++)&#123;</div><div class="line">        int get=A[i];//抓到的牌</div><div class="line">        int left=0;//left,right是手牌的边界，手牌是已排序好的</div><div class="line">        int right=i-1;</div><div class="line">        while(left&lt;=right)&#123;</div><div class="line">            int mid=(left+right)/2;//二分查找，定位新牌的位置</div><div class="line">            if(A[mid]&gt;get)</div><div class="line">                right=mid-1;</div><div class="line">            else</div><div class="line">                left=mid+1;</div><div class="line">        &#125;</div><div class="line">        for(int j=i-1; j&gt;=left; j--)&#123;//将欲插入新牌位置后边的牌向后移一位</div><div class="line">            A[j+1]=A[j];</div><div class="line">        &#125;</div><div class="line">        A[left]=get;//将抓到的牌插入手牌</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="6、插入排序的更高效改进：希尔排序"><a href="#6、插入排序的更高效改进：希尔排序" class="headerlink" title="6、插入排序的更高效改进：希尔排序"></a>6、插入排序的更高效改进：希尔排序</h3><p>又叫递减增量排序，是不稳定的排序算法。<br>希尔排序通过将比较的全部元素分为几个区域来提升插入排序的性能。这样可以让一个元素一次性地朝最终位置前进一大步。然后算法再取越来越小的补偿进行排序，算法的最后一步就是普通的插入排序，但到这一步，需排序的数据几乎是已排好的了（此时插入排序较快）。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.gif" alt="image"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">分类-------------------内部比较排序</div><div class="line">数据结构---------------数组</div><div class="line">最差时间复杂度---------O(n^2)</div><div class="line">最优时间复杂度---------O(n^1.3)</div><div class="line">平均时间复杂度---------O(nlogn)~O(n^w)</div><div class="line">所需辅助空间-----------O(1)</div><div class="line">稳定性-----------------不稳定</div><div class="line"></div><div class="line">void ShellSort(int A[], int n)&#123;</div><div class="line">    int h=0;</div><div class="line">    while(h&lt;=n)&#123;</div><div class="line">        h = 3 * h + 1;//生成初始增量</div><div class="line">    &#125;</div><div class="line">    while(h&gt;=1)&#123;</div><div class="line">    //i和j相距距离为h，j在i左侧，A[j]和A[i]比较大小，大的向后移，之后j=j-h按步长向前退</div><div class="line">        for(int i=h; i&lt;n; i++)&#123;</div><div class="line">            int j = i-h;</div><div class="line">            int get = A[i];</div><div class="line">            while(j&gt;=0 &amp;&amp; A[j]&gt;get)&#123;</div><div class="line">                A[j+h] = A[j];</div><div class="line">                j = j-h;</div><div class="line">            &#125;</div><div class="line">            A[j+h] = get;</div><div class="line">        &#125;</div><div class="line">        h=(h-1)/3;//递减增量</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="7、归并排序"><a href="#7、归并排序" class="headerlink" title="7、归并排序"></a>7、归并排序</h3><p>归并操作如下：<br>1、申请空间，使其大小为两个已经排序的序列之和，该序列用来存放合并后的序列<br>2、设定两个指针，最初位置分别为两个已经排序序列的起始位置<br>3、比较两个指针所指向的元素，选择较小的元素放入到合并空间，并移动指针到下一位置<br>4、重复步骤3直到某一指针达到序列末尾<br>5、将另一序列所剩下的所有元素直接复制到合并序列尾部  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.gif" alt="image"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">分类-------------------内部比较排序</div><div class="line">数据结构---------------数组</div><div class="line">最差时间复杂度---------O(nlogn)</div><div class="line">最优时间复杂度---------O(nlogn)</div><div class="line">平均时间复杂度---------O(nlogn)</div><div class="line">所需辅助空间-----------O(n)</div><div class="line">稳定性-----------------稳定</div><div class="line"></div><div class="line"></div><div class="line">//合并两个已排好序的数组A[left...mid]和A[mid+1...right]</div><div class="line">void Merge(int[] A, int left, int mid, int right)&#123;</div><div class="line">    int len = right-left+1;</div><div class="line">    int[] temp = new int[len];//辅助空间O(n)</div><div class="line">    int index=0;</div><div class="line">    int i=left;//i,j为两数组的起始位置</div><div class="line">    int j=mid+1;</div><div class="line">    while(i&lt;=mid &amp;&amp; j&lt;=right)&#123;</div><div class="line">        temp[index++] = A[i]&lt;=A[j] ? A[i++] : A[j++];//选择较小元素放入合并空间，并更新指针</div><div class="line">    &#125;</div><div class="line">    while(i&lt;=mid)</div><div class="line">        temp[index++]=A[i++];</div><div class="line">    while(j&lt;=right)</div><div class="line">        temp[index++]=A[j++];</div><div class="line">    for(int k=0; k&lt;len; k++)//将辅助序列复制回原数组</div><div class="line">        A[left++]=temp[k];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//递归实现的归并排序（自顶向下）</div><div class="line">void MergeSortRecursion(int[] A,int left, int right)&#123;</div><div class="line">    if(left==right)//当序列长度为1时，递归开始回溯，进行merge操作</div><div class="line">        return;</div><div class="line">    int mid=(left+right)/2;</div><div class="line">    MergeSortRecursion(A,left,mid);</div><div class="line">    MergeSortRecursion(A,mid+1,right);</div><div class="line">    Merge(A,left,mid,right);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//非递归（迭代）实现的归并排序（自底向上）</div><div class="line">void MergeSortInteration(int[] A, int len)&#123;</div><div class="line">    int left,mid,right;//子数组索引，A[left...mid]和A[mid+1...right]</div><div class="line">    for(int i=1; i&lt;len; i*=2)&#123;//子数组大小i初始化为1，每轮翻倍</div><div class="line">        left=0;</div><div class="line">        while(left+i &lt; len)&#123;//后一个数组存在（需要归并）</div><div class="line">            mid=left+i-1;</div><div class="line">            right = mid+i&lt;len ? mid+i : len-1;//后一个子数组大小可能不够</div><div class="line">            Merge(A,left,mid,right);</div><div class="line">            left=right+1;//前一个子数组索引向后移动</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="8、堆排序"><a href="#8、堆排序" class="headerlink" title="8、堆排序"></a>8、堆排序</h3><p>堆是一种近乎完全二叉树的结构，最大堆满足父结点的值总是大于它的孩子节点。<br>1、由输入的无序数组构造一个最大堆<br>2、把堆顶元素（最大值）和队尾元素互换<br>3、将堆的尺寸缩小1，从新的堆顶元素开始堆调整<br>4、重复步骤2~3，直到堆的尺寸为1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">分类-------------------内部比较排序</div><div class="line">数据结构---------------数组</div><div class="line">最差时间复杂度---------O(nlogn)</div><div class="line">最优时间复杂度---------O(nlogn)</div><div class="line">平均时间复杂度---------O(nlogn)</div><div class="line">所需辅助空间-----------O(1)</div><div class="line">稳定性-----------------不稳定</div><div class="line"></div><div class="line">void HeapSort(int[] A, int n)&#123;</div><div class="line">    int heap_size = BuildHeap(A, n);//建立一个最大堆</div><div class="line">    while(heap_size&gt;1)&#123;//堆元素个数大于1，未完成排序</div><div class="line">        swap(A,0,--heap_size);//将堆顶元素和堆的最后一个元素互换，并从堆中去除最后一个元素</div><div class="line">        Heapify(A,0,heap_size);//从新的堆顶元素开始向下进行堆调整</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//建堆</div><div class="line">int BuildHeap(int[] A, int n)&#123;</div><div class="line">    int heap_size=n;</div><div class="line">    //从每一个非叶子节点开始向下进行堆排序，以每个非叶子节点为根节点都形成最大堆</div><div class="line">    for(int i=heap_size/2 -1; i&gt;=0; i--)</div><div class="line">        Heapify(A, i, heap_size);</div><div class="line">    return heap_size;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//堆调整</div><div class="line">void Heapify(int[] A, int i, int size)&#123;//从A[i]向下进行堆调整</div><div class="line">    int left_child=i*2 + 1;//左孩子索引</div><div class="line">    int right_child=i*2 + 2;//右孩子索引</div><div class="line">    int max=i;//选出当前节点及左右孩子三者之间中的最大值</div><div class="line">    if(left_child&lt;size &amp;&amp; A[left_child]&gt;A[max])</div><div class="line">        max=left_child;</div><div class="line">    if(right_child&lt;size &amp;&amp; A[right_child]&gt;A[max])</div><div class="line">        max=right_child;</div><div class="line">    if(max != i)&#123;</div><div class="line">        swap(A, i, max);</div><div class="line">        Heapify(A, max, size);//递归调用，继续从当前节点向下进行堆调整</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="9、快速排序"><a href="#9、快速排序" class="headerlink" title="9、快速排序"></a>9、快速排序</h3><p>1、从序列中挑出一个元素，作为基准。<br>2、把所有比基准小的元素放在基准前面，所有比基准大的元素放在基准的后面，这个称为分区操作。<br>3.对每个分区递归的调用步骤1~2，递归的结束条件是序列的大小是0或是1，这时整体已经排序好了。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif" alt="image"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">分类-------------------内部比较排序</div><div class="line">数据结构---------------数组</div><div class="line">最差时间复杂度---------O(n^2)</div><div class="line">最优时间复杂度---------O(nlogn)</div><div class="line">平均时间复杂度---------O(nlogn)</div><div class="line">所需辅助空间-----------主要是递归造成的栈空间使用（用来保存left和right等局部变量），取决于递归树的深度，一般为O(logn)，最差为O(n)</div><div class="line">稳定性-----------------不稳定</div><div class="line"></div><div class="line"></div><div class="line">void QuickSort(int[] A, int left, int right)&#123;</div><div class="line">    if(left&gt;=right)</div><div class="line">        return;</div><div class="line">    int pivot_index = Partition(A, left, right);//基准的索引</div><div class="line">    QuickSort(A, left, pivot_index-1);</div><div class="line">    QuickSort(A, pivot_index+1, right);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//划分函数</div><div class="line">int Partition(int[] A, int left, int right)&#123;</div><div class="line">    int pivot=A[right];//每次以最后一个元素为基准</div><div class="line">    int tail=left-1;//tail为小于基准的子数组的最后一个元素的索引</div><div class="line">    for(int i=left; i&lt;right;i++)&#123;</div><div class="line">        if(A[i]&lt;pivot)//把小于基准的数字放到前一个子数组的末尾</div><div class="line">            swap(A, ++tail, i);</div><div class="line">    &#125;</div><div class="line">    swap(A, tail+1, right);//最后把基准放到前一个子数组的后边，剩下的子数组就是大于基准的子数组</div><div class="line">    return tail+1;//返回基准索引</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;各比较排序性能比较&quot;&gt;&lt;a href=&quot;#各比较排序性能比较&quot; class=&quot;headerlink&quot; title=&quot;各比较排序性能比较&quot;&gt;&lt;/a&gt;各比较排序性能比较&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://osrmzp0jr.bkt.clouddn.com
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Java实现二叉树的先序、中序、后序遍历</title>
    <link href="http://yoursite.com/2017/10/13/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%85%88%E5%BA%8F%E3%80%81%E4%B8%AD%E5%BA%8F%E3%80%81%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>http://yoursite.com/2017/10/13/二叉树的先序、中序、后序遍历/</id>
    <published>2017-10-13T13:06:00.000Z</published>
    <updated>2017-10-13T13:07:00.152Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先序遍历示意图："><a href="#先序遍历示意图：" class="headerlink" title="先序遍历示意图："></a>先序遍历示意图：</h3><p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86.jpg" alt="image">  </p>
<h3 id="中序遍历示意图："><a href="#中序遍历示意图：" class="headerlink" title="中序遍历示意图："></a>中序遍历示意图：</h3><p><img src="http://osrmzp0jr.bkt.clouddn.com/%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.jpg" alt="image">  </p>
<h3 id="后序遍历示意图："><a href="#后序遍历示意图：" class="headerlink" title="后序遍历示意图："></a>后序遍历示意图：</h3><p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86.jpg" alt="image">  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class Node &#123;  </div><div class="line">    private int data;  </div><div class="line">    private Node leftNode;  </div><div class="line">    private Node rightNode;  </div><div class="line">    public Node(int data, Node leftNode, Node rightNode)&#123;  </div><div class="line">        this.data = data;  </div><div class="line">        this.leftNode = leftNode;  </div><div class="line">        this.rightNode = rightNode;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    public int getData() &#123;  </div><div class="line">        return data;  </div><div class="line">    &#125;  </div><div class="line">    public void setData(int data) &#123;  </div><div class="line">        this.data = data;  </div><div class="line">    &#125;  </div><div class="line">    public Node getLeftNode() &#123;  </div><div class="line">        return leftNode;  </div><div class="line">    &#125;  </div><div class="line">    public void setLeftNode(Node leftNode) &#123;  </div><div class="line">        this.leftNode = leftNode;  </div><div class="line">    &#125;  </div><div class="line">    public Node getRightNode() &#123;  </div><div class="line">        return rightNode;  </div><div class="line">    &#125;  </div><div class="line">    public void setRightNode(Node rightNode) &#123;  </div><div class="line">        this.rightNode = rightNode;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="一、递归遍历"><a href="#一、递归遍历" class="headerlink" title="一、递归遍历"></a>一、递归遍历</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">//先序遍历</div><div class="line">public void theFirstTraversal(Node root)&#123;</div><div class="line">    printNode(root);</div><div class="line">    if(root.getLeftNode() != null)&#123;</div><div class="line">        theFirstTraversal(root.getLeftNode());</div><div class="line">    &#125;</div><div class="line">    if(root.getRightNode() != null)&#123;</div><div class="line">        theFirstTraversal(root.getRightNode());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//中序遍历</div><div class="line">public void theInOrderTraversal(Node root) &#123;    </div><div class="line">    if (root.getLeftNode() != null) &#123;  </div><div class="line">        theInOrderTraversal(root.getLeftNode());  </div><div class="line">    &#125;  </div><div class="line">    printNode(root);  </div><div class="line">    if (root.getRightNode() != null) &#123;  </div><div class="line">        theInOrderTraversal(root.getRightNode());  </div><div class="line">    &#125;  </div><div class="line">&#125;</div><div class="line">    </div><div class="line">//后序遍历  </div><div class="line">public void thePostOrderTraversal(Node root) &#123;    </div><div class="line">    if (root.getLeftNode() != null) &#123;  </div><div class="line">        thePostOrderTraversal(root.getLeftNode());  </div><div class="line">    &#125;  </div><div class="line">    if(root.getRightNode() != null) &#123;  </div><div class="line">        thePostOrderTraversal(root.getRightNode());  </div><div class="line">    &#125;  </div><div class="line">    printNode(root);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="非递归遍历"><a href="#非递归遍历" class="headerlink" title="非递归遍历"></a>非递归遍历</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">//先序遍历</div><div class="line">public void theFirstTraversal_Stack(Node root)&#123;</div><div class="line">    Stack&lt;Node&gt; stack = new Stack&lt;Node&gt;();</div><div class="line">    Node node = root;</div><div class="line">    while(node != null || stack.size() &gt; 0)&#123;</div><div class="line">        if(node != null)&#123;</div><div class="line">            printNode(node);</div><div class="line">            stack.push(node);</div><div class="line">            node = node.getLeftNode();</div><div class="line">        &#125;else&#123;</div><div class="line">            node = stack.pop();</div><div class="line">            node = node.getRightNode();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//中序遍历</div><div class="line">public void theInOrderTraversal_Stack(Node root) &#123;</div><div class="line">    Stack&lt;Node&gt; stack = new Stack&lt;Node&gt;();</div><div class="line">    Node node = root;</div><div class="line">    while(node != null || stack.size() &gt; 0)&#123;</div><div class="line">        if(node != null)&#123;</div><div class="line">            stack.push(node);</div><div class="line">            node = node.getLeftNode();</div><div class="line">        &#125;else&#123;</div><div class="line">            node = stack.pop();</div><div class="line">            printNode(node);</div><div class="line">            node = node.getRightNode();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//后序遍历  </div><div class="line">public void thePostOrderTraversal_Stack(Node root) &#123;</div><div class="line">    Stack&lt;Node&gt; stack = new Stack&lt;Node&gt;();</div><div class="line">    Stack&lt;Node&gt; output = new Stack&lt;Node&gt;();//用于存储逆后序遍历的结果</div><div class="line">    Node node = root;</div><div class="line">    while(node != null || stack.size() &gt; 0)&#123;</div><div class="line">        if(node != null)&#123;</div><div class="line">            stack.push(node);</div><div class="line">            output.push(node);</div><div class="line">            node = node.getRightNode();</div><div class="line">        &#125;else&#123;</div><div class="line">            node = stack.pop();</div><div class="line">            node = node.getLeftNode();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    while(output.size() &gt; 0)&#123;</div><div class="line">        printNode(output.pop());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;先序遍历示意图：&quot;&gt;&lt;a href=&quot;#先序遍历示意图：&quot; class=&quot;headerlink&quot; title=&quot;先序遍历示意图：&quot;&gt;&lt;/a&gt;先序遍历示意图：&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://osrmzp0jr.bkt.clouddn.com/%E5
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>29、数组中出现超过一半的数字</title>
    <link href="http://yoursite.com/2017/10/13/29%E3%80%81%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2017/10/13/29、数组中出现超过一半的数字/</id>
    <published>2017-10-13T13:05:00.000Z</published>
    <updated>2017-10-13T13:05:11.211Z</updated>
    
    <content type="html"><![CDATA[<p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。  </p>
<h2 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h2><p>在遍历数组时，保存两个值：一个是数组中的一个数字，还有一个是次数。当我们遍历到下一个数字的时候，如果下一个数字和我们之前保存的相同，则次数加一，不同次数就减一。若次数为0，我们需要保存下一个数字，次数记为1。由于我们要找的数字出现次数比其他所有数字出现的次数之和还多，那么要找的数字肯定是最后一次把次数设为1时对应的数字。  </p>
<h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">    public int MoreThanHalfNum_Solution(int [] array) &#123;</div><div class="line">        int result=array[0];</div><div class="line">        int count=1;</div><div class="line">        for(int i=1;i&lt;array.length;i++)&#123;</div><div class="line">            if(count==0)&#123;</div><div class="line">                result=array[i];</div><div class="line">                count=1;</div><div class="line">            &#125;else if(array[i]==result)&#123;</div><div class="line">                count++;</div><div class="line">            &#125;else&#123;</div><div class="line">                count--;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if(!CheckMoreThanHalf(array,array.length,result))</div><div class="line">            result=0;</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">    //检验最后一次把次数设为1时对应的数字出现的次数是够满足超过一半的数字。</div><div class="line">    boolean CheckMoreThanHalf(int[] array,int length,int result)&#123;</div><div class="line">        boolean a=true;</div><div class="line">        int times=0;</div><div class="line">        for(int i=0;i&lt;length;i++)&#123;</div><div class="line">            if(array[i]==result)</div><div class="line">                times++;</div><div class="line">        &#125;</div><div class="line">        if(times*2&lt;=length)</div><div class="line">            a=false;</div><div class="line">        return a;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。  &lt;/p&gt;
&lt;h2 id=&quot;一、思路&quot;&gt;&lt;a href=&quot;#一
    
    </summary>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法，剑指offer" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%EF%BC%8C%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>30、最小的k个数</title>
    <link href="http://yoursite.com/2017/10/13/30%E3%80%81%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/"/>
    <id>http://yoursite.com/2017/10/13/30、最小的k个数/</id>
    <published>2017-10-13T12:08:00.000Z</published>
    <updated>2017-10-13T13:05:15.129Z</updated>
    
    <content type="html"><![CDATA[<p>输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4。  </p>
<h2 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h2><p>创建一个大小为k的最大堆，先依次放入k个数，找出k个数中的最大值，然后每次拿待插入的数和最大值比较。如果待插入的数比当前已知的最大值小，就用这个数替换最大值；若比最大值大，就抛弃该数。<br>堆满之后，要做三件事：一是找出最大数；二是可能需要删除最大数；三是可能要插入新数字，我们可以在O(logk)时间内完成这三步操作。对N个数字而言，总时间复杂度为O(nlogk)。  </p>
<h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.PriorityQueue;</div><div class="line">import java.util.Comparator;</div><div class="line">public class Solution &#123;</div><div class="line">    public ArrayList&lt;Integer&gt; GetLeastNumbers_Solution(int [] input, int k) &#123;</div><div class="line">        ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();</div><div class="line">        int length=input.length;</div><div class="line">        if(k&gt;length || k&lt;=0)</div><div class="line">            return list;</div><div class="line">        </div><div class="line">        PriorityQueue&lt;Integer&gt; maxHeap = new PriorityQueue&lt;Integer&gt;(k , new Comparator&lt;Integer&gt;()&#123;//PriorityQueue是基于最小堆的</div><div class="line">            @Override</div><div class="line">            public int compare(Integer o1,Integer o2)&#123;</div><div class="line">                return o2.compareTo(o1);//变为按逆序排的最大堆，原为按自然顺序的最小堆</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        for(int i=0;i&lt;length;i++)&#123;</div><div class="line">            if(maxHeap.size() != k)&#123;//先填满大小为k的最大堆</div><div class="line">                maxHeap.offer(input[i]);</div><div class="line">            &#125;else if(maxHeap.peek() &gt; input[i])&#123;//如果比最大堆中最大的数小，则替换之。</div><div class="line">                maxHeap.poll();</div><div class="line">                maxHeap.offer(input[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        for(Integer integer : maxHeap)&#123;</div><div class="line">            list.add(integer);</div><div class="line">        &#125;</div><div class="line">        return list;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4。  &lt;/p&gt;
&lt;h2 id=&quot;一、思路&quot;&gt;&lt;a href=&quot;#一、思路&quot; class=&quot;headerlink&quot; title=&quot;一、思路&quot;&gt;&lt;/a&gt;一、思路
    
    </summary>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法，剑指offer" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%EF%BC%8C%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>Java实现二叉排序树的插入、查找和删除</title>
    <link href="http://yoursite.com/2017/10/12/Java%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%E7%9A%84%E6%8F%92%E5%85%A5%E3%80%81%E6%9F%A5%E6%89%BE%E5%92%8C%E5%88%A0%E9%99%A4/"/>
    <id>http://yoursite.com/2017/10/12/Java实现二叉排序树的插入、查找和删除/</id>
    <published>2017-10-12T07:39:00.000Z</published>
    <updated>2017-10-12T07:40:12.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h2><p>又叫二叉查找树。<br>1.可以使一颗空树<br>2.若左子树不为空，则左子树上所有节点的值均小于根节点的值<br>3.若右子树不为空，则右子树上所有节点的值均大于根节点的值<br>4.左右子树也分别为二叉排序树  </p>
<h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p><strong>查找性能</strong>：含有n个节点的二叉排序树的平均查找长度和树的形态有关。<br>（最坏情况）当先后插入的关键字有序时，构成的二叉排序树蜕变为单枝树，查找性能为O(n)<br>（最好情况）二叉排序的形态和折半查找的判定树相同，平均查找长度和log2(n)成正比  </p>
<p><strong>插入、删除性能</strong>：插入、删除操作的时间复杂度都是O(logn)级的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">//二叉树节点定义</div><div class="line">public class Node&#123;</div><div class="line">    private int value;</div><div class="line">    private Node left;</div><div class="line">    private Node right;</div><div class="line">    </div><div class="line">    public Node(Node left, Node right, int value)&#123;</div><div class="line">        this.left = left;</div><div class="line">        this.right=right;</div><div class="line">        this.value = value;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    set,get...</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class BinarySortTree&#123;</div><div class="line">    </div><div class="line">    private Node root=null;</div><div class="line">    </div><div class="line">    //查找二叉排序树中是否有key值</div><div class="line">    public boolean searchBST(int key)&#123;</div><div class="line">        Node current = root;</div><div class="line">        while(current != null)&#123;</div><div class="line">            if(key == current.getValue())</div><div class="line">                return true;</div><div class="line">            else(key &lt; current.getValue())</div><div class="line">                current=current.getLeft();</div><div class="line">            else</div><div class="line">                current=current.getRight();</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //向二叉排序树中插入节点</div><div class="line">    public void insertBST(int key)&#123;</div><div class="line">        Node p = root;</div><div class="line">        //记录查找节点的父节点</div><div class="line">        Node prev = null;</div><div class="line">        //一直查找下去，一直到满足条件的叶子节点</div><div class="line">        while(p != null)&#123;</div><div class="line">            prev=p;</div><div class="line">            if(key &lt; p.getValue())</div><div class="line">                p = p.getLeft();</div><div class="line">            else if(key &gt; p.getValue())</div><div class="line">                p = p.getRight();</div><div class="line">            else</div><div class="line">                return;//找到了相同节点就返回</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //prev为要安放节点的父结点，根据key的大小，判断放入prev的左右节点</div><div class="line">        if(root == null)</div><div class="line">            root = new Node(key);</div><div class="line">        else if(key &lt; prev.getValue())</div><div class="line">            prev.setLeft(new Node(key));</div><div class="line">        else</div><div class="line">            prev.setRight(new Node(key));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //删除二叉排序树中的节点</div><div class="line">    分为三种情况：</div><div class="line">    (1)要删除的节点p是叶子节点，删除置空即可</div><div class="line">    (2)p只有左子树或右子树，直接让左子树/右子树代替p</div><div class="line">    (3)p既有左子树又有右子树，用p左子树中最大的那个值（最右端s）代替p，删除s，重接其左子树</div><div class="line">    public boolean delete(Node node)&#123;</div><div class="line">        Node temp = null;</div><div class="line">        //右子树为空，重接它的左子树；如果是叶子节点，在这也被置为空</div><div class="line">        if(node.getRight()==null)&#123;</div><div class="line">            temp = node;</div><div class="line">            node = node.getLeft();</div><div class="line">        &#125;</div><div class="line">        //左子树为空，重接它的右子树</div><div class="line">        else if(node.getLeft()==null)&#123;</div><div class="line">            temp = node;</div><div class="line">            node = node.getRight();</div><div class="line">        &#125;</div><div class="line">        //左右子树都不为空</div><div class="line">        else&#123;</div><div class="line">            temp = node;</div><div class="line">            Node s = node;</div><div class="line">            //转向左子树，然后向右走到尽头</div><div class="line">            s=s.getLeft();//temp是s的父结点</div><div class="line">            while(s.getRight() != null)&#123;</div><div class="line">                temp = s;</div><div class="line">                s = s.getRight();</div><div class="line">            &#125;</div><div class="line">            node.setValue(s.getValue());//将node的值设为左子树最右侧s的值</div><div class="line">            if(temp != node)&#123;</div><div class="line">                temp.setRight(s.getLeft());//见书p326</div><div class="line">            &#125;</div><div class="line">            else&#123;</div><div class="line">                temp.setLeft(s.getLeft());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;二叉排序树&quot;&gt;&lt;a href=&quot;#二叉排序树&quot; class=&quot;headerlink&quot; title=&quot;二叉排序树&quot;&gt;&lt;/a&gt;二叉排序树&lt;/h2&gt;&lt;p&gt;又叫二叉查找树。&lt;br&gt;1.可以使一颗空树&lt;br&gt;2.若左子树不为空，则左子树上所有节点的值均小于根节点的值&lt;br&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>静态代码块、构造代码块、构造函数及类初始化顺序</title>
    <link href="http://yoursite.com/2017/10/12/%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E3%80%81%E6%9E%84%E9%80%A0%E4%BB%A3%E7%A0%81%E5%9D%97%E3%80%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%8F%8A%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/10/12/静态代码块、构造代码块、构造函数及类初始化顺序/</id>
    <published>2017-10-12T07:35:00.000Z</published>
    <updated>2017-10-12T07:35:55.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>静态代码块：用static声明，jvm加载类时执行，仅执行一次。<br>构造代码块：类中直接用{}定义，每一次创建对象时执行。<br>执行顺序优先级：<strong>静态块-&gt;main()-&gt;构造块-&gt;构造函数</strong>。  </p>
<h2 id="二、详解"><a href="#二、详解" class="headerlink" title="二、详解"></a>二、详解</h2><h3 id="1、构造函数"><a href="#1、构造函数" class="headerlink" title="1、构造函数"></a>1、构造函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public Hello()&#123;//构造函数</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.对象一建立就会调用与之相应的构造函数，也就是说，不建立对象，构造函数是不会运行的。<br>2.构造函数的作用是用于给对象初始化。<br>3.一个对象建立，构造函数只运行一次。  </p>
<h3 id="2、构造代码块"><a href="#2、构造代码块" class="headerlink" title="2、构造代码块"></a>2、构造代码块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;//构造代码块</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.构造代码块的作用是给对象进行初始化。<br>2.对象一建立就运行构造代码块了，而且优先于构造函数。有对象建立，才会运行构造代码块，类是不能调用构造代码块的。<br>3.构造代码块和构造函数的区别：<strong>构造代码块是给所有对象进行统一初始化，而构造函数是给对应的对象初始化。</strong>因为构造函数可以有多个，运行哪个构造函数就会建立什么样的对象，但无论建立哪个对象，都会执行相同的构造代码块。也就是说，构造代码块中定义的是不同对象共性的初始化内容。  </p>
<h3 id="3、静态代码块"><a href="#3、静态代码块" class="headerlink" title="3、静态代码块"></a>3、静态代码块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">static&#123;//静态代码块</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.<strong>它随着类的加载而执行，只执行一次，并且优先于主函数</strong>。具体说，静态代码块是由类调用的，类调用时，先执行静态代码块，然后再执行主函数。<br>2.静态代码块其实是给类初始化的，而构造代码块是给对象初始化的。<br>3.静态代码块中的变量是局部变量，与普通函数中的局部变量没有区别。<br>4.一个类中可以有多个静态代码块。  </p>
<h2 id="三、类初始化顺序"><a href="#三、类初始化顺序" class="headerlink" title="三、类初始化顺序"></a>三、类初始化顺序</h2><p>&emsp;其中，<strong>静态变量、静态初始化块，变量、初始化块（构造代码块）的初始化顺序取决于它们在类中出现的先后顺序。</strong><br>首先，访问SubClass.main()，这是一个static方法，于是装载器会寻找已经编译的SubClass.class文件。在装载过程中，如果注意到有基类（extends），会装载基类。不管创不创建基类对象，这个过程都会发生。之后是正常的初始化顺序：  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F.png" alt="image"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">class Parent&#123;</div><div class="line">    public static String p_StaticField=&quot;父类--静态变量&quot;;</div><div class="line">    </div><div class="line">    public String p_Field=&quot;父类--变量&quot;;</div><div class="line">    protected int i=9;</div><div class="line">    protected int j=0;</div><div class="line">    </div><div class="line">    static&#123;</div><div class="line">        System.out.println(p_StaticField);</div><div class="line">        System.out.println(&quot;父类--静态初始化块&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    &#123;</div><div class="line">        System.out.println(p_Field);</div><div class="line">        System.out.println(&quot;父类--初始化块&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public Parent()&#123;</div><div class="line">        System.out.println(&quot;父类--构造器&quot;);</div><div class="line">        System.out.println(&quot;i=&quot; + i+ &quot;,j=&quot; + j);</div><div class="line">        j=20;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class SubClass extends Parent&#123;</div><div class="line">    public static String s_StaticField=&quot;子类--静态变量&quot;;</div><div class="line">    </div><div class="line">    public String s_Field=&quot;子类--变量&quot;;</div><div class="line">    </div><div class="line">    static&#123;</div><div class="line">        System.out.println(s_StaticField);</div><div class="line">        System.out.println(&quot;子类--静态初始化块&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    &#123;</div><div class="line">        System.out.println(s_Field);</div><div class="line">        System.out.println(&quot;子类--初始化块&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public SubClass()&#123;</div><div class="line">        System.out.println(&quot;子类--构造器&quot;);</div><div class="line">        System.out.println(&quot;i=&quot; + i+ &quot;,j=&quot; + j);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        System.out.println(&quot;子类main方法&quot;);</div><div class="line">        new SubClass();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">运行结果：  </div><div class="line">父类--静态变量  </div><div class="line">父类--静态初始化块  </div><div class="line">子类--静态变量  </div><div class="line">子类--静态初始化块  </div><div class="line">子类main方法  </div><div class="line">父类--变量  </div><div class="line">父类--初始化块  </div><div class="line">父类--构造器  </div><div class="line">i=9, j=0  </div><div class="line">子类--变量  </div><div class="line">子类--初始化块  </div><div class="line">子类--构造器  </div><div class="line">i=9,j=20</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;静态代码块：用static声明，jvm加载类时执行，仅执行一次。&lt;br&gt;构造代码块：类中直接用{}定义，每一次创建对象时执行
    
    </summary>
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>字符串、基本数据类型等在堆、栈、常量池中的存储</title>
    <link href="http://yoursite.com/2017/10/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%AD%89%E5%9C%A8%E5%A0%86%E3%80%81%E6%A0%88%E3%80%81%E5%B8%B8%E9%87%8F%E6%B1%A0%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/"/>
    <id>http://yoursite.com/2017/10/11/字符串、基本数据类型等在堆、栈、常量池中的存储/</id>
    <published>2017-10-11T12:56:00.000Z</published>
    <updated>2017-10-11T12:56:13.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、对于字符串"><a href="#一、对于字符串" class="headerlink" title="一、对于字符串"></a>一、对于字符串</h1><p>字符串的对象引用都是存储在栈中的。如果是编译期已经创建好的（直接用双引号定义的），对象存储在常量池中；如果是运行期才能确定的（new出来的），对象存储在堆中。对于equals相等的字符串，常量池中只有一份，堆中可以有多份。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String s1=&quot;china&quot;;</div><div class="line">String s2=&quot;china&quot;;</div><div class="line">String ss1=new String(&quot;china&quot;);</div><div class="line">String ss2=new String(&quot;china&quot;);</div></pre></td></tr></table></figure></p>
<p>通过new产生一个字符串“china”时，会先去常量池中查找是否已经有了“china”，如果没有，就在常量池中创建一个此字符串对象，然后在堆中再创建一个常量池中此“china”对象的拷贝对象。  </p>
<h1 id="二、对于基础类型的变量和常量"><a href="#二、对于基础类型的变量和常量" class="headerlink" title="二、对于基础类型的变量和常量"></a>二、对于基础类型的变量和常量</h1><p>局部变量（包括形式参数）：数据存在于栈内存中，栈内存中的局部变量随着方法的消失而消失。<br>成员变量：存储在堆中的对象里面，由垃圾收集器负责回收。<br>常量、静态变量：存储在方法区中（常量池）。  </p>
<h1 id="三、Java中的两种数据类型"><a href="#三、Java中的两种数据类型" class="headerlink" title="三、Java中的两种数据类型"></a>三、Java中的两种数据类型</h1><h2 id="1、八种基本类型"><a href="#1、八种基本类型" class="headerlink" title="1、八种基本类型"></a>1、八种基本类型</h2><p>byte,short,int,long,char,double,float,boolean。如函数中的int a=3，a是一个指向3这个字面值的引用。存在于栈中，数据可以共享。同时定义int a=3和int b=3，a和b会同时指向3。<br>字面值的引用和类对象引用不同。两类对象引用同时指向一个对象，若一个对象引用变量修改了这个对象的内部状态，那么对另一个对象引用也即刻反映出变化，但字面值引用不会。  </p>
<h2 id="2、包装类数据"><a href="#2、包装类数据" class="headerlink" title="2、包装类数据"></a>2、包装类数据</h2><p>Integer,Double等。这些数据全部存在于堆中，Java中用new语句显式的告诉编译器运行时根据需要动态创建，灵活但更占用时间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args)&#123;</div><div class="line">    int a1=1;</div><div class="line">    int b1=1;</div><div class="line">    int c1=2;</div><div class="line">    int d1=a1+b1;</div><div class="line">    </div><div class="line">    Integer a=1;</div><div class="line">    Integer b=2;</div><div class="line">    Integer c=3;</div><div class="line">    Integer d=3</div><div class="line">    </div><div class="line">    Integer e=321;</div><div class="line">    Integer f=321;</div><div class="line">    </div><div class="line">    System.out.println(a1==b1);//true</div><div class="line">    System.out.println(c1==d1);//true</div><div class="line">    System.out.println(c==(a+b));//true</div><div class="line">    System.out.println(c==d);//true</div><div class="line">    System.out.println(c==d);//false</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在自动装箱时（int-&gt;Integer时），当int值在-128~127时，返回的不是一个新New出来的Integer对象，而是一个已经缓存在堆中的Integer对象；若不在范围，则返回一个新new出来的Integer对象。<br>System.out.println(c1==d1);//true：先创建一个c1的引用，查找有没有字面值为2的地址，没找到，就开辟一个存放2这个字面值的地址，将c1指向2的地址。d1为两个字面值相加也为2，由于在栈中已经有2这个字面量的地址，因此将d1直接指向2的地址，所以c1和d1的指向相同。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、对于字符串&quot;&gt;&lt;a href=&quot;#一、对于字符串&quot; class=&quot;headerlink&quot; title=&quot;一、对于字符串&quot;&gt;&lt;/a&gt;一、对于字符串&lt;/h1&gt;&lt;p&gt;字符串的对象引用都是存储在栈中的。如果是编译期已经创建好的（直接用双引号定义的），对象存储在常量池中
    
    </summary>
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java对象的创建过程</title>
    <link href="http://yoursite.com/2017/10/11/Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/10/11/Java对象的创建过程/</id>
    <published>2017-10-11T09:35:00.000Z</published>
    <updated>2017-10-11T09:35:48.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、对象的创建"><a href="#一、对象的创建" class="headerlink" title="一、对象的创建"></a>一、对象的创建</h1><h2 id="对象创建有以下几个步骤："><a href="#对象创建有以下几个步骤：" class="headerlink" title="对象创建有以下几个步骤："></a>对象创建有以下几个步骤：</h2><p>1.虚拟机遇到一条new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，必须先执行相应的类加载过程。<br>2.在类加载检查通过后，接下来虚拟机为新生对象分配内存。<br>3.内存分配后，虚拟机将分配到的内存空间都初始化为零值（不包括对象头）。<br>4.执行<init>方法，把对象按照程序员的意愿进行初始化。<br>5.将对象在堆上分配的内存地址赋给实例变量。  </init></p>
<h2 id="初始化顺序："><a href="#初始化顺序：" class="headerlink" title="初始化顺序："></a>初始化顺序：</h2><p>1、先父类，后子类<br>2、先属性，再构造代码块，最后构造函数<br>3、先静态，后非静态<br>4、同一类型，按代码顺序先后执行  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B.png" alt="image">  </p>
<h1 id="二、对象的内存布局"><a href="#二、对象的内存布局" class="headerlink" title="二、对象的内存布局"></a>二、对象的内存布局</h1><p>对象在内存中存储的布局可以分为三块区域：<strong>对象头、实例数据和对齐填充</strong>。  </p>
<h2 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h2><p>包括两部分，第一部分用于存储对象自身的运行时数据，如哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID等。另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。  </p>
<h2 id="实例数据"><a href="#实例数据" class="headerlink" title="实例数据"></a>实例数据</h2><p>实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。无论是从父类继承下来的，还是子类中定义的，都需要记录下来（包括private的）。  </p>
<h2 id="对齐填充"><a href="#对齐填充" class="headerlink" title="对齐填充"></a>对齐填充</h2><p>非必要存在，仅仅起着占位符的作用。  </p>
<h1 id="三、对象的访问定位"><a href="#三、对象的访问定位" class="headerlink" title="三、对象的访问定位"></a>三、对象的访问定位</h1><p>建立对象是为了使用对象，java程序通过栈上的reference数据来操作堆上的具体对象。主流的访问方式主要有<strong>使用句柄</strong>和<strong>直接指针</strong>两种。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D.jpg" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、对象的创建&quot;&gt;&lt;a href=&quot;#一、对象的创建&quot; class=&quot;headerlink&quot; title=&quot;一、对象的创建&quot;&gt;&lt;/a&gt;一、对象的创建&lt;/h1&gt;&lt;h2 id=&quot;对象创建有以下几个步骤：&quot;&gt;&lt;a href=&quot;#对象创建有以下几个步骤：&quot; class=&quot;
    
    </summary>
    
      <category term="深入理解Java虚拟机" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java虚拟机" scheme="http://yoursite.com/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>深入java虚拟机之垃圾收集器</title>
    <link href="http://yoursite.com/2017/10/11/JVM%E4%B9%8B%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    <id>http://yoursite.com/2017/10/11/JVM之垃圾收集器/</id>
    <published>2017-10-11T02:33:00.000Z</published>
    <updated>2017-10-11T02:40:33.526Z</updated>
    
    <content type="html"><![CDATA[<h3 id="七种垃圾收集器"><a href="#七种垃圾收集器" class="headerlink" title="七种垃圾收集器"></a>七种垃圾收集器</h3><p>1、Serial（串行GC）-复制<br>2、ParNew（并行GC）-复制<br>3、Parallel Scavenge（并行回收GC）-复制<br>4、Serial Old(MSC)（串行GC）-标记-整理<br>5、CMS（并发GC）-标记-清除<br>6、Parallel Old（并行GC）-标记-整理<br>7、G1（jdk1.7才正式商用）<br>其中，1~3用于年轻代垃圾回收（minor GC），4~6用于老年代垃圾回收（full GC），G1独立完成“分代垃圾回收”。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.jpg" alt="image">  </p>
<h3 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h3><p><strong>并行</strong>：多条垃圾回收线程同时操作<br><strong>并发</strong>：垃圾回收线程和用户线程一起操作，但不一定是并行的，可能交替执行。  </p>
<h3 id="常用的五种组合"><a href="#常用的五种组合" class="headerlink" title="常用的五种组合"></a>常用的五种组合</h3><p>1、Serial/Serial Old<br>2、ParNew/Serial Old，与上面相比，只是比年轻代多了多线程垃圾回收而已<br>3、ParNew/CMS，当下比较高校的组合<br>4、Parallel Scavenge/Parallel Old，自动管理的组合<br>5、G1，最先进的收集器，需要jdk1.7update14以上  </p>
<h2 id="一、新生代垃圾收集器"><a href="#一、新生代垃圾收集器" class="headerlink" title="一、新生代垃圾收集器"></a>一、新生代垃圾收集器</h2><h3 id="1、Serial收集器"><a href="#1、Serial收集器" class="headerlink" title="1、Serial收集器"></a>1、Serial收集器</h3><p><img src="http://osrmzp0jr.bkt.clouddn.com/Serial%E6%94%B6%E9%9B%86%E5%99%A8.png" alt="image">  </p>
<p>是最基础、最古老的收集器，是一个单线程的收集器，是Client模式下的默认收集器。<br><strong>优点</strong>：简单高效（与其他收集器的单线程比），对于限定单个CPU的环境下，Serial收集器由于没有线程交互的开销，专心做垃圾收集可以获得最高的单线程收集效率。<br><strong>缺点</strong>：是单线程处理，并且会stop the world，即在它进行垃圾收集时，必须暂停其他所有的工作线程，这对很多应用来说难以接受的。<br><strong>应用</strong>：Serial收集器对于运行在Client模式下的虚拟机来说是一个很好的选择。  </p>
<h3 id="2、ParNew收集器"><a href="#2、ParNew收集器" class="headerlink" title="2、ParNew收集器"></a>2、ParNew收集器</h3><p><img src="http://osrmzp0jr.bkt.clouddn.com/parnew.png" alt="image">  </p>
<p>其实就是Serial收集器的多线程版本，除了使用多条线程进行垃圾收集之外，其他都与Serial完全一样。<br><strong>特点</strong>：<br>1.是并行收集器<br>2.是server模式下的首选收集器<br>3.可以和CMS收集器相配合，但是Parallel Scavenge与CMS是无法配合的<br>4.使用复制算法进行垃圾回收  </p>
<h3 id="3、Parallel-Scavenge收集器"><a href="#3、Parallel-Scavenge收集器" class="headerlink" title="3、Parallel Scavenge收集器"></a>3、Parallel Scavenge收集器</h3><p><img src="http://osrmzp0jr.bkt.clouddn.com/Parallel%20Scavenge.png" alt="image">  </p>
<p>&emsp;Parallel Scavenge的关注点和其他收集器不同，<strong>CMS等收集器的关注点是尽可能的缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge的目的是达到一个可控制的吞吐量</strong>。<br>吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)<br>&emsp;停顿时间越短就越适合需要与用户交互的程序，良好的响应速度可以提升用户体验；而<strong>高吞吐量则可以高效率的利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</strong>  </p>
<h2 id="二、老年代垃圾收集器"><a href="#二、老年代垃圾收集器" class="headerlink" title="二、老年代垃圾收集器"></a>二、老年代垃圾收集器</h2><h3 id="1、Serial-Old收集器"><a href="#1、Serial-Old收集器" class="headerlink" title="1、Serial Old收集器"></a>1、Serial Old收集器</h3><p>是Serial收集器的老年代版本。<br><strong>特点</strong>：<br>1.是一个单线程收集器<br>2.使用标记-整理算法<br>3.主要在Client模式下使用<br>&emsp;在Server模式下，主要有两个用途：一个是在jdk1.5前与Parallel Scavenge配合使用，还有一个是作为CMS的后备预案，在发生Concurrent Mode Failure时使用。  </p>
<h3 id="2、Parallel-Old收集器"><a href="#2、Parallel-Old收集器" class="headerlink" title="2、Parallel Old收集器"></a>2、Parallel Old收集器</h3><p>是Parallel Scavenge老年代版本。<br><strong>特点</strong>：<br>1.多线程<br>2.标记-整理算法<br>3.jdk1.6之后提供<br><strong>作用</strong>：在Parallel Old之前，如果新生代选择了Parallel Scavenge，那么老年代只能选择Serial Old，由于Serial Old的拖累，使用整体性能不一定比ParNew/CMS高。直到有了Parallel Old，“吞吐量优先”菜真正有了名副其实的组合。  </p>
<h3 id="3、CMS（Concurrent-Mark-Sweep）收集器"><a href="#3、CMS（Concurrent-Mark-Sweep）收集器" class="headerlink" title="3、CMS（Concurrent Mark Sweep）收集器"></a>3、CMS（Concurrent Mark Sweep）收集器</h3><p><img src="http://osrmzp0jr.bkt.clouddn.com/CMS.png" alt="image">  </p>
<p><strong>是一种追求回收停顿时间最短的收集器。</strong>  是基于“标记-清除”算法实现的。<br><strong>分为四个步骤</strong>：<br><strong>1.初始标记</strong>：仅仅是标记一下GC Roots能直接关联到的对象，速度很快<br><strong>2.并发标记</strong>：进行GC Roots的追踪过程<br><strong>3.重新标记</strong>：为了修正并发标记期间由于用户程序继续运作而导致标记产生变动的那一部分对象的标示记录<br><strong>4.标记清除</strong><br>&emsp;其中，初始标记和重新标记仍然需要“Stop the world”，但是由于整个过程中最耗时的并发标记和并发清除过程是可以与用户线程一起工作的，所以从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。<br><strong>优点</strong>：并发收集，低停顿<br><strong>缺点</strong>：<br>1.对cpu资源非常敏感<br>2.无法处理浮动垃圾，当CMS运行期间预留的内存无法满足程序需要，会出现“Concurrent Mode Failure”<br>3.标记-清除算法，会产生大量的空间碎片<br>&emsp;默认条件下，当老年代使用68%即触发GC，1.6中已提高为92%。  </p>
<h2 id="三、通用收集器G1（Garbage-First）"><a href="#三、通用收集器G1（Garbage-First）" class="headerlink" title="三、通用收集器G1（Garbage-First）"></a>三、通用收集器G1（Garbage-First）</h2><p><img src="http://osrmzp0jr.bkt.clouddn.com/G1.png" alt="image">  </p>
<p>1.7u14后正式提供商用G1，以前都是测试用的。G1是一款面向服务端应用的垃圾收集器。<br><strong>特点</strong>：<br>1.并行与并发<br>2.分代收集<br>3.空间整合：基于“标记-整理”，不会产生内存空间碎片<br>4.可预测的停顿：能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。<br>&emsp;G1将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留了新生代和老年代的概念，但是他们并不是物理隔离的了，他们都是一部分Region（不需要连续）的集合。G1跟踪各个Region里面垃圾堆积的价值大小，在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region，这也就是Garbage-First的由来。<br><strong>难题</strong>：对象可能在不同的Region中引用。<br><strong>解决方法</strong>：G1通过Remember Set来避免进行全堆扫描。G1中每个Region都有一个对应的Remember Set，一旦发现一个对象引用了另一个Region的对象，就通过CardTable把相关引用信息记录到被引用对象所属的Region的Remember Set中。当进行GC时，在GC根节点的枚举范围中加入Remember Set，就可以保证不对全堆扫描也不会有遗漏。<br><strong>主要有以下几个步骤</strong>：<br><strong>1.初始标记</strong>：标记一下GC Roots能直接关联到的对象，并修改TAMS的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象<br><strong>2.并发标记</strong>：从GC Roots进行可达性分析，找出存活对象<br><strong>3.最终标记</strong>：为了修正并发标记期间由于用户程序继续运作而导致标记产生变动的那一部分对象的标示记录<br><strong>4.筛选回收</strong>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;七种垃圾收集器&quot;&gt;&lt;a href=&quot;#七种垃圾收集器&quot; class=&quot;headerlink&quot; title=&quot;七种垃圾收集器&quot;&gt;&lt;/a&gt;七种垃圾收集器&lt;/h3&gt;&lt;p&gt;1、Serial（串行GC）-复制&lt;br&gt;2、ParNew（并行GC）-复制&lt;br&gt;3、Parall
    
    </summary>
    
      <category term="深入理解Java虚拟机" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java虚拟机" scheme="http://yoursite.com/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>深入java虚拟机之垃圾回收算法</title>
    <link href="http://yoursite.com/2017/10/10/JVM%E4%B9%8B%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/10/10/JVM之垃圾回收算法/</id>
    <published>2017-10-10T13:06:00.000Z</published>
    <updated>2017-10-10T13:06:59.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、判断对象是否已死"><a href="#一、判断对象是否已死" class="headerlink" title="一、判断对象是否已死"></a>一、判断对象是否已死</h1><h2 id="1、引用计数算法"><a href="#1、引用计数算法" class="headerlink" title="1、引用计数算法"></a>1、引用计数算法</h2><p>给对象添加一个引用计数器，每当有一个地方引用它时，计数器就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。<br>缺点：难以解决循环引用的问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ReferenceCountingGC objA = new ReferenceCountingGC();</div><div class="line">ReferenceCountingGC objB = new ReferenceCountingGC();</div><div class="line">objA.instance=objB;</div><div class="line">objB.instance=objA;</div><div class="line"></div><div class="line">objA=null;</div><div class="line">objB=null;</div></pre></td></tr></table></figure></p>
<h2 id="2、可达性分析算法"><a href="#2、可达性分析算法" class="headerlink" title="2、可达性分析算法"></a>2、可达性分析算法</h2><p>通过一系列称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时，说明该对象是不可用的。<br><strong>可作为GC Roots的对象为：</strong><br>①虚拟机栈中引用的对象<br>②方法区中类静态属性引用的对象<br>③方法区中常量引用的对象<br>④本地方法栈中Native方法引用的对象  </p>
<h2 id="3、引用"><a href="#3、引用" class="headerlink" title="3、引用"></a>3、引用</h2><p><strong>强引用（Strong Reference）</strong>：指在程序代码中普遍存在的，类似A a = new A()这样的引用，只要强引用还存在，垃圾回收器永远不会回收掉被引用的对象。<br><strong>软引用（Soft Reference）</strong>：用来描述一些还有用但并非必需的对象。对于软引用关联的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。<br><strong>弱引用（Weak Reference）</strong>：用来描述非必需对象的，但是它的强度比软引用更弱一些，被软引用关联的对象只能生存到下一次垃圾收集之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被软引用关联的对象。<br><strong>虚引用（Phantom Reference）</strong>：称为幽灵引用，是最弱的一种引用关系。一个对象是否有虚引用的存在，不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。对一个对象设置虚引用关联的唯一目的是用来跟踪对象被垃圾回收的状态。  </p>
<h2 id="4、finalize自救"><a href="#4、finalize自救" class="headerlink" title="4、finalize自救"></a>4、finalize自救</h2><p>即使在可达性分析算法中不可达的对象，也并非是“非死不可”的，要真正宣告一个对象死亡，需要经历两次标记过程：<br>1、如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选条件是此对象是否有必要执行finalize方法。当对象没有覆盖finalize方法，或者finalize方法已经被虚拟机调用过，虚拟机将这两种情况视为“没有必要执行”，这时对象宣告死亡。<br>2、如果对象被判定有必要执行finalize，那么该对象会放置在一个F-Queue的队列中，并在稍后由一个虚拟机自动建立的、低优先级的Finalizer线程去执行。finalize方法是对象逃脱死亡命运的最后一次机会，稍后GC会对F-Queue中的对象进行第二次小规模的标记，如果对象在finalize()中成功拯救自己——只要重新与引用链的任何一个对象建立连接即可，譬如把自己（this）赋值给某个类变量或者对象的成员变量，那么第二次标记时它将被移除“即将回收”的集合；否则，它就会被真的回收了。<br>注意：任何一个对象的finalize方法都只会被系统自动调用一次。  </p>
<h1 id="二、垃圾回收算法"><a href="#二、垃圾回收算法" class="headerlink" title="二、垃圾回收算法"></a>二、垃圾回收算法</h1><h2 id="1、标记-清除算法"><a href="#1、标记-清除算法" class="headerlink" title="1、标记-清除算法"></a>1、标记-清除算法</h2><p>分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。<br>有两点不足之处：<br>①一个是效率问题，标记和清除两个过程的效率都不高；<br>②另一个是空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。  </p>
<h2 id="2、复制算法"><a href="#2、复制算法" class="headerlink" title="2、复制算法"></a>2、复制算法</h2><h3 id="①普通的复制算法"><a href="#①普通的复制算法" class="headerlink" title="①普通的复制算法"></a>①普通的复制算法</h3><p>将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这块内存用完了，就将还存活着的对象复制到另一块上面，然后再把已使用过的内存一次清理掉。<br>这样每次都是对整个半区进行内存回收，不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。<br>代价：内存使用率只有原来的一半。  </p>
<h3 id="②改进的复制算法"><a href="#②改进的复制算法" class="headerlink" title="②改进的复制算法"></a>②改进的复制算法</h3><p>不是按照1:1的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间。在回收时，会把Eden和其中一个Survivor中还存活的对象一次性放到另一个空的Survivor中，然后清除之前的Eden和第一个Survivor。为了区分，一般称第一个为From Survivor，第二个为To Survivor。他们的比例为8:1:1，只会浪费10%的空间。<br>内存担保：有可能存活的对象大于10%，一个Survivor放不下，这时需要有其他内存来作担保，这里会以老年代作为担保。如果放不下，那么通过分配担保机制直接进入老年代。  </p>
<h2 id="3、标记-整理算法"><a href="#3、标记-整理算法" class="headerlink" title="3、标记-整理算法"></a>3、标记-整理算法</h2><p>老年代没有其他内存给它做担保，所以不能使用复制算法。先标记需要回收的对象，然后把活着的对象向一端进行移动，使他们在物理上连续，然后把边界右侧的内存直接清理掉。<br>没有内存碎片，但是效率会稍微低一点，因为要移动对象。  </p>
<h2 id="4、分代收集算法"><a href="#4、分代收集算法" class="headerlink" title="4、分代收集算法"></a>4、分代收集算法</h2><p>根据对象存活周期的不同将内存划分为几块，一般把Java堆分为<strong>新生代</strong>和<strong>老年代</strong>，根据年代的特点采用最适当的收集算法。<br>在<strong>新生代</strong>中，每次垃圾收集时都有大批对象死去，只有少量存活，选用“复制算法”，只需要付出少量存活对象的复制成本就可以完成收集。<br>而在<strong>老年代</strong>中，对象存活率高、没有额外空间对它进行分配担保，就使用“标记-清除”或者“标记-整理”算法来进行回收。  </p>
<h1 id="三、新生代、老年代和永久代"><a href="#三、新生代、老年代和永久代" class="headerlink" title="三、新生代、老年代和永久代"></a>三、新生代、老年代和永久代</h1><p>java虚拟机垃圾收集器关注的内存结构如下：<br><img src="http://osrmzp0jr.bkt.clouddn.com/20141107224401036.png" alt="image"><br>堆大小=新生代+老年代，新生代与老年代的比例为1：2，新生代细分为一块较大的Eden空间和两块较小的Survivor空间，分别被命名为from和to。  </p>
<h2 id="1、新生代"><a href="#1、新生代" class="headerlink" title="1、新生代"></a>1、新生代</h2><p>新创建的对象一般都在新生代中分配内存空间，新生代采用“复制算法”进行垃圾回收，可见上面改进的复制算法。<br>java虚拟机对新生代的垃圾回收称为<strong>Minor GC</strong>，次数比较频繁，每次的回收时间较短。使用虚拟机的-Xmn参数可以指定新生代内存大小。  </p>
<h2 id="2、老年代"><a href="#2、老年代" class="headerlink" title="2、老年代"></a>2、老年代</h2><p>老年代中的对象一般都是长生命周期对象，对象的存活率比较高。当新生代垃圾收集器回收几次之后仍然存活的对象会被移动到老年代内存中（默认是15岁），当大对象无法在新生代找到足够的连续内存时也会直接在老年代中创建。<br>老年代中使用“标记-清除”或者“标记-整理”算法进行垃圾回收。java虚拟机对老年代的回收称为<strong>MajorGC/Full GC</strong>，次数相对比较少，每次回收的时间也比较长。<br>在新生代中没有足够空间为对象创建分配内存，老年代中内存回收也无法回收到足够的内存空间，并且新生代和老年代都无法扩展时，堆就会产生OutOfMemoryError异常。虚拟机-Xms参数指定最小内存大小，-Xmx参数指定最大内存大小，与新生代大小参数-Xmn之差可计算出老年代最小和最大容量。  </p>
<h2 id="3、永久代"><a href="#3、永久代" class="headerlink" title="3、永久代"></a>3、永久代</h2><p>永久代指的是虚拟机内存中的方法区，被各个线程共享的内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。永久代垃圾回收比较少，效率也比较低，但也必须进行垃圾回收，否则永久代内存不够用时仍然会抛出OutOfMemoryError异常。永久代也使用“标记-清除”或者“标记-整理”算法进行垃圾回收。虚拟机参数-XX：PermSize和-XX：MaxPermSize可以设置永久代的初始大小和最大容量。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、判断对象是否已死&quot;&gt;&lt;a href=&quot;#一、判断对象是否已死&quot; class=&quot;headerlink&quot; title=&quot;一、判断对象是否已死&quot;&gt;&lt;/a&gt;一、判断对象是否已死&lt;/h1&gt;&lt;h2 id=&quot;1、引用计数算法&quot;&gt;&lt;a href=&quot;#1、引用计数算法&quot; cla
    
    </summary>
    
      <category term="深入理解Java虚拟机" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java虚拟机" scheme="http://yoursite.com/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java中的异常和处理</title>
    <link href="http://yoursite.com/2017/10/09/Java%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%92%8C%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2017/10/09/Java中的异常和处理/</id>
    <published>2017-10-09T08:49:00.000Z</published>
    <updated>2017-10-09T08:52:45.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>程序运行时，发生超出预期的事件，阻止了程序按照程序员的预期正常执行，这就是异常。Java中的解决方法为<strong>异常处理机制</strong>。<br>异常处理机制能让程序在异常发生时，按照代码预先设定的异常处理逻辑，针对性的处理异常，让程序尽最大可能恢复正常并继续执行，且保持代码的清晰。<br>java中的异常可以是函数中的语句执行时引发的，也可以是程序员通过throw关键字手动抛出的，只要程序中产生了异常，就会用一个对应类型的异常对象来封装异常，jre就会试图寻找异常处理程序来处理异常。<br>Throwable类是Java异常类型的顶层父类，一个对象只有是Throwable类的实例，他才是一个异常对象，才能被异常处理机制识别。jdk中内置了一些常用的异常类，同时程序员自己也可以自定义异常。  </p>
<h1 id="java异常的分类和类结构图"><a href="#java异常的分类和类结构图" class="headerlink" title="java异常的分类和类结构图"></a>java异常的分类和类结构图</h1><p>Throwable类是顶层父类，Throwable类派生出Error类和Exception类。<br><strong>错误</strong>：Error类以及他的子类的实例，代表了JVM本身的错误。错误不能被程序员通过代码处理，Error很少出现。<br><strong>异常</strong>：Exception以及它的子类，代表程序运行时发送的各种不期望发生的事件。<strong>可以被java异常处理机制使用，是异常处理的核心</strong>。<br><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB.jpg" alt="image"><br>根据javac对异常的处理要求，将异常类分为2类：<br><strong>非检查异常（unchecked exception）</strong>：Error和RuntimeException以及他们的子类。javac在编译时，不会提示和发现这样的异常，不要求在程序中处理这些异常。对于这样的异常，我们可以编写代码处理（try…catch…finally），也可以不处理。对于这些异常，我们要做的应该是修正代码，而不是去通过异常处理器处理。这样的异常多半是代码编写的问题。如除0错误ArithmeticException，错误的类型强转错误ClassCastException，数组越界错误ArrayIndexOutOfBoundsException，空指针错误NullPointerException等等。<br><strong>检查异常（checked exception）</strong>：除了Error和RuntimeException的其它异常。javac强制要求程序员为这样的异常做预备处理工作（try…catch…finally）。在方法中，<strong>要么通过try-catch语句捕获异常并处理，要么用throws子句声明交给函数调用者去解决</strong>，否则编译不会通过。这种异常一般由程序的运行环境导致的。因为程序可能被运行在各种未知的环境下，但是程序员无法干预用户如何使用他编写的程序，于是程序员就应该为这样的异常时刻准备着，如SQLException，IOException，ClassNotFoundException，FileNotFoundException等等。<br>这里的检查与非检查是针对javac而言的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;程序运行时，发生超出预期的事件，阻止了程序按照程序员的预期正常执行，这就是异常。Java中的解决方法为&lt;strong&gt;异常处理机制&lt;/str
    
    </summary>
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>（转）Java中锁概念总结</title>
    <link href="http://yoursite.com/2017/09/30/%EF%BC%88%E8%BD%AC%EF%BC%89Java%E4%B8%AD%E9%94%81%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/09/30/（转）Java中锁概念总结/</id>
    <published>2017-09-30T02:41:04.000Z</published>
    <updated>2017-09-30T02:41:52.938Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="http://www.jianshu.com/p/4a8415140406" target="_blank" rel="external">http://www.jianshu.com/p/4a8415140406</a></p>
<h2 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h2><p><strong>公平锁</strong>：多个线程申请获取同一个锁，按照线程的申请顺序，排队获取锁。公平锁的好处是等待的线程不会被饿死，相应的缺陷就是整体吞吐量很低、效率很低。使用new ReentrantLock(true)可以构造一个公平锁。<br><strong>非公平锁</strong>：多个线程申请获取同一个锁，获取锁的顺序不按照申请顺序，抢占式的获取。非公平锁的好处是整体效率很高，但是可能会使有些线程一致在等待，造成饿死。使用Synchronized、new ReentrantLock()和new ReentrantLock(false)可以构建一个非公平锁。  </p>
<h2 id="共享锁和独占锁"><a href="#共享锁和独占锁" class="headerlink" title="共享锁和独占锁"></a>共享锁和独占锁</h2><p><strong>共享锁</strong>：简单的理解就是锁可以被多个线程持有。在实际使用过程中，线程A获取到了共享资源D的共享锁，其它线程只能获取D的共享锁，不能获取独占锁。<br><strong>独占锁</strong>：一次只能有一个线程获得锁，即只能被一个线程持有。在实际使用过程中，线程A获取到了共享资源D的独占锁，其它线程不能获取D的任何类型锁。  </p>
<h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><p><strong>读写锁</strong>一次只有一个线程（writer线程）可以修改共享数据，但在许多情况下，任何数量的线程可以同时读取共享数据（reader线程）。Java中的读写锁通过ReentrantReadWriteLock实现。ReentrantReadWriteLock.ReadLock是读锁，它是共享锁。ReentrantReadWriteLock.WriteLock是写锁，它是独占锁。  </p>
<h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p><strong>互斥锁</strong>即一次只能有一个线程持有的锁。ReentrantLock和synchronized都是互斥锁。  </p>
<h2 id="悲观锁和乐观锁"><a href="#悲观锁和乐观锁" class="headerlink" title="悲观锁和乐观锁"></a>悲观锁和乐观锁</h2><p><strong>悲观锁</strong>认为对同一数据的并发操作一定会出现冲突问题，所以，在对数据操作之前一定要加锁。Java编码中悲观锁的实现有很多种，for update就是一种。<br><strong>乐观锁</strong>认为对同一数据的并发操作不会出现冲突问题，数据操作不加锁，会在操作提交时检查数据的完整性。Java中常用的乐观锁方式有版本号、时间戳。  </p>
<h2 id="偏向锁、轻量级锁、重量级锁"><a href="#偏向锁、轻量级锁、重量级锁" class="headerlink" title="偏向锁、轻量级锁、重量级锁"></a>偏向锁、轻量级锁、重量级锁</h2><p><strong>偏向锁</strong>：对于一段同步代码来说，锁偏向于第一次获取它的线程，如果继续执行的过程中，锁没有被其它线程持有，则持有偏向锁的线程将不需要同步，自动获取锁。<br><strong>轻量级锁</strong>：当偏向锁被另一个线程持有的时候，偏向锁升级为轻量级锁，其它线程通过自旋转的方式尝试获取锁。<br><strong>重量级锁</strong>：当轻量级锁被另一个线程持有的时候，轻量级锁升级为重量级锁。  </p>
<h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>Java线程在得不到锁时不会立即阻塞，而是执行一个循环，不断的去尝试获取锁，这种技术就是<strong>自旋锁</strong>。它可以减少在获取锁的过程中，因为线程上下文的切换而导致的额外消耗。  </p>
<h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p><strong>可重入锁</strong>，也称为递归锁，即线程在获取到某方法的锁之后，如果在该方法内部调用其它方法，这个方法也需要获取锁，那么进入这个方法将自动获取锁，它可以在一定程度上避免死锁。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接：&lt;a href=&quot;http://www.jianshu.com/p/4a8415140406&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/4a8415140406&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java并发" scheme="http://yoursite.com/tags/java%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程之锁优化策略</title>
    <link href="http://yoursite.com/2017/09/30/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%94%81%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/"/>
    <id>http://yoursite.com/2017/09/30/Java多线程之锁优化策略/</id>
    <published>2017-09-30T02:26:04.000Z</published>
    <updated>2017-09-30T02:26:45.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、编码过程中可采取的锁优化的思路："><a href="#一、编码过程中可采取的锁优化的思路：" class="headerlink" title="一、编码过程中可采取的锁优化的思路："></a>一、编码过程中可采取的锁优化的思路：</h1><h2 id="1、减少锁持有时间"><a href="#1、减少锁持有时间" class="headerlink" title="1、减少锁持有时间"></a>1、减少锁持有时间</h2><p>如：对一个方法加锁，不如对方法中需要同步的几行代码加锁。  </p>
<h2 id="2、减小锁粒度"><a href="#2、减小锁粒度" class="headerlink" title="2、减小锁粒度"></a>2、减小锁粒度</h2><p>如：jdk1.6中，  ConcurrentHashMap中采取对segement加锁而不是整个map加锁，提高并发性。类似数据库中的行锁对表锁的优势。  </p>
<h2 id="3、锁分离"><a href="#3、锁分离" class="headerlink" title="3、锁分离"></a>3、锁分离</h2><p>根据同步操作的性质，把锁划分为读锁和写锁，读锁之间不互斥，提高了并发性。  </p>
<h2 id="4、锁粗化"><a href="#4、锁粗化" class="headerlink" title="4、锁粗化"></a>4、锁粗化</h2><p>在一个间隔性需要执行同步语句的线程中，如果在不连续的同步块间频繁加锁解锁是很耗性能的，因此把加锁范围扩大，把这些不连续的同步语句进行一次性加锁解锁。虽然线程持有锁的时间增加了，但是总体还是优化了的。  </p>
<h2 id="5、锁消除"><a href="#5、锁消除" class="headerlink" title="5、锁消除"></a>5、锁消除</h2><p>锁消除是编译器做的事：根据代码逃逸技术，如果判断到一段代码中，堆上的数据不会逃逸当前线程（即不会影响线程外的数据），那么可以认为这段代码是线程安全的，不需要加锁。  </p>
<h1 id="二、Java虚拟机中采用的锁优化策略："><a href="#二、Java虚拟机中采用的锁优化策略：" class="headerlink" title="二、Java虚拟机中采用的锁优化策略："></a>二、Java虚拟机中采用的锁优化策略：</h1><p>主要包括偏向锁、轻量级锁和自旋锁。其中，<a href="http://xiaonanbobo.com/2017/08/13/synchronized的实现原理及锁的升级/" target="_blank" rel="external">偏向锁、轻量级锁及重量锁及其膨胀过程在之前博客中有了详细描述，</a>在这篇文章，我主要介绍下自旋锁。  </p>
<h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>如果当线程申请锁时，发现锁被占用，就让当前线程执行忙循环（自旋），观察持有锁的线程是否会很快释放锁。如果自旋后还没获得锁，才进入同步阻塞状态。  </p>
<h3 id="自适应自旋"><a href="#自适应自旋" class="headerlink" title="自适应自旋"></a>自适应自旋</h3><p>自旋的线程的自旋时间为在同一个锁上，上一次线程自旋并获得锁的耗时。如果对于这个锁，自旋很少成功，就不自旋了，避免浪费CPU资源。 </p>
<p>&emsp;<strong>为了尽量避免使用重量级锁，JVM首先会尝试轻量级锁，轻量级锁尝试使用CAS操作来获取锁，如果轻量级锁获取失败，说明存在竞争，但是可能很快就能获得锁，就会尝试自旋锁，将线程做几个空循环，每一次循环都不断尝试获得锁。如果自旋锁也失败，那么只能升级为重量级锁。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、编码过程中可采取的锁优化的思路：&quot;&gt;&lt;a href=&quot;#一、编码过程中可采取的锁优化的思路：&quot; class=&quot;headerlink&quot; title=&quot;一、编码过程中可采取的锁优化的思路：&quot;&gt;&lt;/a&gt;一、编码过程中可采取的锁优化的思路：&lt;/h1&gt;&lt;h2 id=&quot;1
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java并发" scheme="http://yoursite.com/tags/java%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>26、复杂链表的复制</title>
    <link href="http://yoursite.com/2017/09/29/26%E3%80%81%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
    <id>http://yoursite.com/2017/09/29/26、复杂链表的复制/</id>
    <published>2017-09-29T12:08:00.000Z</published>
    <updated>2017-09-29T12:08:56.869Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head  </p>
<h2 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h2><p>1、复制链表<br><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170929192000.jpg" alt="image"><br>2、复制random<br><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170929192011.jpg" alt="image"><br>3、拆分链表<br><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170929192006.jpg" alt="image">  </p>
<h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">public class RandomListNode &#123;</div><div class="line">    int label;</div><div class="line">    RandomListNode next = null;</div><div class="line">    RandomListNode random = null;</div><div class="line"></div><div class="line">    RandomListNode(int label) &#123;</div><div class="line">        this.label = label;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line">public class Solution &#123;</div><div class="line">    public RandomListNode Clone(RandomListNode pHead)</div><div class="line">    &#123;</div><div class="line">        RandomListNode pCur=pHead;</div><div class="line">        if(pHead==null)</div><div class="line">            return null;</div><div class="line">        //第一步，复制链表  A-&gt;B-&gt;C变为A-&gt;A&apos;-&gt;B-&gt;B&apos;-&gt;C-&gt;C&apos;</div><div class="line">        while(pCur!=null)&#123;</div><div class="line">            RandomListNode node=new RandomListNode(pCur.label);</div><div class="line">            node.next=pCur.next;</div><div class="line">            pCur.next=node;</div><div class="line">            pCur=node.next;</div><div class="line">        &#125;</div><div class="line">        //第二步，复制random</div><div class="line">        pCur=pHead;</div><div class="line">        while(pCur!=null)&#123;</div><div class="line">            if(pCur.random!=null)</div><div class="line">                pCur.next.random=pCur.random.next;</div><div class="line">            pCur=pCur.next.next;</div><div class="line">        &#125;</div><div class="line">        //第三步，拆分链表</div><div class="line">        pCur=pHead;</div><div class="line">        RandomListNode cur=pHead.next;</div><div class="line">        RandomListNode pNode=cur;</div><div class="line">        while(pCur!=null)&#123;</div><div class="line">            pCur.next=pCur.next.next;</div><div class="line">            if(cur.next!=null)&#123;</div><div class="line">                cur.next=cur.next.next;</div><div class="line">            &#125;</div><div class="line">            pCur=pCur.next;</div><div class="line">            cur=cur.next;</div><div class="line">        &#125;</div><div class="line">    	return pNode;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head  &lt;/p&gt;
&lt;h2 id=&quot;一、思路&quot;&gt;&lt;a href=&quot;#一、思路&quot; class=&quot;headerlink&quot; title
    
    </summary>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法，剑指offer" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%EF%BC%8C%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>27、二叉搜索树转双向链表</title>
    <link href="http://yoursite.com/2017/09/29/27%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BD%AC%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2017/09/29/27、二叉搜索树转双向链表/</id>
    <published>2017-09-29T10:35:00.000Z</published>
    <updated>2017-09-29T10:39:21.439Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。  </p>
<h2 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h2><p>&emsp;用中序遍历来遍历树中每一个结点，因为中序遍历的特点是按照从小到大的顺序遍历二叉树每个节点。当遍历到根节点10时，它的左子树已经转换成一个排序的链表，并且处在链表最后一个节点的是当前值的最大节点8。我们把值为8的节点和根节点链接起来，此时最后一个节点变为根节点10。接着去遍历转换右子树，并把根节点和右子树中最小的节点连接起来。</p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170929165150.jpg" alt="image">  </p>
<h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">public class TreeNode &#123;</div><div class="line">    int val = 0;</div><div class="line">    TreeNode left = null;</div><div class="line">    TreeNode right = null;</div><div class="line"></div><div class="line">    public TreeNode(int val) &#123;</div><div class="line">        this.val = val;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line">public class Solution &#123;</div><div class="line">    TreeNode leftHead=null;</div><div class="line">    TreeNode rightHead=null;</div><div class="line">    public TreeNode Convert(TreeNode pRootOfTree) &#123;</div><div class="line">        if(pRootOfTree==null)</div><div class="line">            return null;</div><div class="line">        Convert(pRootOfTree.left);</div><div class="line">        if(leftHead==null)&#123;</div><div class="line">            leftHead=rightHead=pRootOfTree;</div><div class="line">        &#125;else&#123;</div><div class="line">            rightHead.right=pRootOfTree;</div><div class="line">            pRootOfTree.left=rightHead;</div><div class="line">            rightHead=pRootOfTree;</div><div class="line">        &#125;</div><div class="line">        Convert(pRootOfTree.right);</div><div class="line">        return leftHead;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。  &lt;/p&gt;
&lt;h2 id=&quot;一、思路&quot;&gt;&lt;a href=&quot;#一、思路&quot; class=&quot;headerlink&quot; title=&quot;一、思路&quot;&gt;&lt;/a&gt;一
    
    </summary>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法，剑指offer" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%EF%BC%8C%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>28、字符串的排列</title>
    <link href="http://yoursite.com/2017/09/29/28%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/"/>
    <id>http://yoursite.com/2017/09/29/28、字符串的排列/</id>
    <published>2017-09-29T08:34:00.000Z</published>
    <updated>2017-09-29T10:39:19.529Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。  </p>
<h2 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h2><p>1、将第一个字符与后面每个字符交换<br>2、固定第一个字符<br>3、将固定后，后面字符的第一位字符分别与后面每个字符交换<br>以此类推。。。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%9B%9E%E6%BA%AF.png" alt="image">  </p>
<h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">import java.util.*;</div><div class="line">public class Solution &#123;</div><div class="line">    public ArrayList&lt;String&gt; Permutation(String str) &#123;</div><div class="line">       ArrayList list =new ArrayList();</div><div class="line">        if(str!=null &amp;&amp; str.length()&gt;0)&#123;</div><div class="line">            PermutationHelper(str.toCharArray(),0,list);</div><div class="line">            Collections.sort(list);</div><div class="line">        &#125;</div><div class="line">        return list;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    void PermutationHelper(char[] cs,int i,ArrayList list)&#123;</div><div class="line">        //结束条件，排到最后一位元素</div><div class="line">        if(i==cs.length-1)&#123;</div><div class="line">            String val=String.valueOf(cs);</div><div class="line">            if(!list.contains(val))</div><div class="line">            	list.add(val);</div><div class="line">        &#125;else&#123;</div><div class="line">            for(int j=i;j&lt;cs.length;j++)&#123;</div><div class="line">                swap(cs,i,j);//将第一个字符与后面每个字符交换</div><div class="line">                PermutationHelper(cs,i+1,list);//将第一位字符固定</div><div class="line">                swap(cs,i,j);//第一个字符固定后，之后第一个字符与后面每个字符交换，直至固定后的第一个字符就是最后一个字符</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //两元素的交换</div><div class="line">    void swap(char[] cs,int i,int j)&#123;</div><div class="line">        char temp=cs[i];</div><div class="line">        cs[i]=cs[j];</div><div class="line">        cs[j]=temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。  &lt;/p&gt;
&lt;h2 id=&quot;一、思路&quot;&gt;&lt;a href=&quot;#一、思路&quot; class=&quot;
    
    </summary>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法，剑指offer" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%EF%BC%8C%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>深入java虚拟机之类加载机制</title>
    <link href="http://yoursite.com/2017/08/31/%E6%B7%B1%E5%85%A5java%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2017/08/31/深入java虚拟机之类加载机制/</id>
    <published>2017-08-31T07:51:00.000Z</published>
    <updated>2017-09-22T11:34:28.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、类加载过程"><a href="#一、类加载过程" class="headerlink" title="一、类加载过程"></a>一、类加载过程</h1><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载。其中类加载的过程包括了<strong>加载、验证、准备、解析和初始化</strong>五个阶段。加载、验证、准备、初始化这四个阶段发生的顺序是确定的，但解析阶段不一定，在某些情况下，解析阶段在初始化之后进行，这时为了支持Java的动态绑定。这几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常会互相交叉的进行，通常在一个阶段的执行过程中调用或激活另一个阶段。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E7%B1%BB%E5%8A%A0%E8%BD%BD1.png" alt="image">  </p>
<h2 id="静态绑定和动态绑定"><a href="#静态绑定和动态绑定" class="headerlink" title="静态绑定和动态绑定"></a>静态绑定和动态绑定</h2><p><strong>绑定是指把一个方法的调用与方法所在的类关联起来</strong>，分来静态绑定和动态绑定。<br>1、静态绑定<br>即前期绑定。在程序执行前方法已经被绑定，此时由编译器或其它连接程序实现。对java来说，可以理解为程序编译期的绑定。<strong>Java方法中只有final、static、private和构造方法是前期绑定的。</strong><br>2、动态绑定<br>即晚期绑定，也叫运行时绑定。在运行时根据具体对象的类型进行绑定，在java中，几乎所有的方法都是后期绑定的。  </p>
<h2 id="1、加载"><a href="#1、加载" class="headerlink" title="1、加载"></a>1、加载</h2><p>加载是类加载过程的第一个阶段，在这个阶段，虚拟机完成以下3件事情：<br>1、通过一个类的全限定名来获取定义此类的二进制字节流。<br>2、将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。<br>3、在内存中生成一个代表这个类的java.lang.Class对象，作为方法区中各种数据的访问入口。<br>在加载阶段，可控性强，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。  </p>
<h2 id="2、验证"><a href="#2、验证" class="headerlink" title="2、验证"></a>2、验证</h2><p>验证的目的是为了确保Class文件中的字节流包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。大致分为四个阶段的验证：<br><strong>1、文件格式的验证</strong>：验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理，该验证的主要目的是保证输入的字节流能正确地解析并存储于方法区之内。经过这个阶段的验证后，字节流才会进入内存的方法区进行存储，后面三个验证都是基于方法区的存储结构进行的。<br><strong>2、元数据验证</strong>：对类中的各数据类型进行语法校验，保证不存在不符合Java语言规范的元数据信息。<br><strong>3、字节码验证</strong>：主要目的是通过数据流和控制流分析，对类的方法体进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的事件。<br><strong>4、符号引用验证</strong>：发生在虚拟机将符号引用转化为直接引用的时候（解析阶段发生该转化），主要是对类自身以外（常量池中的各种符号引用）的信息进行匹配性校验。  </p>
<h2 id="3、准备"><a href="#3、准备" class="headerlink" title="3、准备"></a>3、准备</h2><p>准备阶段正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。<br>注意几点：<br>1、仅包括类变量（static修饰），而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配到Java堆中。<br>2、这里设置的初始值通常是数据类型默认的零值（如0、0L、null、false等），而不是在java代码中被显式地赋予的值。<br>3、如果变量同时被final和static修饰（常量），类字段的字段属性表中存在ConstantValue属性，那么在准备阶段变量的值就会被初始化为ConstantValue属性所指定的值。可以理解为static final常量在编译期就将其结果放入了调用它的类的常量池中。  </p>
<h2 id="4、解析"><a href="#4、解析" class="headerlink" title="4、解析"></a>4、解析</h2><p>解析阶段是虚拟机将常量池中的符号引用转化为直接引用的过程。  </p>
<h3 id="符号引用和直接引用"><a href="#符号引用和直接引用" class="headerlink" title="符号引用和直接引用"></a>符号引用和直接引用</h3><p><strong>符号引用</strong>：以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符合引用和虚拟机的内存布局无关，引用的目标并不一定已经加载到内存中。<br><strong>直接引用</strong>：可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用和虚拟机的内存布局相关。<br>解析动作主要针对类或接口、字段、类方法、接口方法四类符号引用进行。</p>
<h2 id="5、初始化"><a href="#5、初始化" class="headerlink" title="5、初始化"></a>5、初始化</h2><p>初始化阶段是类加载过程的最后一步，到这个阶段，才真正去执行类中定义的java代码。在准备阶段，类变量（static变量）已经被赋过一次系统要求的初始化值，而在初始化阶段，回去初始化类变量在java代码中定义的值以及其他资源。初始化阶段可理解为执行类构造器&lt;clinit&gt;()方法的过程。  </p>
<h3 id="lt-clinit-gt-方法的执行规则："><a href="#lt-clinit-gt-方法的执行规则：" class="headerlink" title="&lt;clinit&gt;()方法的执行规则："></a>&lt;clinit&gt;()方法的执行规则：</h3><p><strong>1、&lt;clinit&gt;()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的。静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块中可以赋值，但是不能访问。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class Test&#123;</div><div class="line">    static&#123;</div><div class="line">        i = 0;                 //给变量赋值可以正常编译通过</div><div class="line">        System.out.println(i); //编译器会提示“非法向前引用”，不可访问定义在静态语句块之后的变量       </div><div class="line">    &#125;</div><div class="line">    static int i = 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>2、&lt;clinit&gt;()方法和类的构造函数（实例构造器&lt;init&gt;()方法）不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的&lt;clinit&gt;()方法执行之前，父类的&lt;clinit&gt;()方法已经执行完毕。因此在虚拟机中第一个被执行的&lt;clinit&gt;()方法的类肯定是Object。<br>3、由于父类的&lt;clinit&gt;()方法会先执行，意味着父类中定义的静态语句块要优先于子类的变量赋值操作。<br>4、&lt;clinit&gt;()方法对于类或接口来说并不是必需的，如果一个类中没有静态语句块，也没有对变量的赋值操作，那么这个类可以不用生成&lt;clinit&gt;()方法。<br>5、接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，接口和类一样都会生成&lt;clinit&gt;()方法。但接口和类不同的是，执行接口的&lt;clinit&gt;()方法不需要执行父接口的&lt;clinit&gt;()方法。只有当父接口中定义的变量使用时，父接口才会初始化。<br>6、虚拟机会保证一个类的&lt;clinit&gt;()方法在多线程环境中能被正确地加锁和同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的&lt;clinit&gt;()方法，其他线程都需要阻塞等待，直到活动现场执行&lt;clinit&gt;()方法完毕。</strong>  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Parent&#123;</div><div class="line">    public static int A = 1;</div><div class="line">    sttatic&#123;</div><div class="line">        A = 2;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static class Sub extends Parent&#123;</div><div class="line">    public static int B = A;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void main(String[] args)&#123;</div><div class="line">    System.out.println(Sub.B);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;首先在准备阶段为类变量分配内存并设置类变量的初始值，此时A、B的值被赋为默认值0，之后在初始化阶段调用&lt;clinit&gt;()方法给他们赋予程序中指定的值。当我们调用Sub.B时会触发Sub的&lt;clinit&gt;()方法，根据规则2，在此之前，要先执行完其父类Parent的&lt;clinit&gt;()方法；又根据规则1，在执行&lt;clinit&gt;()方法时，需要按static语句或static变量赋值操作在代码中出现的顺序来执行相关的static语句，因此当触发执行Parent的&lt;clinit&gt;()方法时，会先将A赋值为1，再执行static语句块中语句，将A赋值为2；之后执行Sub的&lt;clinit&gt;()方法，这样会将B的赋值为2。  </p>
<h1 id="二、类加载器"><a href="#二、类加载器" class="headerlink" title="二、类加载器"></a>二、类加载器</h1><p>类加载器用于实现类的加载动作。对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在Java虚拟机中的唯一性。也就是说，比较两个类是否相等，只有在这两个类是由同一个类加载器加载的前提下才有意义。即使两个类来源于同一个Class文件，只要加载她们的类加载器i不同，那这两个类肯定是不同的。  </p>
<h2 id="1、类加载器的分类"><a href="#1、类加载器的分类" class="headerlink" title="1、类加载器的分类"></a>1、类加载器的分类</h2><p>1、<strong>启动类加载器</strong>：负责加载存放在JDK\jre\lib下（JDK代表jdk安装目录），或是被-Xbootclasspath参数指定的路径中的，并且被虚拟机识别的类库加载到虚拟机内存中。启动类加载器无法被Java程序直接引用。<br>2、<strong>扩展类加载器</strong>：负责加载JDK\jre\lib\ext目录下的或是被java.ext.dirs系统变量指定的路径中的所有类库。开发者可以直接使用扩展类加载器。<br>3、<strong>应用程序类加载器</strong>：负责加载用户类路径（ClassPath）上指定的类库。开发者可直接使用这个加载器，<strong>应用程序类加载器也是程序中默认的类加载器</strong>。<br>如果有必要，还可以加入自定义的类加载器。  </p>
<h2 id="2、双亲委派模型"><a href="#2、双亲委派模型" class="headerlink" title="2、双亲委派模型"></a>2、双亲委派模型</h2><p><img src="http://osrmzp0jr.bkt.clouddn.com/%E7%B1%BB%E5%8A%A0%E8%BD%BD2.png" alt="image"><br>这种层次关系称为类加载器的双亲委派模型。我们把每一层上面的类加载器叫做当前层类加载器的父加载器，它们之间的父子关系不是通过继承而来的，而是使用组合关系来复用父加载器中的代码。  </p>
<h3 id="①双亲委派模型的工作流程"><a href="#①双亲委派模型的工作流程" class="headerlink" title="①双亲委派模型的工作流程"></a>①双亲委派模型的工作流程</h3><p>&emsp;&emsp;<strong>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是这样，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求时，子加载器才会尝试自己去加载。</strong>  </p>
<h3 id="②双亲委派模型的好处"><a href="#②双亲委派模型的好处" class="headerlink" title="②双亲委派模型的好处"></a>②双亲委派模型的好处</h3><p>&emsp;&emsp;<strong>Java类随着它的类加载器一起具备了一种带有优先级的层次关系。</strong> 例如，java.lang.Object类，无论哪个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，因此Object类在程序的各个类加载器环境中都是同一个类。如果没有双亲委派模型，由各个类加载器自行去加载的话，若用户自己编写了一个java.lang.Object类，那系统中将会出现多个不同的Object类，那么Java类型体系中最基本的行为也无法保证。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、类加载过程&quot;&gt;&lt;a href=&quot;#一、类加载过程&quot; class=&quot;headerlink&quot; title=&quot;一、类加载过程&quot;&gt;&lt;/a&gt;一、类加载过程&lt;/h1&gt;&lt;p&gt;类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化
    
    </summary>
    
      <category term="深入理解Java虚拟机" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java虚拟机" scheme="http://yoursite.com/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java中的线程池</title>
    <link href="http://yoursite.com/2017/08/30/Java%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://yoursite.com/2017/08/30/Java中的线程池/</id>
    <published>2017-08-30T07:57:00.000Z</published>
    <updated>2017-10-10T14:06:32.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程池的好处"><a href="#线程池的好处" class="headerlink" title="线程池的好处"></a>线程池的好处</h1><p><strong>1、降低资源消耗</strong><br>通过重复利用已创建的线程降低线程创建和销毁造成的消耗。<br><strong>2、提高响应速度</strong><br>当任务到达时，任务可以不需要等到线程创建就能立即执行。<br><strong>3、提高线程的可管理性</strong><br>线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。  </p>
<h1 id="一、线程池的实现原理"><a href="#一、线程池的实现原理" class="headerlink" title="一、线程池的实现原理"></a>一、线程池的实现原理</h1><p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%89%AF%E6%9C%AC1.jpg" alt="image"><br><strong>ThreadPoolExecutor执行execute()方法步骤：</strong><br>1、如果当前运行的线程少于corePoolSize，那么创建新的线程来执行任务<br>2、如果运行的线程等于或者多于corePoolSize，那么将任务加入BlockingQueue<br>3、如果BlockingQueue中任务已满，并且当前运行的线程数少于maximumPoolSize，那么创建新的线程来处理任务<br>4、如果当前运行的线程数多于maximumPoolSize，任务将被拒绝，并调用RejectedExecutionHandler.rejectdExecution()方法（饱和策略）<br><img src="http://osrmzp0jr.bkt.clouddn.com/1_%E5%89%AF%E6%9C%AC.jpg" alt="image"><br><strong>线程池中的线程执行任务分两种情况：</strong><br>1、在execute()方法中创建一个线程时，会让这个线程执行当前任务<br>2、这个线程执行完图中1的任务后，会反复从BlockingQueue中获取任务来执行  </p>
<h1 id="二、线程池的使用"><a href="#二、线程池的使用" class="headerlink" title="二、线程池的使用"></a>二、线程池的使用</h1><h2 id="1、线程池的创建"><a href="#1、线程池的创建" class="headerlink" title="1、线程池的创建"></a>1、线程池的创建</h2><p>new ThreadPoolExecutor(corePoolSize, runnableTaskQueue, maximumPoolSize, handler, keepAliveTime);<br><strong>①corePoolSize（线程池的核心线程数）</strong>：当提交一个任务到线程池时，线程池会创建一个线程来执行任务，即使其他空闲的基本线程能够执行新任务也会创建新线程，等到需要执行的任务数大于线程池的核心线程数时就不再创建。具体可以参考上图<br><strong>②runnableTaskQueue（任务队列）</strong>：用于保存等待执行的任务的阻塞队列。有以下几个阻塞队列：<br>&emsp;1、ArrayBlockingQueue：是一个基于数组结构的<strong>有界阻塞队列</strong>，按先进先出原则对元素进行排序。<br>&emsp;2、LinkedBlockingQueue：一个基于链表结构的<strong>无界阻塞队列</strong>，吞吐量高于有界队列，newFixedThreadPool采用这个队列。<br>&emsp;3、SynchronousQueue：不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，newCachedThreadPool使用这个队列。<br>&emsp;4、PriporityBlockingQueue：一个具有优先级的<strong>无界阻塞队列</strong>。<br><strong>③maximumPoolSize（线程池最大数量）</strong>：线程池允许创建线程的最大数量。如果队列满了，且创建的线程数小于最大线程数，那么线程池会创建新的线程执行任务。<br><strong>④handler（饱和策略）</strong>：当队列和线程池都满了，说明线程池处于饱和状态，采取饱和策略处理提交的任务。有四种策略：<br>&emsp;1、AbortPolicy：终止策略，直接抛出异常（默认采用）<br>&emsp;2、CallerRunsPolicy：调用者运行策略，将某些任务回退给调用者，来降低新任务的流量<br>&emsp;3、DiscardOldestPolicy：抛弃策略，丢弃队列里最近的一个任务，并执行当前任务<br>&emsp;4、DiscardPolicy：抛弃最旧的策略，不处理，丢弃掉<br><strong>⑤keepAliveTime（线程活动保持的时间）</strong>：线程池的工作线程空闲后，保持存活的时间。  </p>
<h2 id="2、线程池的关闭"><a href="#2、线程池的关闭" class="headerlink" title="2、线程池的关闭"></a>2、线程池的关闭</h2><p>可以通过shutdown或者shutdownNow方法来关闭线程池。原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程。但也存在一些区别：<br>shutdownNow：首先将线程池的状态设置为STOP，然后尝试<strong>停止所有正在执行或暂停任务的线程，并返回等待执行任务的列表</strong>。<br>shutdown：将线程池的状态设置为SHUTDOWN状态，然后<strong>中断所有没有正在执行任务的线程</strong>。  </p>
<h2 id="3、合理配置线程池"><a href="#3、合理配置线程池" class="headerlink" title="3、合理配置线程池"></a>3、合理配置线程池</h2><p>从下面几个角度分析：<br>1、任务的性质：CPU密集型任务、IO密集型任务和混合型任务。<br>2、任务的优先级：高、中、低<br>3、任务的执行时间：长、中、短<br>4、任务的依赖性：是否依赖其他系统资源，比如数据库连接<br>如果<strong>任务是CPU密集型的，应配置尽可能少的线程</strong>，如等于可用的处理器核数，这样就可以充分利用处理器，让它以最大火力不停进行计算。创建更多的线程反而是不利的，因为多个线程频繁进行上下文切换对性能消耗太大。<br>如果<strong>任务是IO密集型的，应尽可能配置多的线程</strong>，如处理器核数的几倍。因为在执行IO操作时，线程将被阻塞，此时处理器可以立即进行上下文切换以便其他线程开始任务。如果线程数不够，那么有待执行的任务也无法调度处理了。<br>可以使用公式计算出程序所需线程数：<strong>线程数=CPU可用核心数/(1-阻塞系数)</strong>，其中阻塞系数在0到1范围内。CPU密集型的阻塞系数为0，IO密集型的阻塞系数接近1。  </p>
<h1 id="三、线程池的本质"><a href="#三、线程池的本质" class="headerlink" title="三、线程池的本质"></a>三、线程池的本质</h1><p><strong>线程池的本质是使用了一个线程安全的工作队列连接工作者线程和客户端线程，客户端线程将任务放入工作队列后便返回，而工作者线程则不断地从工作队列上取出工作并执行，典型的生产者-消费者模型。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线程池的好处&quot;&gt;&lt;a href=&quot;#线程池的好处&quot; class=&quot;headerlink&quot; title=&quot;线程池的好处&quot;&gt;&lt;/a&gt;线程池的好处&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、降低资源消耗&lt;/strong&gt;&lt;br&gt;通过重复利用已创建的线程降低线程创建和销毁造成的消
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java并发" scheme="http://yoursite.com/tags/java%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>cglib动态代理</title>
    <link href="http://yoursite.com/2017/08/25/cglib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2017/08/25/cglib动态代理/</id>
    <published>2017-08-25T09:22:04.000Z</published>
    <updated>2017-08-25T09:22:49.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、cglib实现动态代理步骤"><a href="#一、cglib实现动态代理步骤" class="headerlink" title="一、cglib实现动态代理步骤"></a>一、cglib实现动态代理步骤</h1><p>使用cglib实现动态代理，并不要求委托类必须实现接口，底层使用asm字节码生成框架生成代理类的字节码。  </p>
<h2 id="1、定义业务逻辑"><a href="#1、定义业务逻辑" class="headerlink" title="1、定义业务逻辑"></a>1、定义业务逻辑</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class UserService&#123;</div><div class="line">    public void add()&#123;</div><div class="line">        System.ou.println(&quot;This is add service&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2、实现MethodInterceptor接口，定义方法的拦截器"><a href="#2、实现MethodInterceptor接口，定义方法的拦截器" class="headerlink" title="2、实现MethodInterceptor接口，定义方法的拦截器"></a>2、实现MethodInterceptor接口，定义方法的拦截器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class MyMethodInterceptor implements MethodInterceptor&#123;</div><div class="line">    public Object intercept(Object obj, Method method, Object[] arg, MethodProxy proxy)throws Throwable&#123;</div><div class="line">        System.ou.println(&quot;Before:&quot; + method);</div><div class="line">        Object object = proxy.invokeSuper(obj, arg);</div><div class="line">        System.ou.println(&quot;After:&quot; + method);</div><div class="line">        return object;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3、使用Enhancer类生成代理类"><a href="#3、使用Enhancer类生成代理类" class="headerlink" title="3、使用Enhancer类生成代理类"></a>3、使用Enhancer类生成代理类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Enhancer enhancer = new Enhancer();</div><div class="line">enhancer.setSuperClass(UserService.class);</div><div class="line">enhancer.setCallback(new MyMethodInterceptor());</div><div class="line">UserService userService = (UserService)enhancer.create();</div></pre></td></tr></table></figure>
<h2 id="4、userService-add-的执行结果"><a href="#4、userService-add-的执行结果" class="headerlink" title="4、userService.add()的执行结果"></a>4、userService.add()的执行结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Before: add</div><div class="line">This is add service</div><div class="line">After: add</div></pre></td></tr></table></figure>
<h1 id="二、cglib字节码生成"><a href="#二、cglib字节码生成" class="headerlink" title="二、cglib字节码生成"></a>二、cglib字节码生成</h1><p><strong>Enhancer</strong>是cglib字节码增强器，可以方便的对类进行扩展，<strong>内部调用GeneratorStrategy.generate方法生成代理类的字节码</strong><br>内部实现：<br><strong>1、代理类UserService$$EnhancerByCGLIB$$394dddeb继承了委托类UserService，且委托类的final方法不能被代理；<br>2、代理类为每个委托方法都生成两个方法，以add方法为例，一个是重写的add方法，一个是CGLIB$add$0方法，该方法直接调用委托类的add方法；<br>3、当执行代理对象的add方法时，会先判断是否存在实现了MethodInterceptor接口的对象cglib$CALLBACK_0（也就是这里的MyMethodInterceptor），如果存在，那么调用MethodInterceptor对象的intercept方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public Object intercept(Object obj, Method method, Object[] arg, MethodProxy proxy)throws Throwable&#123;</div><div class="line">    System.ou.println(&quot;Before:&quot; + method);</div><div class="line">    Object object = proxy.invokeSuper(obj, arg);//最终调用的委托类中的method方法</div><div class="line">    System.ou.println(&quot;After:&quot; + method);</div><div class="line">    return object;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参数分别是：①代理对象；②委托类方法；③方法参数；④代理方法的MethodProxy对象<br><strong>4、每个被代理的方法都对应一个MethodProxy对象，methodProxy.invokeSuper最终调用的是委托类的add方法</strong>，实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public Object invokeSuper(Object obj, Object[] args)throws Throwable&#123;</div><div class="line">    try&#123;</div><div class="line">        init();</div><div class="line">        FastClassInfo fci = fastClassInfo;</div><div class="line">        //fci.f2:代理类对象</div><div class="line">        //fci.i2:方法CGLIB$add$0在对象中的索引位置</div><div class="line">        return fci.f2.invoke(fci.i2, obj, args);//调用代理类对象的CGLIB$add$0方法，CGLIB$add$0方法又直接调用委托类的add方法</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在MethodProxy实现中，通过FastClassInfo维护了委托类和代理类的FastClass：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private static class FastClassInfo&#123;</div><div class="line">    FastClass f1;//指向委托类对象</div><div class="line">    FastClass f2;//指向代理类对象</div><div class="line">    int i1;//方法add在对象中的索引位置</div><div class="line">    int i2;//方法CGLIB$add$0在对象中的索引位置</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>FastClass提出概念下标index，通过索引来保存方法的引用信息，将原先的反射调用，转化为方法的直接调用，从而实现fast。当调用methodProxy.invokeSuper方法时，实际上是调用代理类的CGLIB$add$0方法，CGLIB$add$0方法又直接调用委托类的add方法，避免了使用反射机制来调用委托类的方法。</strong>  </p>
<h1 id="三、jdk和cglib动态代理的区别"><a href="#三、jdk和cglib动态代理的区别" class="headerlink" title="三、jdk和cglib动态代理的区别"></a>三、jdk和cglib动态代理的区别</h1><p>1、jdk动态代理生成的代理类和委托类必须实现相同的接口；cglib动态代理则不需要。<br>2、cglib动态代理中，生成的代理类是委托类的子类，且不能处理被final关键字修饰的方法；<br>3、jdk采用反射机制来调用委托类的方法，cglib采用类似索引的方式直接调用委托类的方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、cglib实现动态代理步骤&quot;&gt;&lt;a href=&quot;#一、cglib实现动态代理步骤&quot; class=&quot;headerlink&quot; title=&quot;一、cglib实现动态代理步骤&quot;&gt;&lt;/a&gt;一、cglib实现动态代理步骤&lt;/h1&gt;&lt;p&gt;使用cglib实现动态代理，并不要求
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java，java基础" scheme="http://yoursite.com/tags/java%EF%BC%8Cjava%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
