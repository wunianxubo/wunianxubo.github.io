<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wunian&#39;s Blog</title>
  <subtitle>清风徐来，水波不兴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-12T07:40:12.648Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Xu Bo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java实现二叉排序树的插入、查找和删除</title>
    <link href="http://yoursite.com/2017/10/12/Java%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91%E7%9A%84%E6%8F%92%E5%85%A5%E3%80%81%E6%9F%A5%E6%89%BE%E5%92%8C%E5%88%A0%E9%99%A4/"/>
    <id>http://yoursite.com/2017/10/12/Java实现二叉排序树的插入、查找和删除/</id>
    <published>2017-10-12T07:39:00.000Z</published>
    <updated>2017-10-12T07:40:12.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h2><p>又叫二叉查找树。<br>1.可以使一颗空树<br>2.若左子树不为空，则左子树上所有节点的值均小于根节点的值<br>3.若右子树不为空，则右子树上所有节点的值均大于根节点的值<br>4.左右子树也分别为二叉排序树  </p>
<h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p><strong>查找性能</strong>：含有n个节点的二叉排序树的平均查找长度和树的形态有关。<br>（最坏情况）当先后插入的关键字有序时，构成的二叉排序树蜕变为单枝树，查找性能为O(n)<br>（最好情况）二叉排序的形态和折半查找的判定树相同，平均查找长度和log2(n)成正比  </p>
<p><strong>插入、删除性能</strong>：插入、删除操作的时间复杂度都是O(logn)级的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line">//二叉树节点定义</div><div class="line">public class Node&#123;</div><div class="line">    private int value;</div><div class="line">    private Node left;</div><div class="line">    private Node right;</div><div class="line">    </div><div class="line">    public Node(Node left, Node right, int value)&#123;</div><div class="line">        this.left = left;</div><div class="line">        this.right=right;</div><div class="line">        this.value = value;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    set,get...</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class BinarySortTree&#123;</div><div class="line">    </div><div class="line">    private Node root=null;</div><div class="line">    </div><div class="line">    //查找二叉排序树中是否有key值</div><div class="line">    public boolean searchBST(int key)&#123;</div><div class="line">        Node current = root;</div><div class="line">        while(current != null)&#123;</div><div class="line">            if(key == current.getValue())</div><div class="line">                return true;</div><div class="line">            else(key &lt; current.getValue())</div><div class="line">                current=current.getLeft();</div><div class="line">            else</div><div class="line">                current=current.getRight();</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //向二叉排序树中插入节点</div><div class="line">    public void insertBST(int key)&#123;</div><div class="line">        Node p = root;</div><div class="line">        //记录查找节点的父节点</div><div class="line">        Node prev = null;</div><div class="line">        //一直查找下去，一直到满足条件的叶子节点</div><div class="line">        while(p != null)&#123;</div><div class="line">            prev=p;</div><div class="line">            if(key &lt; p.getValue())</div><div class="line">                p = p.getLeft();</div><div class="line">            else if(key &gt; p.getValue())</div><div class="line">                p = p.getRight();</div><div class="line">            else</div><div class="line">                return;//找到了相同节点就返回</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        //prev为要安放节点的父结点，根据key的大小，判断放入prev的左右节点</div><div class="line">        if(root == null)</div><div class="line">            root = new Node(key);</div><div class="line">        else if(key &lt; prev.getValue())</div><div class="line">            prev.setLeft(new Node(key));</div><div class="line">        else</div><div class="line">            prev.setRight(new Node(key));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //删除二叉排序树中的节点</div><div class="line">    分为三种情况：</div><div class="line">    (1)要删除的节点p是叶子节点，删除置空即可</div><div class="line">    (2)p只有左子树或右子树，直接让左子树/右子树代替p</div><div class="line">    (3)p既有左子树又有右子树，用p左子树中最大的那个值（最右端s）代替p，删除s，重接其左子树</div><div class="line">    public boolean delete(Node node)&#123;</div><div class="line">        Node temp = null;</div><div class="line">        //右子树为空，重接它的左子树；如果是叶子节点，在这也被置为空</div><div class="line">        if(node.getRight()==null)&#123;</div><div class="line">            temp = node;</div><div class="line">            node = node.getLeft();</div><div class="line">        &#125;</div><div class="line">        //左子树为空，重接它的右子树</div><div class="line">        else if(node.getLeft()==null)&#123;</div><div class="line">            temp = node;</div><div class="line">            node = node.getRight();</div><div class="line">        &#125;</div><div class="line">        //左右子树都不为空</div><div class="line">        else&#123;</div><div class="line">            temp = node;</div><div class="line">            Node s = node;</div><div class="line">            //转向左子树，然后向右走到尽头</div><div class="line">            s=s.getLeft();//temp是s的父结点</div><div class="line">            while(s.getRight() != null)&#123;</div><div class="line">                temp = s;</div><div class="line">                s = s.getRight();</div><div class="line">            &#125;</div><div class="line">            node.setValue(s.getValue());//将node的值设为左子树最右侧s的值</div><div class="line">            if(temp != node)&#123;</div><div class="line">                temp.setRight(s.getLeft());//见书p326</div><div class="line">            &#125;</div><div class="line">            else&#123;</div><div class="line">                temp.setLeft(s.getLeft());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;二叉排序树&quot;&gt;&lt;a href=&quot;#二叉排序树&quot; class=&quot;headerlink&quot; title=&quot;二叉排序树&quot;&gt;&lt;/a&gt;二叉排序树&lt;/h2&gt;&lt;p&gt;又叫二叉查找树。&lt;br&gt;1.可以使一颗空树&lt;br&gt;2.若左子树不为空，则左子树上所有节点的值均小于根节点的值&lt;br&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>静态代码块、构造代码块、构造函数及类初始化顺序</title>
    <link href="http://yoursite.com/2017/10/12/%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97%E3%80%81%E6%9E%84%E9%80%A0%E4%BB%A3%E7%A0%81%E5%9D%97%E3%80%81%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%8F%8A%E7%B1%BB%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/10/12/静态代码块、构造代码块、构造函数及类初始化顺序/</id>
    <published>2017-10-12T07:35:00.000Z</published>
    <updated>2017-10-12T07:35:55.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>静态代码块：用static声明，jvm加载类时执行，仅执行一次。<br>构造代码块：类中直接用{}定义，每一次创建对象时执行。<br>执行顺序优先级：<strong>静态块-&gt;main()-&gt;构造块-&gt;构造函数</strong>。  </p>
<h2 id="二、详解"><a href="#二、详解" class="headerlink" title="二、详解"></a>二、详解</h2><h3 id="1、构造函数"><a href="#1、构造函数" class="headerlink" title="1、构造函数"></a>1、构造函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public Hello()&#123;//构造函数</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.对象一建立就会调用与之相应的构造函数，也就是说，不建立对象，构造函数是不会运行的。<br>2.构造函数的作用是用于给对象初始化。<br>3.一个对象建立，构造函数只运行一次。  </p>
<h3 id="2、构造代码块"><a href="#2、构造代码块" class="headerlink" title="2、构造代码块"></a>2、构造代码块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;//构造代码块</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.构造代码块的作用是给对象进行初始化。<br>2.对象一建立就运行构造代码块了，而且优先于构造函数。有对象建立，才会运行构造代码块，类是不能调用构造代码块的。<br>3.构造代码块和构造函数的区别：<strong>构造代码块是给所有对象进行统一初始化，而构造函数是给对应的对象初始化。</strong>因为构造函数可以有多个，运行哪个构造函数就会建立什么样的对象，但无论建立哪个对象，都会执行相同的构造代码块。也就是说，构造代码块中定义的是不同对象共性的初始化内容。  </p>
<h3 id="3、静态代码块"><a href="#3、静态代码块" class="headerlink" title="3、静态代码块"></a>3、静态代码块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">static&#123;//静态代码块</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>1.<strong>它随着类的加载而执行，只执行一次，并且优先于主函数</strong>。具体说，静态代码块是由类调用的，类调用时，先执行静态代码块，然后再执行主函数。<br>2.静态代码块其实是给类初始化的，而构造代码块是给对象初始化的。<br>3.静态代码块中的变量是局部变量，与普通函数中的局部变量没有区别。<br>4.一个类中可以有多个静态代码块。  </p>
<h2 id="三、类初始化顺序"><a href="#三、类初始化顺序" class="headerlink" title="三、类初始化顺序"></a>三、类初始化顺序</h2><p>&emsp;其中，<strong>静态变量、静态初始化块，变量、初始化块（构造代码块）的初始化顺序取决于它们在类中出现的先后顺序。</strong><br>首先，访问SubClass.main()，这是一个static方法，于是装载器会寻找已经编译的SubClass.class文件。在装载过程中，如果注意到有基类（extends），会装载基类。不管创不创建基类对象，这个过程都会发生。之后是正常的初始化顺序：  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F.png" alt="image"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">class Parent&#123;</div><div class="line">    public static String p_StaticField=&quot;父类--静态变量&quot;;</div><div class="line">    </div><div class="line">    public String p_Field=&quot;父类--变量&quot;;</div><div class="line">    protected int i=9;</div><div class="line">    protected int j=0;</div><div class="line">    </div><div class="line">    static&#123;</div><div class="line">        System.out.println(p_StaticField);</div><div class="line">        System.out.println(&quot;父类--静态初始化块&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    &#123;</div><div class="line">        System.out.println(p_Field);</div><div class="line">        System.out.println(&quot;父类--初始化块&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public Parent()&#123;</div><div class="line">        System.out.println(&quot;父类--构造器&quot;);</div><div class="line">        System.out.println(&quot;i=&quot; + i+ &quot;,j=&quot; + j);</div><div class="line">        j=20;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class SubClass extends Parent&#123;</div><div class="line">    public static String s_StaticField=&quot;子类--静态变量&quot;;</div><div class="line">    </div><div class="line">    public String s_Field=&quot;子类--变量&quot;;</div><div class="line">    </div><div class="line">    static&#123;</div><div class="line">        System.out.println(s_StaticField);</div><div class="line">        System.out.println(&quot;子类--静态初始化块&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    &#123;</div><div class="line">        System.out.println(s_Field);</div><div class="line">        System.out.println(&quot;子类--初始化块&quot;);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public SubClass()&#123;</div><div class="line">        System.out.println(&quot;子类--构造器&quot;);</div><div class="line">        System.out.println(&quot;i=&quot; + i+ &quot;,j=&quot; + j);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        System.out.println(&quot;子类main方法&quot;);</div><div class="line">        new SubClass();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">运行结果：  </div><div class="line">父类--静态变量  </div><div class="line">父类--静态初始化块  </div><div class="line">子类--静态变量  </div><div class="line">子类--静态初始化块  </div><div class="line">子类main方法  </div><div class="line">父类--变量  </div><div class="line">父类--初始化块  </div><div class="line">父类--构造器  </div><div class="line">i=9, j=0  </div><div class="line">子类--变量  </div><div class="line">子类--初始化块  </div><div class="line">子类--构造器  </div><div class="line">i=9,j=20</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;静态代码块：用static声明，jvm加载类时执行，仅执行一次。&lt;br&gt;构造代码块：类中直接用{}定义，每一次创建对象时执行
    
    </summary>
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>字符串、基本数据类型等在堆、栈、常量池中的存储</title>
    <link href="http://yoursite.com/2017/10/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%AD%89%E5%9C%A8%E5%A0%86%E3%80%81%E6%A0%88%E3%80%81%E5%B8%B8%E9%87%8F%E6%B1%A0%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8/"/>
    <id>http://yoursite.com/2017/10/11/字符串、基本数据类型等在堆、栈、常量池中的存储/</id>
    <published>2017-10-11T12:56:00.000Z</published>
    <updated>2017-10-11T12:56:13.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、对于字符串"><a href="#一、对于字符串" class="headerlink" title="一、对于字符串"></a>一、对于字符串</h1><p>字符串的对象引用都是存储在栈中的。如果是编译期已经创建好的（直接用双引号定义的），对象存储在常量池中；如果是运行期才能确定的（new出来的），对象存储在堆中。对于equals相等的字符串，常量池中只有一份，堆中可以有多份。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String s1=&quot;china&quot;;</div><div class="line">String s2=&quot;china&quot;;</div><div class="line">String ss1=new String(&quot;china&quot;);</div><div class="line">String ss2=new String(&quot;china&quot;);</div></pre></td></tr></table></figure></p>
<p>通过new产生一个字符串“china”时，会先去常量池中查找是否已经有了“china”，如果没有，就在常量池中创建一个此字符串对象，然后在堆中再创建一个常量池中此“china”对象的拷贝对象。  </p>
<h1 id="二、对于基础类型的变量和常量"><a href="#二、对于基础类型的变量和常量" class="headerlink" title="二、对于基础类型的变量和常量"></a>二、对于基础类型的变量和常量</h1><p>局部变量（包括形式参数）：数据存在于栈内存中，栈内存中的局部变量随着方法的消失而消失。<br>成员变量：存储在堆中的对象里面，由垃圾收集器负责回收。<br>常量、静态变量：存储在方法区中（常量池）。  </p>
<h1 id="三、Java中的两种数据类型"><a href="#三、Java中的两种数据类型" class="headerlink" title="三、Java中的两种数据类型"></a>三、Java中的两种数据类型</h1><h2 id="1、八种基本类型"><a href="#1、八种基本类型" class="headerlink" title="1、八种基本类型"></a>1、八种基本类型</h2><p>byte,short,int,long,char,double,float,boolean。如函数中的int a=3，a是一个指向3这个字面值的引用。存在于栈中，数据可以共享。同时定义int a=3和int b=3，a和b会同时指向3。<br>字面值的引用和类对象引用不同。两类对象引用同时指向一个对象，若一个对象引用变量修改了这个对象的内部状态，那么对另一个对象引用也即刻反映出变化，但字面值引用不会。  </p>
<h2 id="2、包装类数据"><a href="#2、包装类数据" class="headerlink" title="2、包装类数据"></a>2、包装类数据</h2><p>Integer,Double等。这些数据全部存在于堆中，Java中用new语句显式的告诉编译器运行时根据需要动态创建，灵活但更占用时间。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args)&#123;</div><div class="line">    int a1=1;</div><div class="line">    int b1=1;</div><div class="line">    int c1=2;</div><div class="line">    int d1=a1+b1;</div><div class="line">    </div><div class="line">    Integer a=1;</div><div class="line">    Integer b=2;</div><div class="line">    Integer c=3;</div><div class="line">    Integer d=3</div><div class="line">    </div><div class="line">    Integer e=321;</div><div class="line">    Integer f=321;</div><div class="line">    </div><div class="line">    System.out.println(a1==b1);//true</div><div class="line">    System.out.println(c1==d1);//true</div><div class="line">    System.out.println(c==(a+b));//true</div><div class="line">    System.out.println(c==d);//true</div><div class="line">    System.out.println(c==d);//false</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在自动装箱时（int-&gt;Integer时），当int值在-128~127时，返回的不是一个新New出来的Integer对象，而是一个已经缓存在堆中的Integer对象；若不在范围，则返回一个新new出来的Integer对象。<br>System.out.println(c1==d1);//true：先创建一个c1的引用，查找有没有字面值为2的地址，没找到，就开辟一个存放2这个字面值的地址，将c1指向2的地址。d1为两个字面值相加也为2，由于在栈中已经有2这个字面量的地址，因此将d1直接指向2的地址，所以c1和d1的指向相同。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、对于字符串&quot;&gt;&lt;a href=&quot;#一、对于字符串&quot; class=&quot;headerlink&quot; title=&quot;一、对于字符串&quot;&gt;&lt;/a&gt;一、对于字符串&lt;/h1&gt;&lt;p&gt;字符串的对象引用都是存储在栈中的。如果是编译期已经创建好的（直接用双引号定义的），对象存储在常量池中
    
    </summary>
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java对象的创建过程</title>
    <link href="http://yoursite.com/2017/10/11/Java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/10/11/Java对象的创建过程/</id>
    <published>2017-10-11T09:35:00.000Z</published>
    <updated>2017-10-11T09:35:48.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、对象的创建"><a href="#一、对象的创建" class="headerlink" title="一、对象的创建"></a>一、对象的创建</h1><h2 id="对象创建有以下几个步骤："><a href="#对象创建有以下几个步骤：" class="headerlink" title="对象创建有以下几个步骤："></a>对象创建有以下几个步骤：</h2><p>1.虚拟机遇到一条new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，必须先执行相应的类加载过程。<br>2.在类加载检查通过后，接下来虚拟机为新生对象分配内存。<br>3.内存分配后，虚拟机将分配到的内存空间都初始化为零值（不包括对象头）。<br>4.执行<init>方法，把对象按照程序员的意愿进行初始化。<br>5.将对象在堆上分配的内存地址赋给实例变量。  </init></p>
<h2 id="初始化顺序："><a href="#初始化顺序：" class="headerlink" title="初始化顺序："></a>初始化顺序：</h2><p>1、先父类，后子类<br>2、先属性，再构造代码块，最后构造函数<br>3、先静态，后非静态<br>4、同一类型，按代码顺序先后执行  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B.png" alt="image">  </p>
<h1 id="二、对象的内存布局"><a href="#二、对象的内存布局" class="headerlink" title="二、对象的内存布局"></a>二、对象的内存布局</h1><p>对象在内存中存储的布局可以分为三块区域：<strong>对象头、实例数据和对齐填充</strong>。  </p>
<h2 id="对象头"><a href="#对象头" class="headerlink" title="对象头"></a>对象头</h2><p>包括两部分，第一部分用于存储对象自身的运行时数据，如哈希码、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID等。另一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。  </p>
<h2 id="实例数据"><a href="#实例数据" class="headerlink" title="实例数据"></a>实例数据</h2><p>实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。无论是从父类继承下来的，还是子类中定义的，都需要记录下来（包括private的）。  </p>
<h2 id="对齐填充"><a href="#对齐填充" class="headerlink" title="对齐填充"></a>对齐填充</h2><p>非必要存在，仅仅起着占位符的作用。  </p>
<h1 id="三、对象的访问定位"><a href="#三、对象的访问定位" class="headerlink" title="三、对象的访问定位"></a>三、对象的访问定位</h1><p>建立对象是为了使用对象，java程序通过栈上的reference数据来操作堆上的具体对象。主流的访问方式主要有<strong>使用句柄</strong>和<strong>直接指针</strong>两种。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%AF%B9%E8%B1%A1%E8%AE%BF%E9%97%AE%E5%AE%9A%E4%BD%8D.jpg" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、对象的创建&quot;&gt;&lt;a href=&quot;#一、对象的创建&quot; class=&quot;headerlink&quot; title=&quot;一、对象的创建&quot;&gt;&lt;/a&gt;一、对象的创建&lt;/h1&gt;&lt;h2 id=&quot;对象创建有以下几个步骤：&quot;&gt;&lt;a href=&quot;#对象创建有以下几个步骤：&quot; class=&quot;
    
    </summary>
    
      <category term="深入理解Java虚拟机" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java虚拟机" scheme="http://yoursite.com/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>深入java虚拟机之垃圾收集器</title>
    <link href="http://yoursite.com/2017/10/11/JVM%E4%B9%8B%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
    <id>http://yoursite.com/2017/10/11/JVM之垃圾收集器/</id>
    <published>2017-10-11T02:33:00.000Z</published>
    <updated>2017-10-11T02:40:33.526Z</updated>
    
    <content type="html"><![CDATA[<h3 id="七种垃圾收集器"><a href="#七种垃圾收集器" class="headerlink" title="七种垃圾收集器"></a>七种垃圾收集器</h3><p>1、Serial（串行GC）-复制<br>2、ParNew（并行GC）-复制<br>3、Parallel Scavenge（并行回收GC）-复制<br>4、Serial Old(MSC)（串行GC）-标记-整理<br>5、CMS（并发GC）-标记-清除<br>6、Parallel Old（并行GC）-标记-整理<br>7、G1（jdk1.7才正式商用）<br>其中，1~3用于年轻代垃圾回收（minor GC），4~6用于老年代垃圾回收（full GC），G1独立完成“分代垃圾回收”。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8.jpg" alt="image">  </p>
<h3 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h3><p><strong>并行</strong>：多条垃圾回收线程同时操作<br><strong>并发</strong>：垃圾回收线程和用户线程一起操作，但不一定是并行的，可能交替执行。  </p>
<h3 id="常用的五种组合"><a href="#常用的五种组合" class="headerlink" title="常用的五种组合"></a>常用的五种组合</h3><p>1、Serial/Serial Old<br>2、ParNew/Serial Old，与上面相比，只是比年轻代多了多线程垃圾回收而已<br>3、ParNew/CMS，当下比较高校的组合<br>4、Parallel Scavenge/Parallel Old，自动管理的组合<br>5、G1，最先进的收集器，需要jdk1.7update14以上  </p>
<h2 id="一、新生代垃圾收集器"><a href="#一、新生代垃圾收集器" class="headerlink" title="一、新生代垃圾收集器"></a>一、新生代垃圾收集器</h2><h3 id="1、Serial收集器"><a href="#1、Serial收集器" class="headerlink" title="1、Serial收集器"></a>1、Serial收集器</h3><p><img src="http://osrmzp0jr.bkt.clouddn.com/Serial%E6%94%B6%E9%9B%86%E5%99%A8.png" alt="image">  </p>
<p>是最基础、最古老的收集器，是一个单线程的收集器，是Client模式下的默认收集器。<br><strong>优点</strong>：简单高效（与其他收集器的单线程比），对于限定单个CPU的环境下，Serial收集器由于没有线程交互的开销，专心做垃圾收集可以获得最高的单线程收集效率。<br><strong>缺点</strong>：是单线程处理，并且会stop the world，即在它进行垃圾收集时，必须暂停其他所有的工作线程，这对很多应用来说难以接受的。<br><strong>应用</strong>：Serial收集器对于运行在Client模式下的虚拟机来说是一个很好的选择。  </p>
<h3 id="2、ParNew收集器"><a href="#2、ParNew收集器" class="headerlink" title="2、ParNew收集器"></a>2、ParNew收集器</h3><p><img src="http://osrmzp0jr.bkt.clouddn.com/parnew.png" alt="image">  </p>
<p>其实就是Serial收集器的多线程版本，除了使用多条线程进行垃圾收集之外，其他都与Serial完全一样。<br><strong>特点</strong>：<br>1.是并行收集器<br>2.是server模式下的首选收集器<br>3.可以和CMS收集器相配合，但是Parallel Scavenge与CMS是无法配合的<br>4.使用复制算法进行垃圾回收  </p>
<h3 id="3、Parallel-Scavenge收集器"><a href="#3、Parallel-Scavenge收集器" class="headerlink" title="3、Parallel Scavenge收集器"></a>3、Parallel Scavenge收集器</h3><p><img src="http://osrmzp0jr.bkt.clouddn.com/Parallel%20Scavenge.png" alt="image">  </p>
<p>&emsp;Parallel Scavenge的关注点和其他收集器不同，<strong>CMS等收集器的关注点是尽可能的缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge的目的是达到一个可控制的吞吐量</strong>。<br>吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)<br>&emsp;停顿时间越短就越适合需要与用户交互的程序，良好的响应速度可以提升用户体验；而<strong>高吞吐量则可以高效率的利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</strong>  </p>
<h2 id="二、老年代垃圾收集器"><a href="#二、老年代垃圾收集器" class="headerlink" title="二、老年代垃圾收集器"></a>二、老年代垃圾收集器</h2><h3 id="1、Serial-Old收集器"><a href="#1、Serial-Old收集器" class="headerlink" title="1、Serial Old收集器"></a>1、Serial Old收集器</h3><p>是Serial收集器的老年代版本。<br><strong>特点</strong>：<br>1.是一个单线程收集器<br>2.使用标记-整理算法<br>3.主要在Client模式下使用<br>&emsp;在Server模式下，主要有两个用途：一个是在jdk1.5前与Parallel Scavenge配合使用，还有一个是作为CMS的后备预案，在发生Concurrent Mode Failure时使用。  </p>
<h3 id="2、Parallel-Old收集器"><a href="#2、Parallel-Old收集器" class="headerlink" title="2、Parallel Old收集器"></a>2、Parallel Old收集器</h3><p>是Parallel Scavenge老年代版本。<br><strong>特点</strong>：<br>1.多线程<br>2.标记-整理算法<br>3.jdk1.6之后提供<br><strong>作用</strong>：在Parallel Old之前，如果新生代选择了Parallel Scavenge，那么老年代只能选择Serial Old，由于Serial Old的拖累，使用整体性能不一定比ParNew/CMS高。直到有了Parallel Old，“吞吐量优先”菜真正有了名副其实的组合。  </p>
<h3 id="3、CMS（Concurrent-Mark-Sweep）收集器"><a href="#3、CMS（Concurrent-Mark-Sweep）收集器" class="headerlink" title="3、CMS（Concurrent Mark Sweep）收集器"></a>3、CMS（Concurrent Mark Sweep）收集器</h3><p><img src="http://osrmzp0jr.bkt.clouddn.com/CMS.png" alt="image">  </p>
<p><strong>是一种追求回收停顿时间最短的收集器。</strong>  是基于“标记-清除”算法实现的。<br><strong>分为四个步骤</strong>：<br><strong>1.初始标记</strong>：仅仅是标记一下GC Roots能直接关联到的对象，速度很快<br><strong>2.并发标记</strong>：进行GC Roots的追踪过程<br><strong>3.重新标记</strong>：为了修正并发标记期间由于用户程序继续运作而导致标记产生变动的那一部分对象的标示记录<br><strong>4.标记清除</strong><br>&emsp;其中，初始标记和重新标记仍然需要“Stop the world”，但是由于整个过程中最耗时的并发标记和并发清除过程是可以与用户线程一起工作的，所以从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。<br><strong>优点</strong>：并发收集，低停顿<br><strong>缺点</strong>：<br>1.对cpu资源非常敏感<br>2.无法处理浮动垃圾，当CMS运行期间预留的内存无法满足程序需要，会出现“Concurrent Mode Failure”<br>3.标记-清除算法，会产生大量的空间碎片<br>&emsp;默认条件下，当老年代使用68%即触发GC，1.6中已提高为92%。  </p>
<h2 id="三、通用收集器G1（Garbage-First）"><a href="#三、通用收集器G1（Garbage-First）" class="headerlink" title="三、通用收集器G1（Garbage-First）"></a>三、通用收集器G1（Garbage-First）</h2><p><img src="http://osrmzp0jr.bkt.clouddn.com/G1.png" alt="image">  </p>
<p>1.7u14后正式提供商用G1，以前都是测试用的。G1是一款面向服务端应用的垃圾收集器。<br><strong>特点</strong>：<br>1.并行与并发<br>2.分代收集<br>3.空间整合：基于“标记-整理”，不会产生内存空间碎片<br>4.可预测的停顿：能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间不得超过N毫秒。<br>&emsp;G1将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留了新生代和老年代的概念，但是他们并不是物理隔离的了，他们都是一部分Region（不需要连续）的集合。G1跟踪各个Region里面垃圾堆积的价值大小，在后台维护一个优先列表，每次根据允许的收集时间，优先回收价值最大的Region，这也就是Garbage-First的由来。<br><strong>难题</strong>：对象可能在不同的Region中引用。<br><strong>解决方法</strong>：G1通过Remember Set来避免进行全堆扫描。G1中每个Region都有一个对应的Remember Set，一旦发现一个对象引用了另一个Region的对象，就通过CardTable把相关引用信息记录到被引用对象所属的Region的Remember Set中。当进行GC时，在GC根节点的枚举范围中加入Remember Set，就可以保证不对全堆扫描也不会有遗漏。<br><strong>主要有以下几个步骤</strong>：<br><strong>1.初始标记</strong>：标记一下GC Roots能直接关联到的对象，并修改TAMS的值，让下一阶段用户程序并发运行时，能在正确可用的Region中创建新对象<br><strong>2.并发标记</strong>：从GC Roots进行可达性分析，找出存活对象<br><strong>3.最终标记</strong>：为了修正并发标记期间由于用户程序继续运作而导致标记产生变动的那一部分对象的标示记录<br><strong>4.筛选回收</strong>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;七种垃圾收集器&quot;&gt;&lt;a href=&quot;#七种垃圾收集器&quot; class=&quot;headerlink&quot; title=&quot;七种垃圾收集器&quot;&gt;&lt;/a&gt;七种垃圾收集器&lt;/h3&gt;&lt;p&gt;1、Serial（串行GC）-复制&lt;br&gt;2、ParNew（并行GC）-复制&lt;br&gt;3、Parall
    
    </summary>
    
      <category term="深入理解Java虚拟机" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java虚拟机" scheme="http://yoursite.com/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>深入java虚拟机之垃圾回收算法</title>
    <link href="http://yoursite.com/2017/10/10/JVM%E4%B9%8B%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/10/10/JVM之垃圾回收算法/</id>
    <published>2017-10-10T13:06:00.000Z</published>
    <updated>2017-10-10T13:06:59.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、判断对象是否已死"><a href="#一、判断对象是否已死" class="headerlink" title="一、判断对象是否已死"></a>一、判断对象是否已死</h1><h2 id="1、引用计数算法"><a href="#1、引用计数算法" class="headerlink" title="1、引用计数算法"></a>1、引用计数算法</h2><p>给对象添加一个引用计数器，每当有一个地方引用它时，计数器就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。<br>缺点：难以解决循环引用的问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ReferenceCountingGC objA = new ReferenceCountingGC();</div><div class="line">ReferenceCountingGC objB = new ReferenceCountingGC();</div><div class="line">objA.instance=objB;</div><div class="line">objB.instance=objA;</div><div class="line"></div><div class="line">objA=null;</div><div class="line">objB=null;</div></pre></td></tr></table></figure></p>
<h2 id="2、可达性分析算法"><a href="#2、可达性分析算法" class="headerlink" title="2、可达性分析算法"></a>2、可达性分析算法</h2><p>通过一系列称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时，说明该对象是不可用的。<br><strong>可作为GC Roots的对象为：</strong><br>①虚拟机栈中引用的对象<br>②方法区中类静态属性引用的对象<br>③方法区中常量引用的对象<br>④本地方法栈中Native方法引用的对象  </p>
<h2 id="3、引用"><a href="#3、引用" class="headerlink" title="3、引用"></a>3、引用</h2><p><strong>强引用（Strong Reference）</strong>：指在程序代码中普遍存在的，类似A a = new A()这样的引用，只要强引用还存在，垃圾回收器永远不会回收掉被引用的对象。<br><strong>软引用（Soft Reference）</strong>：用来描述一些还有用但并非必需的对象。对于软引用关联的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收还没有足够的内存，才会抛出内存溢出异常。<br><strong>弱引用（Weak Reference）</strong>：用来描述非必需对象的，但是它的强度比软引用更弱一些，被软引用关联的对象只能生存到下一次垃圾收集之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被软引用关联的对象。<br><strong>虚引用（Phantom Reference）</strong>：称为幽灵引用，是最弱的一种引用关系。一个对象是否有虚引用的存在，不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。对一个对象设置虚引用关联的唯一目的是用来跟踪对象被垃圾回收的状态。  </p>
<h2 id="4、finalize自救"><a href="#4、finalize自救" class="headerlink" title="4、finalize自救"></a>4、finalize自救</h2><p>即使在可达性分析算法中不可达的对象，也并非是“非死不可”的，要真正宣告一个对象死亡，需要经历两次标记过程：<br>1、如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选条件是此对象是否有必要执行finalize方法。当对象没有覆盖finalize方法，或者finalize方法已经被虚拟机调用过，虚拟机将这两种情况视为“没有必要执行”，这时对象宣告死亡。<br>2、如果对象被判定有必要执行finalize，那么该对象会放置在一个F-Queue的队列中，并在稍后由一个虚拟机自动建立的、低优先级的Finalizer线程去执行。finalize方法是对象逃脱死亡命运的最后一次机会，稍后GC会对F-Queue中的对象进行第二次小规模的标记，如果对象在finalize()中成功拯救自己——只要重新与引用链的任何一个对象建立连接即可，譬如把自己（this）赋值给某个类变量或者对象的成员变量，那么第二次标记时它将被移除“即将回收”的集合；否则，它就会被真的回收了。<br>注意：任何一个对象的finalize方法都只会被系统自动调用一次。  </p>
<h1 id="二、垃圾回收算法"><a href="#二、垃圾回收算法" class="headerlink" title="二、垃圾回收算法"></a>二、垃圾回收算法</h1><h2 id="1、标记-清除算法"><a href="#1、标记-清除算法" class="headerlink" title="1、标记-清除算法"></a>1、标记-清除算法</h2><p>分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。<br>有两点不足之处：<br>①一个是效率问题，标记和清除两个过程的效率都不高；<br>②另一个是空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。  </p>
<h2 id="2、复制算法"><a href="#2、复制算法" class="headerlink" title="2、复制算法"></a>2、复制算法</h2><h3 id="①普通的复制算法"><a href="#①普通的复制算法" class="headerlink" title="①普通的复制算法"></a>①普通的复制算法</h3><p>将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这块内存用完了，就将还存活着的对象复制到另一块上面，然后再把已使用过的内存一次清理掉。<br>这样每次都是对整个半区进行内存回收，不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。<br>代价：内存使用率只有原来的一半。  </p>
<h3 id="②改进的复制算法"><a href="#②改进的复制算法" class="headerlink" title="②改进的复制算法"></a>②改进的复制算法</h3><p>不是按照1:1的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间。在回收时，会把Eden和其中一个Survivor中还存活的对象一次性放到另一个空的Survivor中，然后清除之前的Eden和第一个Survivor。为了区分，一般称第一个为From Survivor，第二个为To Survivor。他们的比例为8:1:1，只会浪费10%的空间。<br>内存担保：有可能存活的对象大于10%，一个Survivor放不下，这时需要有其他内存来作担保，这里会以老年代作为担保。如果放不下，那么通过分配担保机制直接进入老年代。  </p>
<h2 id="3、标记-整理算法"><a href="#3、标记-整理算法" class="headerlink" title="3、标记-整理算法"></a>3、标记-整理算法</h2><p>老年代没有其他内存给它做担保，所以不能使用复制算法。先标记需要回收的对象，然后把活着的对象向一端进行移动，使他们在物理上连续，然后把边界右侧的内存直接清理掉。<br>没有内存碎片，但是效率会稍微低一点，因为要移动对象。  </p>
<h2 id="4、分代收集算法"><a href="#4、分代收集算法" class="headerlink" title="4、分代收集算法"></a>4、分代收集算法</h2><p>根据对象存活周期的不同将内存划分为几块，一般把Java堆分为<strong>新生代</strong>和<strong>老年代</strong>，根据年代的特点采用最适当的收集算法。<br>在<strong>新生代</strong>中，每次垃圾收集时都有大批对象死去，只有少量存活，选用“复制算法”，只需要付出少量存活对象的复制成本就可以完成收集。<br>而在<strong>老年代</strong>中，对象存活率高、没有额外空间对它进行分配担保，就使用“标记-清除”或者“标记-整理”算法来进行回收。  </p>
<h1 id="三、新生代、老年代和永久代"><a href="#三、新生代、老年代和永久代" class="headerlink" title="三、新生代、老年代和永久代"></a>三、新生代、老年代和永久代</h1><p>java虚拟机垃圾收集器关注的内存结构如下：<br><img src="http://osrmzp0jr.bkt.clouddn.com/20141107224401036.png" alt="image"><br>堆大小=新生代+老年代，新生代与老年代的比例为1：2，新生代细分为一块较大的Eden空间和两块较小的Survivor空间，分别被命名为from和to。  </p>
<h2 id="1、新生代"><a href="#1、新生代" class="headerlink" title="1、新生代"></a>1、新生代</h2><p>新创建的对象一般都在新生代中分配内存空间，新生代采用“复制算法”进行垃圾回收，可见上面改进的复制算法。<br>java虚拟机对新生代的垃圾回收称为<strong>Minor GC</strong>，次数比较频繁，每次的回收时间较短。使用虚拟机的-Xmn参数可以指定新生代内存大小。  </p>
<h2 id="2、老年代"><a href="#2、老年代" class="headerlink" title="2、老年代"></a>2、老年代</h2><p>老年代中的对象一般都是长生命周期对象，对象的存活率比较高。当新生代垃圾收集器回收几次之后仍然存活的对象会被移动到老年代内存中（默认是15岁），当大对象无法在新生代找到足够的连续内存时也会直接在老年代中创建。<br>老年代中使用“标记-清除”或者“标记-整理”算法进行垃圾回收。java虚拟机对老年代的回收称为<strong>MajorGC/Full GC</strong>，次数相对比较少，每次回收的时间也比较长。<br>在新生代中没有足够空间为对象创建分配内存，老年代中内存回收也无法回收到足够的内存空间，并且新生代和老年代都无法扩展时，堆就会产生OutOfMemoryError异常。虚拟机-Xms参数指定最小内存大小，-Xmx参数指定最大内存大小，与新生代大小参数-Xmn之差可计算出老年代最小和最大容量。  </p>
<h2 id="3、永久代"><a href="#3、永久代" class="headerlink" title="3、永久代"></a>3、永久代</h2><p>永久代指的是虚拟机内存中的方法区，被各个线程共享的内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。永久代垃圾回收比较少，效率也比较低，但也必须进行垃圾回收，否则永久代内存不够用时仍然会抛出OutOfMemoryError异常。永久代也使用“标记-清除”或者“标记-整理”算法进行垃圾回收。虚拟机参数-XX：PermSize和-XX：MaxPermSize可以设置永久代的初始大小和最大容量。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、判断对象是否已死&quot;&gt;&lt;a href=&quot;#一、判断对象是否已死&quot; class=&quot;headerlink&quot; title=&quot;一、判断对象是否已死&quot;&gt;&lt;/a&gt;一、判断对象是否已死&lt;/h1&gt;&lt;h2 id=&quot;1、引用计数算法&quot;&gt;&lt;a href=&quot;#1、引用计数算法&quot; cla
    
    </summary>
    
      <category term="深入理解Java虚拟机" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java虚拟机" scheme="http://yoursite.com/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java中的异常和处理</title>
    <link href="http://yoursite.com/2017/10/09/Java%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%92%8C%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2017/10/09/Java中的异常和处理/</id>
    <published>2017-10-09T08:49:00.000Z</published>
    <updated>2017-10-09T08:52:45.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>程序运行时，发生超出预期的事件，阻止了程序按照程序员的预期正常执行，这就是异常。Java中的解决方法为<strong>异常处理机制</strong>。<br>异常处理机制能让程序在异常发生时，按照代码预先设定的异常处理逻辑，针对性的处理异常，让程序尽最大可能恢复正常并继续执行，且保持代码的清晰。<br>java中的异常可以是函数中的语句执行时引发的，也可以是程序员通过throw关键字手动抛出的，只要程序中产生了异常，就会用一个对应类型的异常对象来封装异常，jre就会试图寻找异常处理程序来处理异常。<br>Throwable类是Java异常类型的顶层父类，一个对象只有是Throwable类的实例，他才是一个异常对象，才能被异常处理机制识别。jdk中内置了一些常用的异常类，同时程序员自己也可以自定义异常。  </p>
<h1 id="java异常的分类和类结构图"><a href="#java异常的分类和类结构图" class="headerlink" title="java异常的分类和类结构图"></a>java异常的分类和类结构图</h1><p>Throwable类是顶层父类，Throwable类派生出Error类和Exception类。<br><strong>错误</strong>：Error类以及他的子类的实例，代表了JVM本身的错误。错误不能被程序员通过代码处理，Error很少出现。<br><strong>异常</strong>：Exception以及它的子类，代表程序运行时发送的各种不期望发生的事件。<strong>可以被java异常处理机制使用，是异常处理的核心</strong>。<br><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB.jpg" alt="image"><br>根据javac对异常的处理要求，将异常类分为2类：<br><strong>非检查异常（unchecked exception）</strong>：Error和RuntimeException以及他们的子类。javac在编译时，不会提示和发现这样的异常，不要求在程序中处理这些异常。对于这样的异常，我们可以编写代码处理（try…catch…finally），也可以不处理。对于这些异常，我们要做的应该是修正代码，而不是去通过异常处理器处理。这样的异常多半是代码编写的问题。如除0错误ArithmeticException，错误的类型强转错误ClassCastException，数组越界错误ArrayIndexOutOfBoundsException，空指针错误NullPointerException等等。<br><strong>检查异常（checked exception）</strong>：除了Error和RuntimeException的其它异常。javac强制要求程序员为这样的异常做预备处理工作（try…catch…finally）。在方法中，<strong>要么通过try-catch语句捕获异常并处理，要么用throws子句声明交给函数调用者去解决</strong>，否则编译不会通过。这种异常一般由程序的运行环境导致的。因为程序可能被运行在各种未知的环境下，但是程序员无法干预用户如何使用他编写的程序，于是程序员就应该为这样的异常时刻准备着，如SQLException，IOException，ClassNotFoundException，FileNotFoundException等等。<br>这里的检查与非检查是针对javac而言的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;程序运行时，发生超出预期的事件，阻止了程序按照程序员的预期正常执行，这就是异常。Java中的解决方法为&lt;strong&gt;异常处理机制&lt;/str
    
    </summary>
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>（转）Java中锁概念总结</title>
    <link href="http://yoursite.com/2017/09/30/%EF%BC%88%E8%BD%AC%EF%BC%89Java%E4%B8%AD%E9%94%81%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/09/30/（转）Java中锁概念总结/</id>
    <published>2017-09-30T02:41:04.000Z</published>
    <updated>2017-09-30T02:41:52.938Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="http://www.jianshu.com/p/4a8415140406" target="_blank" rel="external">http://www.jianshu.com/p/4a8415140406</a></p>
<h2 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h2><p><strong>公平锁</strong>：多个线程申请获取同一个锁，按照线程的申请顺序，排队获取锁。公平锁的好处是等待的线程不会被饿死，相应的缺陷就是整体吞吐量很低、效率很低。使用new ReentrantLock(true)可以构造一个公平锁。<br><strong>非公平锁</strong>：多个线程申请获取同一个锁，获取锁的顺序不按照申请顺序，抢占式的获取。非公平锁的好处是整体效率很高，但是可能会使有些线程一致在等待，造成饿死。使用Synchronized、new ReentrantLock()和new ReentrantLock(false)可以构建一个非公平锁。  </p>
<h2 id="共享锁和独占锁"><a href="#共享锁和独占锁" class="headerlink" title="共享锁和独占锁"></a>共享锁和独占锁</h2><p><strong>共享锁</strong>：简单的理解就是锁可以被多个线程持有。在实际使用过程中，线程A获取到了共享资源D的共享锁，其它线程只能获取D的共享锁，不能获取独占锁。<br><strong>独占锁</strong>：一次只能有一个线程获得锁，即只能被一个线程持有。在实际使用过程中，线程A获取到了共享资源D的独占锁，其它线程不能获取D的任何类型锁。  </p>
<h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><p><strong>读写锁</strong>一次只有一个线程（writer线程）可以修改共享数据，但在许多情况下，任何数量的线程可以同时读取共享数据（reader线程）。Java中的读写锁通过ReentrantReadWriteLock实现。ReentrantReadWriteLock.ReadLock是读锁，它是共享锁。ReentrantReadWriteLock.WriteLock是写锁，它是独占锁。  </p>
<h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><p><strong>互斥锁</strong>即一次只能有一个线程持有的锁。ReentrantLock和synchronized都是互斥锁。  </p>
<h2 id="悲观锁和乐观锁"><a href="#悲观锁和乐观锁" class="headerlink" title="悲观锁和乐观锁"></a>悲观锁和乐观锁</h2><p><strong>悲观锁</strong>认为对同一数据的并发操作一定会出现冲突问题，所以，在对数据操作之前一定要加锁。Java编码中悲观锁的实现有很多种，for update就是一种。<br><strong>乐观锁</strong>认为对同一数据的并发操作不会出现冲突问题，数据操作不加锁，会在操作提交时检查数据的完整性。Java中常用的乐观锁方式有版本号、时间戳。  </p>
<h2 id="偏向锁、轻量级锁、重量级锁"><a href="#偏向锁、轻量级锁、重量级锁" class="headerlink" title="偏向锁、轻量级锁、重量级锁"></a>偏向锁、轻量级锁、重量级锁</h2><p><strong>偏向锁</strong>：对于一段同步代码来说，锁偏向于第一次获取它的线程，如果继续执行的过程中，锁没有被其它线程持有，则持有偏向锁的线程将不需要同步，自动获取锁。<br><strong>轻量级锁</strong>：当偏向锁被另一个线程持有的时候，偏向锁升级为轻量级锁，其它线程通过自旋转的方式尝试获取锁。<br><strong>重量级锁</strong>：当轻量级锁被另一个线程持有的时候，轻量级锁升级为重量级锁。  </p>
<h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>Java线程在得不到锁时不会立即阻塞，而是执行一个循环，不断的去尝试获取锁，这种技术就是<strong>自旋锁</strong>。它可以减少在获取锁的过程中，因为线程上下文的切换而导致的额外消耗。  </p>
<h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p><strong>可重入锁</strong>，也称为递归锁，即线程在获取到某方法的锁之后，如果在该方法内部调用其它方法，这个方法也需要获取锁，那么进入这个方法将自动获取锁，它可以在一定程度上避免死锁。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文链接：&lt;a href=&quot;http://www.jianshu.com/p/4a8415140406&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/4a8415140406&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java并发" scheme="http://yoursite.com/tags/java%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java多线程之锁优化策略</title>
    <link href="http://yoursite.com/2017/09/30/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%94%81%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5/"/>
    <id>http://yoursite.com/2017/09/30/Java多线程之锁优化策略/</id>
    <published>2017-09-30T02:26:04.000Z</published>
    <updated>2017-09-30T02:26:45.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、编码过程中可采取的锁优化的思路："><a href="#一、编码过程中可采取的锁优化的思路：" class="headerlink" title="一、编码过程中可采取的锁优化的思路："></a>一、编码过程中可采取的锁优化的思路：</h1><h2 id="1、减少锁持有时间"><a href="#1、减少锁持有时间" class="headerlink" title="1、减少锁持有时间"></a>1、减少锁持有时间</h2><p>如：对一个方法加锁，不如对方法中需要同步的几行代码加锁。  </p>
<h2 id="2、减小锁粒度"><a href="#2、减小锁粒度" class="headerlink" title="2、减小锁粒度"></a>2、减小锁粒度</h2><p>如：jdk1.6中，  ConcurrentHashMap中采取对segement加锁而不是整个map加锁，提高并发性。类似数据库中的行锁对表锁的优势。  </p>
<h2 id="3、锁分离"><a href="#3、锁分离" class="headerlink" title="3、锁分离"></a>3、锁分离</h2><p>根据同步操作的性质，把锁划分为读锁和写锁，读锁之间不互斥，提高了并发性。  </p>
<h2 id="4、锁粗化"><a href="#4、锁粗化" class="headerlink" title="4、锁粗化"></a>4、锁粗化</h2><p>在一个间隔性需要执行同步语句的线程中，如果在不连续的同步块间频繁加锁解锁是很耗性能的，因此把加锁范围扩大，把这些不连续的同步语句进行一次性加锁解锁。虽然线程持有锁的时间增加了，但是总体还是优化了的。  </p>
<h2 id="5、锁消除"><a href="#5、锁消除" class="headerlink" title="5、锁消除"></a>5、锁消除</h2><p>锁消除是编译器做的事：根据代码逃逸技术，如果判断到一段代码中，堆上的数据不会逃逸当前线程（即不会影响线程外的数据），那么可以认为这段代码是线程安全的，不需要加锁。  </p>
<h1 id="二、Java虚拟机中采用的锁优化策略："><a href="#二、Java虚拟机中采用的锁优化策略：" class="headerlink" title="二、Java虚拟机中采用的锁优化策略："></a>二、Java虚拟机中采用的锁优化策略：</h1><p>主要包括偏向锁、轻量级锁和自旋锁。其中，<a href="http://xiaonanbobo.com/2017/08/13/synchronized的实现原理及锁的升级/" target="_blank" rel="external">偏向锁、轻量级锁及重量锁及其膨胀过程在之前博客中有了详细描述，</a>在这篇文章，我主要介绍下自旋锁。  </p>
<h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>如果当线程申请锁时，发现锁被占用，就让当前线程执行忙循环（自旋），观察持有锁的线程是否会很快释放锁。如果自旋后还没获得锁，才进入同步阻塞状态。  </p>
<h3 id="自适应自旋"><a href="#自适应自旋" class="headerlink" title="自适应自旋"></a>自适应自旋</h3><p>自旋的线程的自旋时间为在同一个锁上，上一次线程自旋并获得锁的耗时。如果对于这个锁，自旋很少成功，就不自旋了，避免浪费CPU资源。 </p>
<p>&emsp;<strong>为了尽量避免使用重量级锁，JVM首先会尝试轻量级锁，轻量级锁尝试使用CAS操作来获取锁，如果轻量级锁获取失败，说明存在竞争，但是可能很快就能获得锁，就会尝试自旋锁，将线程做几个空循环，每一次循环都不断尝试获得锁。如果自旋锁也失败，那么只能升级为重量级锁。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、编码过程中可采取的锁优化的思路：&quot;&gt;&lt;a href=&quot;#一、编码过程中可采取的锁优化的思路：&quot; class=&quot;headerlink&quot; title=&quot;一、编码过程中可采取的锁优化的思路：&quot;&gt;&lt;/a&gt;一、编码过程中可采取的锁优化的思路：&lt;/h1&gt;&lt;h2 id=&quot;1
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java并发" scheme="http://yoursite.com/tags/java%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>26、复杂链表的复制</title>
    <link href="http://yoursite.com/2017/09/29/26%E3%80%81%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
    <id>http://yoursite.com/2017/09/29/26、复杂链表的复制/</id>
    <published>2017-09-29T12:08:00.000Z</published>
    <updated>2017-09-29T12:08:56.869Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head  </p>
<h2 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h2><p>1、复制链表<br><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170929192000.jpg" alt="image"><br>2、复制random<br><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170929192011.jpg" alt="image"><br>3、拆分链表<br><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170929192006.jpg" alt="image">  </p>
<h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">public class RandomListNode &#123;</div><div class="line">    int label;</div><div class="line">    RandomListNode next = null;</div><div class="line">    RandomListNode random = null;</div><div class="line"></div><div class="line">    RandomListNode(int label) &#123;</div><div class="line">        this.label = label;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line">public class Solution &#123;</div><div class="line">    public RandomListNode Clone(RandomListNode pHead)</div><div class="line">    &#123;</div><div class="line">        RandomListNode pCur=pHead;</div><div class="line">        if(pHead==null)</div><div class="line">            return null;</div><div class="line">        //第一步，复制链表  A-&gt;B-&gt;C变为A-&gt;A&apos;-&gt;B-&gt;B&apos;-&gt;C-&gt;C&apos;</div><div class="line">        while(pCur!=null)&#123;</div><div class="line">            RandomListNode node=new RandomListNode(pCur.label);</div><div class="line">            node.next=pCur.next;</div><div class="line">            pCur.next=node;</div><div class="line">            pCur=node.next;</div><div class="line">        &#125;</div><div class="line">        //第二步，复制random</div><div class="line">        pCur=pHead;</div><div class="line">        while(pCur!=null)&#123;</div><div class="line">            if(pCur.random!=null)</div><div class="line">                pCur.next.random=pCur.random.next;</div><div class="line">            pCur=pCur.next.next;</div><div class="line">        &#125;</div><div class="line">        //第三步，拆分链表</div><div class="line">        pCur=pHead;</div><div class="line">        RandomListNode cur=pHead.next;</div><div class="line">        RandomListNode pNode=cur;</div><div class="line">        while(pCur!=null)&#123;</div><div class="line">            pCur.next=pCur.next.next;</div><div class="line">            if(cur.next!=null)&#123;</div><div class="line">                cur.next=cur.next.next;</div><div class="line">            &#125;</div><div class="line">            pCur=pCur.next;</div><div class="line">            cur=cur.next;</div><div class="line">        &#125;</div><div class="line">    	return pNode;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head  &lt;/p&gt;
&lt;h2 id=&quot;一、思路&quot;&gt;&lt;a href=&quot;#一、思路&quot; class=&quot;headerlink&quot; title
    
    </summary>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法，剑指offer" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%EF%BC%8C%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>27、二叉搜索树转双向链表</title>
    <link href="http://yoursite.com/2017/09/29/27%E3%80%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BD%AC%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2017/09/29/27、二叉搜索树转双向链表/</id>
    <published>2017-09-29T10:35:00.000Z</published>
    <updated>2017-09-29T10:39:21.439Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。  </p>
<h2 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h2><p>&emsp;用中序遍历来遍历树中每一个结点，因为中序遍历的特点是按照从小到大的顺序遍历二叉树每个节点。当遍历到根节点10时，它的左子树已经转换成一个排序的链表，并且处在链表最后一个节点的是当前值的最大节点8。我们把值为8的节点和根节点链接起来，此时最后一个节点变为根节点10。接着去遍历转换右子树，并把根节点和右子树中最小的节点连接起来。</p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170929165150.jpg" alt="image">  </p>
<h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">public class TreeNode &#123;</div><div class="line">    int val = 0;</div><div class="line">    TreeNode left = null;</div><div class="line">    TreeNode right = null;</div><div class="line"></div><div class="line">    public TreeNode(int val) &#123;</div><div class="line">        this.val = val;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">*/</div><div class="line"></div><div class="line">public class Solution &#123;</div><div class="line">    TreeNode leftHead=null;</div><div class="line">    TreeNode rightHead=null;</div><div class="line">    public TreeNode Convert(TreeNode pRootOfTree) &#123;</div><div class="line">        if(pRootOfTree==null)</div><div class="line">            return null;</div><div class="line">        Convert(pRootOfTree.left);</div><div class="line">        if(leftHead==null)&#123;</div><div class="line">            leftHead=rightHead=pRootOfTree;</div><div class="line">        &#125;else&#123;</div><div class="line">            rightHead.right=pRootOfTree;</div><div class="line">            pRootOfTree.left=rightHead;</div><div class="line">            rightHead=pRootOfTree;</div><div class="line">        &#125;</div><div class="line">        Convert(pRootOfTree.right);</div><div class="line">        return leftHead;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。  &lt;/p&gt;
&lt;h2 id=&quot;一、思路&quot;&gt;&lt;a href=&quot;#一、思路&quot; class=&quot;headerlink&quot; title=&quot;一、思路&quot;&gt;&lt;/a&gt;一
    
    </summary>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法，剑指offer" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%EF%BC%8C%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>28、字符串的排列</title>
    <link href="http://yoursite.com/2017/09/29/28%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/"/>
    <id>http://yoursite.com/2017/09/29/28、字符串的排列/</id>
    <published>2017-09-29T08:34:00.000Z</published>
    <updated>2017-09-29T10:39:19.529Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。  </p>
<h2 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h2><p>1、将第一个字符与后面每个字符交换<br>2、固定第一个字符<br>3、将固定后，后面字符的第一位字符分别与后面每个字符交换<br>以此类推。。。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%9B%9E%E6%BA%AF.png" alt="image">  </p>
<h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">import java.util.*;</div><div class="line">public class Solution &#123;</div><div class="line">    public ArrayList&lt;String&gt; Permutation(String str) &#123;</div><div class="line">       ArrayList list =new ArrayList();</div><div class="line">        if(str!=null &amp;&amp; str.length()&gt;0)&#123;</div><div class="line">            PermutationHelper(str.toCharArray(),0,list);</div><div class="line">            Collections.sort(list);</div><div class="line">        &#125;</div><div class="line">        return list;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    void PermutationHelper(char[] cs,int i,ArrayList list)&#123;</div><div class="line">        //结束条件，排到最后一位元素</div><div class="line">        if(i==cs.length-1)&#123;</div><div class="line">            String val=String.valueOf(cs);</div><div class="line">            if(!list.contains(val))</div><div class="line">            	list.add(val);</div><div class="line">        &#125;else&#123;</div><div class="line">            for(int j=i;j&lt;cs.length;j++)&#123;</div><div class="line">                swap(cs,i,j);//将第一个字符与后面每个字符交换</div><div class="line">                PermutationHelper(cs,i+1,list);//将第一位字符固定</div><div class="line">                swap(cs,i,j);//第一个字符固定后，之后第一个字符与后面每个字符交换，直至固定后的第一个字符就是最后一个字符</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //两元素的交换</div><div class="line">    void swap(char[] cs,int i,int j)&#123;</div><div class="line">        char temp=cs[i];</div><div class="line">        cs[i]=cs[j];</div><div class="line">        cs[j]=temp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。  &lt;/p&gt;
&lt;h2 id=&quot;一、思路&quot;&gt;&lt;a href=&quot;#一、思路&quot; class=&quot;
    
    </summary>
    
      <category term="剑指offer" scheme="http://yoursite.com/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="算法，剑指offer" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%EF%BC%8C%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>深入java虚拟机之类加载机制</title>
    <link href="http://yoursite.com/2017/08/31/%E6%B7%B1%E5%85%A5java%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2017/08/31/深入java虚拟机之类加载机制/</id>
    <published>2017-08-31T07:51:00.000Z</published>
    <updated>2017-09-22T11:34:28.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、类加载过程"><a href="#一、类加载过程" class="headerlink" title="一、类加载过程"></a>一、类加载过程</h1><p>类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载。其中类加载的过程包括了<strong>加载、验证、准备、解析和初始化</strong>五个阶段。加载、验证、准备、初始化这四个阶段发生的顺序是确定的，但解析阶段不一定，在某些情况下，解析阶段在初始化之后进行，这时为了支持Java的动态绑定。这几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常会互相交叉的进行，通常在一个阶段的执行过程中调用或激活另一个阶段。  </p>
<p><img src="http://osrmzp0jr.bkt.clouddn.com/%E7%B1%BB%E5%8A%A0%E8%BD%BD1.png" alt="image">  </p>
<h2 id="静态绑定和动态绑定"><a href="#静态绑定和动态绑定" class="headerlink" title="静态绑定和动态绑定"></a>静态绑定和动态绑定</h2><p><strong>绑定是指把一个方法的调用与方法所在的类关联起来</strong>，分来静态绑定和动态绑定。<br>1、静态绑定<br>即前期绑定。在程序执行前方法已经被绑定，此时由编译器或其它连接程序实现。对java来说，可以理解为程序编译期的绑定。<strong>Java方法中只有final、static、private和构造方法是前期绑定的。</strong><br>2、动态绑定<br>即晚期绑定，也叫运行时绑定。在运行时根据具体对象的类型进行绑定，在java中，几乎所有的方法都是后期绑定的。  </p>
<h2 id="1、加载"><a href="#1、加载" class="headerlink" title="1、加载"></a>1、加载</h2><p>加载是类加载过程的第一个阶段，在这个阶段，虚拟机完成以下3件事情：<br>1、通过一个类的全限定名来获取定义此类的二进制字节流。<br>2、将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。<br>3、在内存中生成一个代表这个类的java.lang.Class对象，作为方法区中各种数据的访问入口。<br>在加载阶段，可控性强，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。  </p>
<h2 id="2、验证"><a href="#2、验证" class="headerlink" title="2、验证"></a>2、验证</h2><p>验证的目的是为了确保Class文件中的字节流包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。大致分为四个阶段的验证：<br><strong>1、文件格式的验证</strong>：验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理，该验证的主要目的是保证输入的字节流能正确地解析并存储于方法区之内。经过这个阶段的验证后，字节流才会进入内存的方法区进行存储，后面三个验证都是基于方法区的存储结构进行的。<br><strong>2、元数据验证</strong>：对类中的各数据类型进行语法校验，保证不存在不符合Java语言规范的元数据信息。<br><strong>3、字节码验证</strong>：主要目的是通过数据流和控制流分析，对类的方法体进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的事件。<br><strong>4、符号引用验证</strong>：发生在虚拟机将符号引用转化为直接引用的时候（解析阶段发生该转化），主要是对类自身以外（常量池中的各种符号引用）的信息进行匹配性校验。  </p>
<h2 id="3、准备"><a href="#3、准备" class="headerlink" title="3、准备"></a>3、准备</h2><p>准备阶段正式为类变量分配内存并设置类变量初始值的阶段，这些变量所使用的内存都将在方法区中进行分配。<br>注意几点：<br>1、仅包括类变量（static修饰），而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配到Java堆中。<br>2、这里设置的初始值通常是数据类型默认的零值（如0、0L、null、false等），而不是在java代码中被显式地赋予的值。<br>3、如果变量同时被final和static修饰（常量），类字段的字段属性表中存在ConstantValue属性，那么在准备阶段变量的值就会被初始化为ConstantValue属性所指定的值。可以理解为static final常量在编译期就将其结果放入了调用它的类的常量池中。  </p>
<h2 id="4、解析"><a href="#4、解析" class="headerlink" title="4、解析"></a>4、解析</h2><p>解析阶段是虚拟机将常量池中的符号引用转化为直接引用的过程。  </p>
<h3 id="符号引用和直接引用"><a href="#符号引用和直接引用" class="headerlink" title="符号引用和直接引用"></a>符号引用和直接引用</h3><p><strong>符号引用</strong>：以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符合引用和虚拟机的内存布局无关，引用的目标并不一定已经加载到内存中。<br><strong>直接引用</strong>：可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用和虚拟机的内存布局相关。<br>解析动作主要针对类或接口、字段、类方法、接口方法四类符号引用进行。</p>
<h2 id="5、初始化"><a href="#5、初始化" class="headerlink" title="5、初始化"></a>5、初始化</h2><p>初始化阶段是类加载过程的最后一步，到这个阶段，才真正去执行类中定义的java代码。在准备阶段，类变量（static变量）已经被赋过一次系统要求的初始化值，而在初始化阶段，回去初始化类变量在java代码中定义的值以及其他资源。初始化阶段可理解为执行类构造器&lt;clinit&gt;()方法的过程。  </p>
<h3 id="lt-clinit-gt-方法的执行规则："><a href="#lt-clinit-gt-方法的执行规则：" class="headerlink" title="&lt;clinit&gt;()方法的执行规则："></a>&lt;clinit&gt;()方法的执行规则：</h3><p><strong>1、&lt;clinit&gt;()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块中的语句合并产生的，编译器收集的顺序是由语句在源文件中出现的顺序所决定的。静态语句块中只能访问到定义在静态语句块之前的变量，定义在它之后的变量，在前面的静态语句块中可以赋值，但是不能访问。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class Test&#123;</div><div class="line">    static&#123;</div><div class="line">        i = 0;                 //给变量赋值可以正常编译通过</div><div class="line">        System.out.println(i); //编译器会提示“非法向前引用”，不可访问定义在静态语句块之后的变量       </div><div class="line">    &#125;</div><div class="line">    static int i = 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>2、&lt;clinit&gt;()方法和类的构造函数（实例构造器&lt;init&gt;()方法）不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的&lt;clinit&gt;()方法执行之前，父类的&lt;clinit&gt;()方法已经执行完毕。因此在虚拟机中第一个被执行的&lt;clinit&gt;()方法的类肯定是Object。<br>3、由于父类的&lt;clinit&gt;()方法会先执行，意味着父类中定义的静态语句块要优先于子类的变量赋值操作。<br>4、&lt;clinit&gt;()方法对于类或接口来说并不是必需的，如果一个类中没有静态语句块，也没有对变量的赋值操作，那么这个类可以不用生成&lt;clinit&gt;()方法。<br>5、接口中不能使用静态语句块，但仍然有变量初始化的赋值操作，接口和类一样都会生成&lt;clinit&gt;()方法。但接口和类不同的是，执行接口的&lt;clinit&gt;()方法不需要执行父接口的&lt;clinit&gt;()方法。只有当父接口中定义的变量使用时，父接口才会初始化。<br>6、虚拟机会保证一个类的&lt;clinit&gt;()方法在多线程环境中能被正确地加锁和同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的&lt;clinit&gt;()方法，其他线程都需要阻塞等待，直到活动现场执行&lt;clinit&gt;()方法完毕。</strong>  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Parent&#123;</div><div class="line">    public static int A = 1;</div><div class="line">    sttatic&#123;</div><div class="line">        A = 2;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static class Sub extends Parent&#123;</div><div class="line">    public static int B = A;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static void main(String[] args)&#123;</div><div class="line">    System.out.println(Sub.B);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>&emsp;&emsp;首先在准备阶段为类变量分配内存并设置类变量的初始值，此时A、B的值被赋为默认值0，之后在初始化阶段调用&lt;clinit&gt;()方法给他们赋予程序中指定的值。当我们调用Sub.B时会触发Sub的&lt;clinit&gt;()方法，根据规则2，在此之前，要先执行完其父类Parent的&lt;clinit&gt;()方法；又根据规则1，在执行&lt;clinit&gt;()方法时，需要按static语句或static变量赋值操作在代码中出现的顺序来执行相关的static语句，因此当触发执行Parent的&lt;clinit&gt;()方法时，会先将A赋值为1，再执行static语句块中语句，将A赋值为2；之后执行Sub的&lt;clinit&gt;()方法，这样会将B的赋值为2。  </p>
<h1 id="二、类加载器"><a href="#二、类加载器" class="headerlink" title="二、类加载器"></a>二、类加载器</h1><p>类加载器用于实现类的加载动作。对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在Java虚拟机中的唯一性。也就是说，比较两个类是否相等，只有在这两个类是由同一个类加载器加载的前提下才有意义。即使两个类来源于同一个Class文件，只要加载她们的类加载器i不同，那这两个类肯定是不同的。  </p>
<h2 id="1、类加载器的分类"><a href="#1、类加载器的分类" class="headerlink" title="1、类加载器的分类"></a>1、类加载器的分类</h2><p>1、<strong>启动类加载器</strong>：负责加载存放在JDK\jre\lib下（JDK代表jdk安装目录），或是被-Xbootclasspath参数指定的路径中的，并且被虚拟机识别的类库加载到虚拟机内存中。启动类加载器无法被Java程序直接引用。<br>2、<strong>扩展类加载器</strong>：负责加载JDK\jre\lib\ext目录下的或是被java.ext.dirs系统变量指定的路径中的所有类库。开发者可以直接使用扩展类加载器。<br>3、<strong>应用程序类加载器</strong>：负责加载用户类路径（ClassPath）上指定的类库。开发者可直接使用这个加载器，<strong>应用程序类加载器也是程序中默认的类加载器</strong>。<br>如果有必要，还可以加入自定义的类加载器。  </p>
<h2 id="2、双亲委派模型"><a href="#2、双亲委派模型" class="headerlink" title="2、双亲委派模型"></a>2、双亲委派模型</h2><p><img src="http://osrmzp0jr.bkt.clouddn.com/%E7%B1%BB%E5%8A%A0%E8%BD%BD2.png" alt="image"><br>这种层次关系称为类加载器的双亲委派模型。我们把每一层上面的类加载器叫做当前层类加载器的父加载器，它们之间的父子关系不是通过继承而来的，而是使用组合关系来复用父加载器中的代码。  </p>
<h3 id="①双亲委派模型的工作流程"><a href="#①双亲委派模型的工作流程" class="headerlink" title="①双亲委派模型的工作流程"></a>①双亲委派模型的工作流程</h3><p>&emsp;&emsp;<strong>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是这样，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成这个加载请求时，子加载器才会尝试自己去加载。</strong>  </p>
<h3 id="②双亲委派模型的好处"><a href="#②双亲委派模型的好处" class="headerlink" title="②双亲委派模型的好处"></a>②双亲委派模型的好处</h3><p>&emsp;&emsp;<strong>Java类随着它的类加载器一起具备了一种带有优先级的层次关系。</strong> 例如，java.lang.Object类，无论哪个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，因此Object类在程序的各个类加载器环境中都是同一个类。如果没有双亲委派模型，由各个类加载器自行去加载的话，若用户自己编写了一个java.lang.Object类，那系统中将会出现多个不同的Object类，那么Java类型体系中最基本的行为也无法保证。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、类加载过程&quot;&gt;&lt;a href=&quot;#一、类加载过程&quot; class=&quot;headerlink&quot; title=&quot;一、类加载过程&quot;&gt;&lt;/a&gt;一、类加载过程&lt;/h1&gt;&lt;p&gt;类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化
    
    </summary>
    
      <category term="深入理解Java虚拟机" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java虚拟机" scheme="http://yoursite.com/tags/java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java中的线程池</title>
    <link href="http://yoursite.com/2017/08/30/Java%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://yoursite.com/2017/08/30/Java中的线程池/</id>
    <published>2017-08-30T07:57:00.000Z</published>
    <updated>2017-10-10T14:06:32.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线程池的好处"><a href="#线程池的好处" class="headerlink" title="线程池的好处"></a>线程池的好处</h1><p><strong>1、降低资源消耗</strong><br>通过重复利用已创建的线程降低线程创建和销毁造成的消耗。<br><strong>2、提高响应速度</strong><br>当任务到达时，任务可以不需要等到线程创建就能立即执行。<br><strong>3、提高线程的可管理性</strong><br>线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控。  </p>
<h1 id="一、线程池的实现原理"><a href="#一、线程池的实现原理" class="headerlink" title="一、线程池的实现原理"></a>一、线程池的实现原理</h1><p><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%89%AF%E6%9C%AC1.jpg" alt="image"><br><strong>ThreadPoolExecutor执行execute()方法步骤：</strong><br>1、如果当前运行的线程少于corePoolSize，那么创建新的线程来执行任务<br>2、如果运行的线程等于或者多于corePoolSize，那么将任务加入BlockingQueue<br>3、如果BlockingQueue中任务已满，并且当前运行的线程数少于maximumPoolSize，那么创建新的线程来处理任务<br>4、如果当前运行的线程数多于maximumPoolSize，任务将被拒绝，并调用RejectedExecutionHandler.rejectdExecution()方法（饱和策略）<br><img src="http://osrmzp0jr.bkt.clouddn.com/1_%E5%89%AF%E6%9C%AC.jpg" alt="image"><br><strong>线程池中的线程执行任务分两种情况：</strong><br>1、在execute()方法中创建一个线程时，会让这个线程执行当前任务<br>2、这个线程执行完图中1的任务后，会反复从BlockingQueue中获取任务来执行  </p>
<h1 id="二、线程池的使用"><a href="#二、线程池的使用" class="headerlink" title="二、线程池的使用"></a>二、线程池的使用</h1><h2 id="1、线程池的创建"><a href="#1、线程池的创建" class="headerlink" title="1、线程池的创建"></a>1、线程池的创建</h2><p>new ThreadPoolExecutor(corePoolSize, runnableTaskQueue, maximumPoolSize, handler, keepAliveTime);<br><strong>①corePoolSize（线程池的核心线程数）</strong>：当提交一个任务到线程池时，线程池会创建一个线程来执行任务，即使其他空闲的基本线程能够执行新任务也会创建新线程，等到需要执行的任务数大于线程池的核心线程数时就不再创建。具体可以参考上图<br><strong>②runnableTaskQueue（任务队列）</strong>：用于保存等待执行的任务的阻塞队列。有以下几个阻塞队列：<br>&emsp;1、ArrayBlockingQueue：是一个基于数组结构的<strong>有界阻塞队列</strong>，按先进先出原则对元素进行排序。<br>&emsp;2、LinkedBlockingQueue：一个基于链表结构的<strong>无界阻塞队列</strong>，吞吐量高于有界队列，newFixedThreadPool采用这个队列。<br>&emsp;3、SynchronousQueue：不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，newCachedThreadPool使用这个队列。<br>&emsp;4、PriporityBlockingQueue：一个具有优先级的<strong>无界阻塞队列</strong>。<br><strong>③maximumPoolSize（线程池最大数量）</strong>：线程池允许创建线程的最大数量。如果队列满了，且创建的线程数小于最大线程数，那么线程池会创建新的线程执行任务。<br><strong>④handler（饱和策略）</strong>：当队列和线程池都满了，说明线程池处于饱和状态，采取饱和策略处理提交的任务。有四种策略：<br>&emsp;1、AbortPolicy：终止策略，直接抛出异常（默认采用）<br>&emsp;2、CallerRunsPolicy：调用者运行策略，将某些任务回退给调用者，来降低新任务的流量<br>&emsp;3、DiscardOldestPolicy：抛弃策略，丢弃队列里最近的一个任务，并执行当前任务<br>&emsp;4、DiscardPolicy：抛弃最旧的策略，不处理，丢弃掉<br><strong>⑤keepAliveTime（线程活动保持的时间）</strong>：线程池的工作线程空闲后，保持存活的时间。  </p>
<h2 id="2、线程池的关闭"><a href="#2、线程池的关闭" class="headerlink" title="2、线程池的关闭"></a>2、线程池的关闭</h2><p>可以通过shutdown或者shutdownNow方法来关闭线程池。原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程。但也存在一些区别：<br>shutdownNow：首先将线程池的状态设置为STOP，然后尝试<strong>停止所有正在执行或暂停任务的线程，并返回等待执行任务的列表</strong>。<br>shutdown：将线程池的状态设置为SHUTDOWN状态，然后<strong>中断所有没有正在执行任务的线程</strong>。  </p>
<h2 id="3、合理配置线程池"><a href="#3、合理配置线程池" class="headerlink" title="3、合理配置线程池"></a>3、合理配置线程池</h2><p>从下面几个角度分析：<br>1、任务的性质：CPU密集型任务、IO密集型任务和混合型任务。<br>2、任务的优先级：高、中、低<br>3、任务的执行时间：长、中、短<br>4、任务的依赖性：是否依赖其他系统资源，比如数据库连接<br>如果<strong>任务是CPU密集型的，应配置尽可能少的线程</strong>，如等于可用的处理器核数，这样就可以充分利用处理器，让它以最大火力不停进行计算。创建更多的线程反而是不利的，因为多个线程频繁进行上下文切换对性能消耗太大。<br>如果<strong>任务是IO密集型的，应尽可能配置多的线程</strong>，如处理器核数的几倍。因为在执行IO操作时，线程将被阻塞，此时处理器可以立即进行上下文切换以便其他线程开始任务。如果线程数不够，那么有待执行的任务也无法调度处理了。<br>可以使用公式计算出程序所需线程数：<strong>线程数=CPU可用核心数/(1-阻塞系数)</strong>，其中阻塞系数在0到1范围内。CPU密集型的阻塞系数为0，IO密集型的阻塞系数接近1。  </p>
<h1 id="三、线程池的本质"><a href="#三、线程池的本质" class="headerlink" title="三、线程池的本质"></a>三、线程池的本质</h1><p><strong>线程池的本质是使用了一个线程安全的工作队列连接工作者线程和客户端线程，客户端线程将任务放入工作队列后便返回，而工作者线程则不断地从工作队列上取出工作并执行，典型的生产者-消费者模型。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;线程池的好处&quot;&gt;&lt;a href=&quot;#线程池的好处&quot; class=&quot;headerlink&quot; title=&quot;线程池的好处&quot;&gt;&lt;/a&gt;线程池的好处&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、降低资源消耗&lt;/strong&gt;&lt;br&gt;通过重复利用已创建的线程降低线程创建和销毁造成的消
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java并发" scheme="http://yoursite.com/tags/java%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>cglib动态代理</title>
    <link href="http://yoursite.com/2017/08/25/cglib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2017/08/25/cglib动态代理/</id>
    <published>2017-08-25T09:22:04.000Z</published>
    <updated>2017-08-25T09:22:49.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、cglib实现动态代理步骤"><a href="#一、cglib实现动态代理步骤" class="headerlink" title="一、cglib实现动态代理步骤"></a>一、cglib实现动态代理步骤</h1><p>使用cglib实现动态代理，并不要求委托类必须实现接口，底层使用asm字节码生成框架生成代理类的字节码。  </p>
<h2 id="1、定义业务逻辑"><a href="#1、定义业务逻辑" class="headerlink" title="1、定义业务逻辑"></a>1、定义业务逻辑</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class UserService&#123;</div><div class="line">    public void add()&#123;</div><div class="line">        System.ou.println(&quot;This is add service&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2、实现MethodInterceptor接口，定义方法的拦截器"><a href="#2、实现MethodInterceptor接口，定义方法的拦截器" class="headerlink" title="2、实现MethodInterceptor接口，定义方法的拦截器"></a>2、实现MethodInterceptor接口，定义方法的拦截器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class MyMethodInterceptor implements MethodInterceptor&#123;</div><div class="line">    public Object intercept(Object obj, Method method, Object[] arg, MethodProxy proxy)throws Throwable&#123;</div><div class="line">        System.ou.println(&quot;Before:&quot; + method);</div><div class="line">        Object object = proxy.invokeSuper(obj, arg);</div><div class="line">        System.ou.println(&quot;After:&quot; + method);</div><div class="line">        return object;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3、使用Enhancer类生成代理类"><a href="#3、使用Enhancer类生成代理类" class="headerlink" title="3、使用Enhancer类生成代理类"></a>3、使用Enhancer类生成代理类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Enhancer enhancer = new Enhancer();</div><div class="line">enhancer.setSuperClass(UserService.class);</div><div class="line">enhancer.setCallback(new MyMethodInterceptor());</div><div class="line">UserService userService = (UserService)enhancer.create();</div></pre></td></tr></table></figure>
<h2 id="4、userService-add-的执行结果"><a href="#4、userService-add-的执行结果" class="headerlink" title="4、userService.add()的执行结果"></a>4、userService.add()的执行结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Before: add</div><div class="line">This is add service</div><div class="line">After: add</div></pre></td></tr></table></figure>
<h1 id="二、cglib字节码生成"><a href="#二、cglib字节码生成" class="headerlink" title="二、cglib字节码生成"></a>二、cglib字节码生成</h1><p><strong>Enhancer</strong>是cglib字节码增强器，可以方便的对类进行扩展，<strong>内部调用GeneratorStrategy.generate方法生成代理类的字节码</strong><br>内部实现：<br><strong>1、代理类UserService$$EnhancerByCGLIB$$394dddeb继承了委托类UserService，且委托类的final方法不能被代理；<br>2、代理类为每个委托方法都生成两个方法，以add方法为例，一个是重写的add方法，一个是CGLIB$add$0方法，该方法直接调用委托类的add方法；<br>3、当执行代理对象的add方法时，会先判断是否存在实现了MethodInterceptor接口的对象cglib$CALLBACK_0（也就是这里的MyMethodInterceptor），如果存在，那么调用MethodInterceptor对象的intercept方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public Object intercept(Object obj, Method method, Object[] arg, MethodProxy proxy)throws Throwable&#123;</div><div class="line">    System.ou.println(&quot;Before:&quot; + method);</div><div class="line">    Object object = proxy.invokeSuper(obj, arg);//最终调用的委托类中的method方法</div><div class="line">    System.ou.println(&quot;After:&quot; + method);</div><div class="line">    return object;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参数分别是：①代理对象；②委托类方法；③方法参数；④代理方法的MethodProxy对象<br><strong>4、每个被代理的方法都对应一个MethodProxy对象，methodProxy.invokeSuper最终调用的是委托类的add方法</strong>，实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public Object invokeSuper(Object obj, Object[] args)throws Throwable&#123;</div><div class="line">    try&#123;</div><div class="line">        init();</div><div class="line">        FastClassInfo fci = fastClassInfo;</div><div class="line">        //fci.f2:代理类对象</div><div class="line">        //fci.i2:方法CGLIB$add$0在对象中的索引位置</div><div class="line">        return fci.f2.invoke(fci.i2, obj, args);//调用代理类对象的CGLIB$add$0方法，CGLIB$add$0方法又直接调用委托类的add方法</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在MethodProxy实现中，通过FastClassInfo维护了委托类和代理类的FastClass：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private static class FastClassInfo&#123;</div><div class="line">    FastClass f1;//指向委托类对象</div><div class="line">    FastClass f2;//指向代理类对象</div><div class="line">    int i1;//方法add在对象中的索引位置</div><div class="line">    int i2;//方法CGLIB$add$0在对象中的索引位置</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>FastClass提出概念下标index，通过索引来保存方法的引用信息，将原先的反射调用，转化为方法的直接调用，从而实现fast。当调用methodProxy.invokeSuper方法时，实际上是调用代理类的CGLIB$add$0方法，CGLIB$add$0方法又直接调用委托类的add方法，避免了使用反射机制来调用委托类的方法。</strong>  </p>
<h1 id="三、jdk和cglib动态代理的区别"><a href="#三、jdk和cglib动态代理的区别" class="headerlink" title="三、jdk和cglib动态代理的区别"></a>三、jdk和cglib动态代理的区别</h1><p>1、jdk动态代理生成的代理类和委托类必须实现相同的接口；cglib动态代理则不需要。<br>2、cglib动态代理中，生成的代理类是委托类的子类，且不能处理被final关键字修饰的方法；<br>3、jdk采用反射机制来调用委托类的方法，cglib采用类似索引的方式直接调用委托类的方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、cglib实现动态代理步骤&quot;&gt;&lt;a href=&quot;#一、cglib实现动态代理步骤&quot; class=&quot;headerlink&quot; title=&quot;一、cglib实现动态代理步骤&quot;&gt;&lt;/a&gt;一、cglib实现动态代理步骤&lt;/h1&gt;&lt;p&gt;使用cglib实现动态代理，并不要求
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java，java基础" scheme="http://yoursite.com/tags/java%EF%BC%8Cjava%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>JDK动态代理</title>
    <link href="http://yoursite.com/2017/08/25/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2017/08/25/JDK动态代理/</id>
    <published>2017-08-25T03:47:04.000Z</published>
    <updated>2017-08-25T03:47:31.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、静态代理"><a href="#一、静态代理" class="headerlink" title="一、静态代理"></a>一、静态代理</h1><p><img src="http://osrmzp0jr.bkt.clouddn.com/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86.png" alt="image"><br>1、RealSubject是委托类，Proxy是代理类<br>2、Subject是委托类和代理类的接口<br>3、request()是委托类和代理类的共同方法<br>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">//接口</div><div class="line">interface Subject&#123;</div><div class="line">    abstract void request();</div><div class="line">&#125;</div><div class="line">//委托类</div><div class="line">class RealSubject implements Subject&#123;</div><div class="line">    public void request()&#123;</div><div class="line">        System.out.println(&quot;RealSubject&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//代理类</div><div class="line">class Proxy implements Subject&#123;</div><div class="line">    private Subject subject;</div><div class="line">    public Proxy(Subject subject)&#123;</div><div class="line">        this.subject = subject;</div><div class="line">    &#125;</div><div class="line">    public void request()&#123;</div><div class="line">        System.out.println(&quot;start&quot;);//前置通知</div><div class="line">        subject.request();</div><div class="line">        System.out.println(&quot;stop&quot;);//后置处理</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class ProxyTest&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        RealSubject subject = new RealSubject();</div><div class="line">        Proxy p = new Proxy(subject);//代理类要传入委托类作为参数</div><div class="line">        p.request();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>静态代理</strong>实现中，一个委托类对应一个代理类，<strong>代理类在编译期间就已经确定了</strong>。</p>
<h1 id="二、动态代理"><a href="#二、动态代理" class="headerlink" title="二、动态代理"></a>二、动态代理</h1><p>动态代理中，必须让代理类和目标类实现相同的接口，客户端通过代理类来调用目标类的方法，<strong>代理类会将所有的方法调用分派到目标对象上反射执行</strong>，在分派的过程中，还可以添加“前置通知”和“后置处理”（如在调用目标方法前校验权限，在调用完目标方法后打印日志等）等功能。<br><img src="http://osrmzp0jr.bkt.clouddn.com/%E4%BB%A3%E7%90%86.png" alt="image"><br>相比于静态代理，<strong>动态代理不需要编写各个繁琐的静态代理类</strong>，只需要简单地指定一组接口及目标类对象就可以动态的获得代理对象了。  </p>
<h2 id="1、定义业务逻辑"><a href="#1、定义业务逻辑" class="headerlink" title="1、定义业务逻辑"></a>1、定义业务逻辑</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//接口</div><div class="line">public interface Service&#123;</div><div class="line">    //目标方法</div><div class="line">    public abstract void add();</div><div class="line">&#125;</div><div class="line">//委托类</div><div class="line">public class UserServiceImpl implements Service&#123;</div><div class="line">    public void add()&#123;</div><div class="line">        System.out.println(&quot;This is add service&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2、利用java-lang-reflect-Proxy类和java-lang-reflect-InvocationHandler接口定义代理类的实现"><a href="#2、利用java-lang-reflect-Proxy类和java-lang-reflect-InvocationHandler接口定义代理类的实现" class="headerlink" title="2、利用java.lang.reflect.Proxy类和java.lang.reflect.InvocationHandler接口定义代理类的实现"></a>2、利用java.lang.reflect.Proxy类和java.lang.reflect.InvocationHandler接口定义代理类的实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">class MyInvocationHandler implements InvocationHandler&#123;</div><div class="line">    private Object target;</div><div class="line">    </div><div class="line">    public MyInvocationHandler(Object target)&#123;</div><div class="line">        this.target = target;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public Object invoke(Object proxy, Method method, Object[] args)throws Throwable&#123;</div><div class="line">        System.out.println(&quot;------before--------&quot;);</div><div class="line">        Object result = method.invoke(target,args);//调用target的method方法，参数为args</div><div class="line">        System.out.println(&quot;------end--------&quot;);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    //生成代理对象</div><div class="line">    public Object getProxy()&#123;</div><div class="line">        ClassLoader loader = Thread.currentThread().getContextClassLoader();</div><div class="line">        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</div><div class="line">        return Proxy.newProxyInstance(loader, interfaces, this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3、使用动态代理"><a href="#3、使用动态代理" class="headerlink" title="3、使用动态代理"></a>3、使用动态代理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class ProxyTest&#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        Service service = new UserServiceImpl();</div><div class="line">        MyInvocationHandler handler = new MyInvocationHandler(service);</div><div class="line">        Service serviceProxy = (Service)handler.getProxy();</div><div class="line">        serviceProxy.add();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">------before--------</div><div class="line">This is add service</div><div class="line">------end--------</div></pre></td></tr></table></figure></p>
<p>代理对象的生成过程由<strong>Proxy类的newProxyInstance方法</strong>实现，分为三个步骤：<br><strong>①ProxyGenerator.generateProxyClass方法负责生成代理类的字节码</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//proxyName：格式如&quot;com.sun.proxy.$Proxy.1&quot;</div><div class="line">//interfaces：代理类需要实现的接口数组</div><div class="line">byte[] proxyClassFile = ProxyGenerator.generateProxyClass(proxyName, interfaces);</div></pre></td></tr></table></figure></p>
<p><strong>②native方法Proxy.defineClass0负责字节码加载的实现，并返回对应的Class对象</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class clazz = defineClass0(loader, proxyName, proxyClassFile, 0, proxyClassFile.length);</div></pre></td></tr></table></figure></p>
<p><strong>③使用clazz.newInstance反射机制生成代理类对象</strong>  </p>
<h3 id="内部实现："><a href="#内部实现：" class="headerlink" title="内部实现："></a>内部实现：</h3><p><strong>1、生成的代理类$Proxy1继承自Proxy类，并且实现了Service接口<br>2、执行代理对象的方法serviceProxy.add()，其实就是执行InvocationHandler对象的invoke方法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public final void add()&#123;</div><div class="line">    try&#123;</div><div class="line">        super.h.invoke(this, m, null);//传入的参数分别是当前代理对象、当前执行的方法和参数</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="InvocationHandler的作用"><a href="#InvocationHandler的作用" class="headerlink" title="InvocationHandler的作用"></a>InvocationHandler的作用</h3><p><strong>在动态代理中，InvocationHandler是核心，每个代理实例都有一个关联的调用处理程序（InvocationHandler）。对代理实例调用方法时，将对方法调用进行编码并将其指派到它的InvocationHandler的invoke()方法。所以对代理方法的调用，内部都是通过InvocationHandler的invoke()实现的，invoke()根据传入的当前代理对象、当前执行的方法和参数来决定调用委托类的哪个方法。</strong></p>
<h2 id="jdk动态代理的局限性"><a href="#jdk动态代理的局限性" class="headerlink" title="jdk动态代理的局限性"></a>jdk动态代理的局限性</h2><p>通过反射类Proxy和InvocationHandler回调接口实现的jdk动态代理，<strong>要求委托类必须实现一个接口</strong>，但其实并不是每个类都有接口，对于没有实现接口的类，就无法使用这种方式实现动态代理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、静态代理&quot;&gt;&lt;a href=&quot;#一、静态代理&quot; class=&quot;headerlink&quot; title=&quot;一、静态代理&quot;&gt;&lt;/a&gt;一、静态代理&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://osrmzp0jr.bkt.clouddn.com/%E9%9D%99%E
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java，java基础" scheme="http://yoursite.com/tags/java%EF%BC%8Cjava%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java反射机制</title>
    <link href="http://yoursite.com/2017/08/24/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2017/08/24/Java反射机制/</id>
    <published>2017-08-24T03:26:04.000Z</published>
    <updated>2017-08-30T11:16:38.767Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、反射技术简介及获取Class对象"><a href="#一、反射技术简介及获取Class对象" class="headerlink" title="一、反射技术简介及获取Class对象"></a>一、反射技术简介及获取Class对象</h1><p><strong>反射技术是指动态的获取指定的类，以及动态的调用类中的内容。</strong><br>要想获取字节码文件的成员，就必须先获取到字节码文件对象（Class对象）。<br><strong>Class对象：虚拟机在class文件的加载阶段，把类信息保存在方法区的数据结构中，并在Java堆中生成一个Class对象，作为类信息的入口</strong>。<br><img src="http://osrmzp0jr.bkt.clouddn.com/%E5%8F%8D%E5%B0%84.png" alt="image"><br>介绍三种获取字节码文件对象的方式：<br>首先声明一个Person类  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Person&#123;</div><div class="line">    //字段</div><div class="line">    private String name;</div><div class="line">    private int age;</div><div class="line">    </div><div class="line">    //构造函数</div><div class="line">    Person()&#123; ... &#125;</div><div class="line">    Person(String name, int age)&#123; ... &#125;</div><div class="line">    </div><div class="line">    //方法</div><div class="line">    public void show(String name, int age)&#123; ... &#125;</div><div class="line">    public static void staticShow()&#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1、通过实例变量的方式"><a href="#1、通过实例变量的方式" class="headerlink" title="1、通过实例变量的方式"></a>1、通过实例变量的方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Person person = new Person();</div><div class="line">Class clazz = person.getClass();</div></pre></td></tr></table></figure>
<p>使用Object类中的getClass方法，是通用的，但前提是必须有指定类，并对该类进行对象的创建，才能调用getClass方法。  </p>
<h2 id="2、通过类名的方式"><a href="#2、通过类名的方式" class="headerlink" title="2、通过类名的方式"></a>2、通过类名的方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class clazz = Person.class</div></pre></td></tr></table></figure>
<p>不用new对象，但还是需要使用具体的类。这种方式，只会加载Person类，但不会触发它的类构造器来初始化。    </p>
<h2 id="3、通过Class类中的forName-String-className-的方式"><a href="#3、通过Class类中的forName-String-className-的方式" class="headerlink" title="3、通过Class类中的forName(String className)的方式"></a>3、通过Class类中的forName(String className)的方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String classNmae = &quot;cn.wunian.domian.Person&quot;;//要用全限定名</div><div class="line">Class clazz = Class.forName(className);</div><div class="line">//通过newInstance()方法就可以创建字节码文件对象所表示的类的实例</div><div class="line">Object obj = clazz.newInstance();//创建字节码文件对象所表示的类的一个实例</div></pre></td></tr></table></figure>
<p><strong>这种方式是反射技术所使用的获取字节码文件对象的方式。只需要知道类的名字就可以了，获取对应的字节码文件等由forName方法自动完成。</strong>  </p>
<p>总结下，主要分为三个步骤：<br><strong>①通过给定的类名称，加载对应的字节码文件，并封装成字节码文件对象Class<br>②通过newInstance创建字节码文件对象所表示的类的实例<br>③调用该类的构造函数来进行初始化</strong>  </p>
<h1 id="二、反射机制"><a href="#二、反射机制" class="headerlink" title="二、反射机制"></a>二、反射机制</h1><p>反射机制可以在<strong>运行期间获取类的字段、方法、父类和接口</strong>等信息。  </p>
<h2 id="1、获取构造函数"><a href="#1、获取构造函数" class="headerlink" title="1、获取构造函数"></a>1、获取构造函数</h2><p>通常被反射的类都会提供空参数的构造函数。如果没有对应的构造函数，会报InstantiationException；如果有提供，但访问权限不够，会报IllegalAccessException。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//使用带参的构造器来初始化对象</div><div class="line">String className = &quot;cn.wunian.domain.Person&quot;;</div><div class="line">Class clazz = Class.forName(className);</div><div class="line">Constructer constructer = clazz.getConstructer(String.calss, int.class);</div><div class="line">//通过构造器对象来初始化对象</div><div class="line">Object obj = constructer.newInstance(&quot;xubo&quot;, 24);</div></pre></td></tr></table></figure></p>
<p>使用此Constructer对象表示的构造方法来创建该构造方法的声明类的新实例，并用指定的初始化参数来初始化该实例。  </p>
<h2 id="2、获取字段"><a href="#2、获取字段" class="headerlink" title="2、获取字段"></a>2、获取字段</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">String className = &quot;cn.wunian.domain.Person&quot;;</div><div class="line">Class clazz = Class.forName(className);</div><div class="line">String fieldName = &quot;age&quot;;</div><div class="line">Object obj = clazz.newInstance();</div><div class="line">//获取字段对象</div><div class="line">Field field = clazz.getDeclaredField(fieldName);</div><div class="line">//取消访问检查</div><div class="line">field.setAccessible(true);</div><div class="line">//设置字段值</div><div class="line">field.set(obj, 30);//将指定对象变量上此Field对象表示的字段设置为指定的新值</div><div class="line">//返回指定对象上此Field字段的值</div><div class="line">System.out.println(field.get(obj));</div></pre></td></tr></table></figure>
<h2 id="3、获取方法"><a href="#3、获取方法" class="headerlink" title="3、获取方法"></a>3、获取方法</h2><p>用到的两个方法：<br>①返回一个Method对象，它反映此Class对象所表示的类或接口指定的名为methodName的公共成员方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class.getMethod(String methodName, class&lt;?&gt;...parameterTypes)</div><div class="line">methodName：方法名  </div><div class="line">parameterTypes：参数列表所属的类型</div></pre></td></tr></table></figure></p>
<p>②对带有指定参数（parameterTypes）的指定对象（obj）调用由此Method对象表示的底层方法（上面的methodName代表的方法）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Method.invoke(Object obj, Object...args)</div><div class="line">obj：调用底层方法的对象  </div><div class="line">args：用于方法调用的参数</div></pre></td></tr></table></figure></p>
<h3 id="①获取带有参数的方法"><a href="#①获取带有参数的方法" class="headerlink" title="①获取带有参数的方法"></a>①获取带有参数的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String className = &quot;cn.wunian.domain.Person&quot;;</div><div class="line">Class clazz = Class.forName(className);</div><div class="line">Object obj = clazz.newInstance();</div><div class="line">String methodName = &quot;show&quot;;</div><div class="line">Method method = clazz.getMethod(methodName, String.class, int.class);</div><div class="line">method.invoke(obj, &quot;xubo&quot;, 24);</div></pre></td></tr></table></figure>
<h3 id="②获取无参数的方法"><a href="#②获取无参数的方法" class="headerlink" title="②获取无参数的方法"></a>②获取无参数的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String className = &quot;cn.wunian.domain.Person&quot;;</div><div class="line">Class clazz = Class.forName(className);</div><div class="line">String methodName = &quot;staticShow&quot;;</div><div class="line">Method method = clazz.getMethod(methodName, null);//无参传null</div><div class="line">method.invoke(null,null)//静态方法不需要对象调用，传null</div></pre></td></tr></table></figure>
<h1 id="三、反射的性能问题"><a href="#三、反射的性能问题" class="headerlink" title="三、反射的性能问题"></a>三、反射的性能问题</h1><p>1、代码的语言访问检查过于复杂，本来这块应该在链接阶段实现的，使用反射时需要在运行时才进行<br>2、运行时进行验证会产生过多的临时对象，影响GC的消耗<br>3、由于缺少上下文，导致不能进行更多的优化<br>现代JVM已经不慢了，能对反射代码进行缓存以及通过方法计数器同样实现JIT优化，所以反射不一定慢，可以大胆使用反射。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、反射技术简介及获取Class对象&quot;&gt;&lt;a href=&quot;#一、反射技术简介及获取Class对象&quot; class=&quot;headerlink&quot; title=&quot;一、反射技术简介及获取Class对象&quot;&gt;&lt;/a&gt;一、反射技术简介及获取Class对象&lt;/h1&gt;&lt;p&gt;&lt;stron
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLocal</title>
    <link href="http://yoursite.com/2017/08/23/ThreadLocal/"/>
    <id>http://yoursite.com/2017/08/23/ThreadLocal/</id>
    <published>2017-08-23T11:03:04.000Z</published>
    <updated>2017-08-30T11:46:44.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、ThreadLocal简述"><a href="#一、ThreadLocal简述" class="headerlink" title="一、ThreadLocal简述"></a>一、ThreadLocal简述</h1><p><strong>ThreadLocal，又叫线程本地变量，ThreadLocal变量为每个线程都创建了一个副本，每个线程都可以访问自己内部的副本变量，不同线程之间互不干扰。</strong>  </p>
<h1 id="二、深入解析ThreadLocall类"><a href="#二、深入解析ThreadLocall类" class="headerlink" title="二、深入解析ThreadLocall类"></a>二、深入解析ThreadLocall类</h1><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p><strong>从线程Thread的角度来看，每个线程内部都会持有一个对ThreadLocalMap实例的引用threadLocals，而ThreadLocalMap实例相当于线程的局部变量空间。引用threadLocals是用来存储实际的变量副本的，键值（key）是当前的ThreadLocal变量，value为变量副本（即ThreadLocal类型的变量值）。</strong><br><img src="http://osrmzp0jr.bkt.clouddn.com/threadLocal.png" alt="image">  </p>
<h2 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a>ThreadLocalMap</h2><p>内部使用table数组来存储Entry，默认的大小为INITIAL_CAPACITY(16)，其中两个参数：<br>1、size：table中元素的数量，其实就是ThreadLocal变量的数量，因为一个ThreadLocal变量对应table数组中的一个Entry。<br>2、threshold：等于table大小的2/3，当size&gt;=threshold时，遍历table并删除key为null的元素；如果删除后size&gt;=threshold的3/4，需要对table进行扩容。  </p>
<h2 id="ThreadLocal类提供的几个方法"><a href="#ThreadLocal类提供的几个方法" class="headerlink" title="ThreadLocal类提供的几个方法"></a>ThreadLocal类提供的几个方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public T get()&#123; &#125;</div><div class="line">public void set(T value)&#123; &#125;</div><div class="line">public void remove()&#123; &#125;</div><div class="line">protected T initiailValue()&#123; &#125;</div></pre></td></tr></table></figure>
<p>set(T value)方法用来设置当前线程中变量的副本；get()方法是用来获取ThreadLocal在当前线程中保存的变量副本；remove()用来移除当前线程中变量的副本。  </p>
<h3 id="1、ThreadLocal-set-T-value-实现"><a href="#1、ThreadLocal-set-T-value-实现" class="headerlink" title="1、ThreadLocal.set(T value)实现"></a>1、ThreadLocal.set(T value)实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public void set(T value)&#123;</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);//从当前线程获取ThreadLocalMap实例</div><div class="line">    if(map != null)</div><div class="line">        map.set(this, value);//将ThreadLocal实例和value封装成Entry存入ThreadLocalMap中</div><div class="line">    else</div><div class="line">        createMap(t, value);</div><div class="line">&#125;</div><div class="line"></div><div class="line">ThreadLocalMap getMap(Thread t)&#123;</div><div class="line">    return t.threadLocals;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上看出：<br><strong>1、从当前线程获取ThreadLocalMap实例<br>2、将ThreadLocal实例和value封装成Entry存入ThreadLocalMap中</strong>  </p>
<p><strong>map.set(this, value)的内部实现：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">private void set(ThreadLocal&lt;?&gt; key, Object value)&#123;</div><div class="line">    Entry[] tab = table;</div><div class="line">    int len = tab.length;</div><div class="line">    int i = key.threadLocalHashCode &amp; (len-1);</div><div class="line">    </div><div class="line">    for(Entry e = tab[i]; e != null; e = tab[i = nextIndex(i,len)])&#123;</div><div class="line">        ThreadLocal&lt;?&gt; k = e.get();</div><div class="line">        if(k == key)&#123;</div><div class="line">            e.value = value;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        if(k == null)&#123;</div><div class="line">            replaceStaleEntry(key, value, i);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    tab[i] = new Entry(key, value);</div><div class="line">    int sz = ++size;</div><div class="line">    if(!cleanSomeSlots(i,sz) &amp;&amp; sz &gt;= threshold)</div><div class="line">        rehash();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>1、通过key.threadLocalHashCode方法生成hash值；<br>2、通过 hash &amp; (len-1)，定位到table的位置i，假设table中位置i的元素为a；<br>3、如果a != null，假设a中的ThreadLocal的引用为k（即Entry的key）；<br>①如果引用k的实例和当前ThreadLocal实例一致，那么修改value值，返回<br>②如果引用k为null，说明元素a是陈旧的元素，删除并插入新元素，返回<br>③否则通过nextIndex方法找到下一个元素f，继续步骤3<br>4、如果a == null，那么把Entry加入到table的位置i上；<br>5、通过cleanSomeSlots删除陈旧的元素，如果table中没有元素删除，需要判断当前情况下是否要进行扩容</p>
<h3 id="2、ThreadLocal-get-实现"><a href="#2、ThreadLocal-get-实现" class="headerlink" title="2、ThreadLocal.get()实现"></a>2、ThreadLocal.get()实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public T get()&#123;</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap();//获取当前线程的threadLocals引用</div><div class="line">    if(map != null)&#123;</div><div class="line">        ThreadLocalMap.Entry e = map.getEntry(this);//根据this找到对应的Entry,this为当前ThreadLocal</div><div class="line">        if(e != null)&#123;</div><div class="line">            T result = (T)e.value;</div><div class="line">            return result;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return setInitialValue();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private Entry getEntry(ThreadLocal&lt;?&gt; key)&#123;</div><div class="line">    int i = key.threadLocalHashCode &amp; (table.length - 1);</div><div class="line">    Entry e = table[i];</div><div class="line">    if(e != null &amp;&amp; e.get() == key)</div><div class="line">        return e;</div><div class="line">    else</div><div class="line">        return getEntryAfterMiss(key, i, e);</div><div class="line">&#125;</div><div class="line"></div><div class="line">private T setInitialValue()&#123;</div><div class="line">    T value = initialValue();</div><div class="line">    Thread t = Thread.currentThread();</div><div class="line">    ThreadLocalMap map = getMap(t);</div><div class="line">    if(map != null)</div><div class="line">        map.set(this, value);</div><div class="line">    else</div><div class="line">        createMap(t, value);</div><div class="line">    return value;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取当前线程的threadLocals引用：<br>1、如果threadLocals不为null，那么通过ThreadLocalMap.getEntry(this)方法找到对应的entry，返回e.value<br>2、如果threadLocals为null，那么通过setInitialValue方法初始化，并返回  </p>
<h3 id="3、table扩容"><a href="#3、table扩容" class="headerlink" title="3、table扩容"></a>3、table扩容</h3><p><strong>当table中的元素数量达到阈值threshold的3/4时，会进行扩容操作：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">private void resize()&#123;</div><div class="line">    Entry[] oldTab = table;</div><div class="line">    int oldLen = oldTab.length;</div><div class="line">    int newLen = oldLen * 2;</div><div class="line">    Entry[] newTab = new Entry[newLen];</div><div class="line">    int count = 0;</div><div class="line">    </div><div class="line">    for(int j = 0; j &lt; oldLen; ++j)&#123;</div><div class="line">        Entry e = oldTab[j];</div><div class="line">        if(e != null)&#123;</div><div class="line">            ThreadLocal&lt;?&gt; k = e.get();</div><div class="line">            if(k == nunll)&#123;</div><div class="line">                e.value = null;</div><div class="line">            &#125;else&#123;</div><div class="line">                int h = k.threadLocalHashCode &amp; (newLen - 1);</div><div class="line">                while(newTab[h] != null)</div><div class="line">                    h = nextIndex(h,newLen);</div><div class="line">                newTab[h] = e;</div><div class="line">                count++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    setThreshold(newLen);</div><div class="line">    size = count;</div><div class="line">    table = newTab;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>1、新建新的数组newTab，大小为原来的2倍<br>2、复制table的元素到newTab，忽略陈旧的元素，假设table中的元素需要复制到newTab的位置i上，如果位置i存在元素，那么找下一个空位置进行插入  </p>
<h1 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h1><p>ThreadLocal不是用来解决对象共享访问的问题的，而主要是<strong>提供了保持对象的方法和避免参数传递的一种便捷的访问对象的方式：</strong><br><strong>1、每个线程中都有一个自己的ThreadLocalMap类对象，可以将线程自己的对象保存在其中，自己管自己的，线程可以正确的访问到自己的对象</strong><br><strong>2、将一个共有的ThreadLocal静态实例作为Key，将不同对象的引用保存到不同线程的ThreadLocalMap中，然后在线程执行的各处通过这个静态ThreadLocal实例的get()方法取出自己线程保存的哪个对象，避免了将这个对象作为参数传递的麻烦。</strong>  </p>
<p>最常用的ThreadLocal使用场景是用来解决<strong>数据库连接、Session管理</strong>等，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">private static final ThreadLocal threadSession = new ThreadLocal();</div><div class="line">public static Session getSession() throws InfrastructureException&#123;</div><div class="line">    Session s = (Session) threadSession.get();</div><div class="line">    try&#123;</div><div class="line">        if(s == null)&#123;</div><div class="line">            s = getSessionFactory().openSession();</div><div class="line">            threadSession.set(s);</div><div class="line">        &#125;</div><div class="line">    &#125;catch(HibernateException ex)&#123;</div><div class="line">        throw new  InfrastructureException(ex);</div><div class="line">    &#125;</div><div class="line">    return s;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，在方法getSession()中，首先通过threadSession.get()判断当前线程有没有放进去session，如果还没有，那么通过getSessionFactory().openSession()来创建一个session，再把session用set放进去，实际上是放到当前线程的ThreadLocalMap中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、ThreadLocal简述&quot;&gt;&lt;a href=&quot;#一、ThreadLocal简述&quot; class=&quot;headerlink&quot; title=&quot;一、ThreadLocal简述&quot;&gt;&lt;/a&gt;一、ThreadLocal简述&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;ThreadLoca
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java并发" scheme="http://yoursite.com/tags/java%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>深入ReetrantLock</title>
    <link href="http://yoursite.com/2017/08/21/%E6%B7%B1%E5%85%A5ReetrantLock/"/>
    <id>http://yoursite.com/2017/08/21/深入ReetrantLock/</id>
    <published>2017-08-21T13:18:04.000Z</published>
    <updated>2017-10-10T01:15:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、Lock接口"><a href="#一、Lock接口" class="headerlink" title="一、Lock接口"></a>一、Lock接口</h1><p>在Lock接口出现之前，Java程序是靠synchronized关键字实现锁功能的，在java5之后，并发包中增加了Lock接口（以及相关实现类）用来实现锁功能，它提供了与synchronized类似的功能，但是在使用时需要显式地获取和释放锁。虽然缺少了synchronized隐式获取释放锁的便捷性，但是却拥有锁获取和释放的可操作性、可中断的获取锁、超时获取锁等多种synchronized不具备的同步特性。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Lock lock = new ReetrantLock();</div><div class="line">Condition condition = lock.newCondition();</div><div class="line">lock.lock();</div><div class="line">try&#123;</div><div class="line">    while(条件判断)&#123;</div><div class="line">        condition.await();</div><div class="line">    &#125;</div><div class="line">&#125;finally&#123;</div><div class="line">    lock.unlock();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要显式的获取锁，并在finally块中显式的释放锁，保证在获取锁之后，最终能够被释放。  </p>
<h2 id="1、公平锁与非公平锁的实现"><a href="#1、公平锁与非公平锁的实现" class="headerlink" title="1、公平锁与非公平锁的实现"></a>1、公平锁与非公平锁的实现</h2><p>公平性与否，是针对于获取锁而言的。如果一个锁是公平的，那么锁的获取顺序就应该符合请求的绝对时间顺序，也就是FIFO。</p>
<h3 id="①非公平锁实现"><a href="#①非公平锁实现" class="headerlink" title="①非公平锁实现"></a>①非公平锁实现</h3><p>对于非公平锁，只要CAS设置同步状态成功，就表示当前线程获取了锁。<br><strong>1、线程A和B同时执行CAS指令，假设线程A成功，线程B失败，表示线程A成功获取锁，并把同步器中的exclusiveOwnerThread设置为线程A。</strong><br><strong>2、竞争失败的线程B，在nonfairTryAcquire方法中，会再次尝试获取锁，在这段时间如果线程A释放锁，线程B就可以直接获取锁而不用挂起。</strong>  </p>
<h3 id="②公平锁实现"><a href="#②公平锁实现" class="headerlink" title="②公平锁实现"></a>②公平锁实现</h3><p><strong>在公平锁中，每当线程执行lock方法时，如果同步器的队列中有线程等待，则直接加入到队列中。</strong><br>公平锁的实现方法tryAcquire与非公平锁的实现方法nonfairTryAcquire方法比较，唯一不同的是判断条件多了hasQueuedPredecessors()方法，即加入了同步队列中当前节点是否有前驱节点的判断，如果该方法返回true，表示有线程比当前线程更早的请求获取锁，因此需要等待前驱线程获取并释放锁之后才能继续获取锁。  </p>
<h2 id="2、重入锁实现"><a href="#2、重入锁实现" class="headerlink" title="2、重入锁实现"></a>2、重入锁实现</h2><p>重入锁ReentrantLock，即线程可以重复获取已经持有的锁。通过ReentrantLock的构造函数，还支持选择获取锁时的公平和非公平选择。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if(current == getExclusiveOwnerThread())&#123;</div><div class="line">    int nextc = c + acquires;</div><div class="line">    if(nextc &lt; 0)</div><div class="line">        throw new Error(&quot;Maximum lock count exceeded&quot;);</div><div class="line">    setState(nextc);</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为每个锁关联一个获取计数器和一个所有者线程，当计数值为0时，这个锁就没有被任何线程持有。当线程请求一个未被持有的锁时，JVM会记下锁的持有者，并且将获取计数值置为1，如果同一个线程再次获取这个锁，计数值将递增。每退出一次同步代码块，计数值就递减一次。当计数值为0时，这个锁就被释放。</p>
<h1 id="二、Condition接口"><a href="#二、Condition接口" class="headerlink" title="二、Condition接口"></a>二、Condition接口</h1><p>任意一个Java对象，都拥有一组监视器方法（定义在java.lang.Object上），主要包括wait()、wait(long timeout)、notify()、notifyAll()方法，这些方法和synchronized配合，可以实现等待/通知模式。<br>Condition接口也提供了类似Object的监视器方法，和Lock配合来实现等待/通知模式。但两者存在差异。<br><strong>1、synchronized中，所有的线程都在同一个object的等待队列上等待；在ReentrantLock中，每个condition都维护了一个等待队列。</strong><br><strong>2、Condition是与Lock绑定的，所有就有Lock的公平性特性：如果是公平锁，线程按照FIFO的顺序从Condition.await的等待队列中释放；如果是非公平锁，那么后续的锁竞争就不保证FIFO顺序了。</strong>  </p>
<h3 id="conditon在生产者消费者中的应用场景"><a href="#conditon在生产者消费者中的应用场景" class="headerlink" title="conditon在生产者消费者中的应用场景"></a>conditon在生产者消费者中的应用场景</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">class ConditionTest&#123;</div><div class="line">    final Lock lock = new ReentrantLock();</div><div class="line">    final Condition notFull = lock.newCondition();//生产</div><div class="line">    final Condition notEmpty = lock.newCondition();//消费</div><div class="line">    final Object[] items = new Object[100];//存储商品的容器</div><div class="line">    int putptr, takeptr, count;//生产者角标、消费者角标、计数器</div><div class="line">    //往容器中存储商品</div><div class="line">    public void put(Object x)throws InterruptedException&#123;&#123;</div><div class="line">        lock.lock();</div><div class="line">        try&#123;</div><div class="line">            while(count == items.length)//容器满，生产就等待</div><div class="line">                notFull.await();</div><div class="line">            items[putptr] = x;</div><div class="line">            if(++putptr == items.length)//角标到容器最后，归零</div><div class="line">                putptr = 0;</div><div class="line">            ++count;</div><div class="line">            notEmpty.signal();//唤醒一个消费者</div><div class="line">        &#125;finally&#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    //从容器出取出商品</div><div class="line">    public Object take()throws InterruptedException&#123;&#123;</div><div class="line">        lock.lock();</div><div class="line">        try&#123;</div><div class="line">            while(count == 0)</div><div class="line">                notEmpty.await();</div><div class="line">            Object x = items[takeptr];</div><div class="line">            if(++takeptr == items.length)</div><div class="line">                takeptr = 0;</div><div class="line">            --count;</div><div class="line">            notFull.signal();</div><div class="line">            return x;</div><div class="line">        &#125;finally&#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="1、await方法实现"><a href="#1、await方法实现" class="headerlink" title="1、await方法实现"></a>1、await方法实现</h2><p><strong>当调用await()方法后，当前线程会释放锁并在此等待，而其他线程调用Condition的signal()方法时，通知当前线程后，当前线程之后从await()方法处返回，并在返回前已经获取到了锁。</strong>  </p>
<p>如果线程A执行await方法：<br>1、将线程A加入到conditon的等待队列中，如果最后一个节点的状态是CANCELLED，就从队列中删除。<br>2、线程A释放锁，线程A修改AQS的状态state为0，并唤醒AQS同步队列中的线程B，线程B唤醒后，尝试获取锁。<br>3、线程A释放锁并唤醒线程B后，如果线程A不在AQS同步队列中，就通过LockSupport.park进行挂起操作。<br>4、当线程A被唤醒时，会通过acquireQueued方法竞争锁，如果失败，继续挂起；如果成功，线程A从await位置恢复。  </p>
<p><strong>acquireQueued方法：节点进入同步队列之后，就进入了一个自旋的过程，每个节点（每个线程）都在自省地观察，当条件满足，获取到了同步状态，就可以从这个自旋的过程中退出，否则依旧留在这个自旋的过程中（并会阻塞节点的线程）。</strong><br>如下图所示：<br><img src="http://osrmzp0jr.bkt.clouddn.com/d_%E5%89%AF%E6%9C%AC.jpg" alt="image"></p>
<h2 id="2、notify方法实现"><a href="#2、notify方法实现" class="headerlink" title="2、notify方法实现"></a>2、notify方法实现</h2><p>如果线程B执行notify方法：<br>1、接着上述场景，线程B执行signal方法，取出等待队列的第一个非CANCELLED的节点线程，即线程A。遇到CANCELLED线程就需要将其从队列中删除。<br>2、通过CAS修改线程A的waitStatus为0，表示该节点已经不是处于等待队列状态，并将A插入到AQS的同步队列中。<br>3、唤醒线程A，线程A和别的线程进行锁的竞争。  </p>
<h2 id="从队列角度看await方法和notify方法"><a href="#从队列角度看await方法和notify方法" class="headerlink" title="从队列角度看await方法和notify方法"></a>从队列角度看await方法和notify方法</h2><p>1、当调用await()方法时，相当于同步队列的首节点（获取了锁的节点）移动到Condition的等待队列中。<br><img src="http://osrmzp0jr.bkt.clouddn.com/a_%E5%89%AF%E6%9C%AC.jpg" alt="image">  </p>
<p>2、当调用notify()方法时，将会唤醒在等待队列中等待时间最长的节点（首节点），在唤醒节点之前，会将节点已到同步队列中。<br><img src="http://osrmzp0jr.bkt.clouddn.com/b_%E5%89%AF%E6%9C%AC.jpg" alt="image">  </p>
<h1 id="三、synchronized和lock的区别"><a href="#三、synchronized和lock的区别" class="headerlink" title="三、synchronized和lock的区别"></a>三、synchronized和lock的区别</h1><p><strong>1、用法上：<br>synchronized是隐式锁，在需要同步的地方加上，可以加在方法上，也可以加在同步块上；<br>lock是显式锁，需要指定起始位置和终止位置，在加锁和解锁出通过lock()和unlock()显式指出，需要在finally中释放锁。<br>2、功能上：<br>ReentrantLock提供了和内置锁synchronized类似的功能和内存语义。此外，ReentrantLock还提供了更丰富的功能。包括定时的锁等待、公平性、实现非块结构的加锁，对线程的等待和唤醒操作更加灵活，一个ReentrantLock可以有多个Condition实例，所以更有扩展性。<br>3、性能上：<br>synchronized是托管给JVM执行的，而lock是java写的控制锁的代码。在java1.5中，synchronized是性能低效的，相比之下，lock的性能更高。<br>但是到了java1.6，发生了变化。synchronized进行了很多优化，有适应自旋、锁消除、锁粗化、轻量级锁、偏向锁等等，导致在java1.6上，synchronized的性能并不比lock差。<br>4、机制上：<br>synchronized采用的是悲观锁机制，即线程获得的是独占锁，意味着其他线程只能阻塞来等待线程释放锁；<br>而Lock用的是乐观锁方式，乐观锁就是每次不加锁，而是假设没有冲突去完成某项操作，如果因为冲突失败就重试，知道成功为止。乐观锁实现的机制就是CAS操作。</strong>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、Lock接口&quot;&gt;&lt;a href=&quot;#一、Lock接口&quot; class=&quot;headerlink&quot; title=&quot;一、Lock接口&quot;&gt;&lt;/a&gt;一、Lock接口&lt;/h1&gt;&lt;p&gt;在Lock接口出现之前，Java程序是靠synchronized关键字实现锁功能的，在jav
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java并发" scheme="http://yoursite.com/tags/java%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Semaphore</title>
    <link href="http://yoursite.com/2017/08/17/Semaphore/"/>
    <id>http://yoursite.com/2017/08/17/Semaphore/</id>
    <published>2017-08-17T12:13:00.000Z</published>
    <updated>2017-08-17T12:13:41.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Semaphore"><a href="#什么是Semaphore" class="headerlink" title="什么是Semaphore"></a>什么是Semaphore</h2><p><strong>Semaphore(信号量)是用来控制同时访问特定资源的线程数量，通过协调各个线程，以保证合理的使用公共资源。</strong><br><strong>Semaphore的构造方法Semaphore(int permits)接受一个整形的数字，表示可用的许可证数量。许可证的数量也代表着最大并发数。</strong><br><strong>1、在访问特定资源时，必须使用acquire()方法来获取一个许可证，如果许可的数量为0，该线程就一直阻塞，直到有可用的许可。</strong><br><strong>2、访问完资源后，使用release()方法归还许可证。</strong><br>Semaphore和ReetrantLock类似，获取许可可用公平策略或者非公平策略，默认情况下使用非公平策略。  </p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>Semaphore可用于流量控制，比如数据库连接。如有一个需求，要读取几万个文件的数据，因为都是IO密集型任务，我们可以启动几十个线程并发地读取，但是在读到内存后，我们还需要存储到数据库中，而这时数据库的连接数如果只有10，这时我们必须控制只有10个线程同时获取数据库连接保存数据，否则会报错无法获取数据库连接。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class SemaphoreTest&#123;</div><div class="line">    private static final int THREAD_COUNT = 30;</div><div class="line">    private static ExecutorService threadPool = Excutors.newFixedThreadPool(THREAD_COUNT);</div><div class="line">    private static Semaphore s = new Semaphore(10);</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        for(int i =0; i&lt;THREAD_COUNT; i++)&#123;</div><div class="line">            threadPool.execute(new Runnable()&#123;</div><div class="line">                @Override</div><div class="line">                public void run()&#123;</div><div class="line">                    try&#123;</div><div class="line">                        //读取文件操作</div><div class="line">                        s.acquire();</div><div class="line">                        //存储数据操作</div><div class="line">                        s.release();</div><div class="line">                    &#125;catch(InterruptedException e)&#123;</div><div class="line">                        </div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        threadPool.shutdown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>Semaphore的实现主要基于Java同步器AQS，内部使用state表示许可数量。  </p>
<h3 id="非公平策略"><a href="#非公平策略" class="headerlink" title="非公平策略"></a>非公平策略</h3><h4 id="1、acquire实现"><a href="#1、acquire实现" class="headerlink" title="1、acquire实现"></a>1、acquire实现</h4><p>核心代码如下  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">final int nonfairTryAcquireShared(int acquires)&#123;</div><div class="line">    for(;;)&#123;</div><div class="line">        int available = getState();</div><div class="line">        int remaining = available - acquires;</div><div class="line">        if(remaining&lt;0 || compareAndSetState(available,remaining)</div><div class="line">            return remaining;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>acquires的值默认为1，表示尝试获取一个许可，remaining代表剩余的许可数。<br><strong>如果remaining &lt; 0，表示目前没有剩余可用的许可了，那么当前线程进入AQS中的doAcquireSharedInterruptibly方法等待可用的许可，并且被挂起，直到被唤醒。</strong>  </p>
<h4 id="2、release实现"><a href="#2、release实现" class="headerlink" title="2、release实现"></a>2、release实现</h4><p>核心代码如下  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">protected final boolean tryReleaseShared(int release)&#123;</div><div class="line">    for(;;)&#123;</div><div class="line">        int current = getState();</div><div class="line">        int next = current + releases;</div><div class="line">        if(next &lt; current)</div><div class="line">            throw new Error(&quot;Maximum permit count exceeded&quot;)</div><div class="line">        if(compareAndSetState(current,next)</div><div class="line">            return true;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>releases的值默认为1，表示尝试释放1个许可；next代表许可释放成功后，可用许可的数量。<br><strong>1、通过unsafe.compareAndSwapInt修改state的值，确保同一时刻只有一个线程可以释放成功。</strong><br><strong>2、如果许可释放成功，那么当前线程进入到AQS的doReleaseShared方法，唤醒队列中等待许可的线程。</strong>  </p>
<h4 id="非公平性的体现"><a href="#非公平性的体现" class="headerlink" title="非公平性的体现"></a>非公平性的体现</h4><p><strong>当一个线程A执行acquire方法时，会直接尝试获取许可，而不管同一时刻阻塞队列中是否有线程也在等待许可，如果恰好有线程C执行release释放许可，并唤醒阻塞队列中的第一个等待的线程B，这时，线程A和B共同竞争可用许可，不公平性体现出来，线程A没有等待就和线程B同等对待。</strong>   </p>
<h3 id="公平策略"><a href="#公平策略" class="headerlink" title="公平策略"></a>公平策略</h3><h4 id="1、acquire实现-1"><a href="#1、acquire实现-1" class="headerlink" title="1、acquire实现"></a>1、acquire实现</h4><p>核心代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">final int TryAcquireShared(int acquires)&#123;</div><div class="line">    for(;;)&#123;</div><div class="line">        if(hasQueuePredecessors())</div><div class="line">            return -1;</div><div class="line">        int available = getState();</div><div class="line">        int remaining = available - acquires;</div><div class="line">        if(remaining&lt;0 || compareAndSetState(available,remaining)</div><div class="line">            return remaining;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>acquires的值默认为1，表示尝试获取一个许可，remaining代表剩余的许可数。<br>与非公平策略相比，只是多了一个对阻塞队列的检查。<br><strong>1、如果阻塞队列中没有等待的线程，那么当前线程可以参与许可的竞争；</strong><br><strong>2、如果阻塞队列中有等待的线程，那么直接插入阻塞队列尾结点并挂起，等待被唤醒。</strong>  </p>
<h4 id="2、release实现-1"><a href="#2、release实现-1" class="headerlink" title="2、release实现"></a>2、release实现</h4><p>和非公平策略一样。  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Semaphore&quot;&gt;&lt;a href=&quot;#什么是Semaphore&quot; class=&quot;headerlink&quot; title=&quot;什么是Semaphore&quot;&gt;&lt;/a&gt;什么是Semaphore&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Semaphore(信号量)是用来控制同时访
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="java并发" scheme="http://yoursite.com/tags/java%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
</feed>
